<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>js中数组对象排序</title>
    <link href="/blog/2021/05/08/JS/sortCompare/"/>
    <url>/blog/2021/05/08/JS/sortCompare/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 排序</span><br><span class="hljs-comment"> * arr: 所需排序的数组</span><br><span class="hljs-comment"> * prop：排序的依据字段</span><br><span class="hljs-comment"> * order：默认true -&gt; 正序（小 -&gt; 大） / false -&gt; 倒序（大 -&gt; 小）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">sortCompare</span> = (<span class="hljs-params">arr, prop, order = <span class="hljs-literal">true</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">sort</span>(<span class="hljs-title function_">compare</span>(prop, order))<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">compare</span>(<span class="hljs-params">prop, order</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">obj1, obj2</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> val1 = obj1[prop]<br>    <span class="hljs-keyword">let</span> val2 = obj2[prop]<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isNaN</span>(<span class="hljs-title class_">Number</span>(val1)) &amp;&amp; !<span class="hljs-built_in">isNaN</span>(<span class="hljs-title class_">Number</span>(val2))) &#123;<br>      val1 = <span class="hljs-title class_">Number</span>(val1)<br>      val2 = <span class="hljs-title class_">Number</span>(val2)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (order) &#123;<br>      <span class="hljs-keyword">if</span> (val1 &lt; val2) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (val1 &gt; val2) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (val1 &gt; val2) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (val1 &lt; val2) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数组</tag>
      
      <tag>utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git emoji</title>
    <link href="/blog/2021/04/28/other/gitemoji/"/>
    <url>/blog/2021/04/28/other/gitemoji/</url>
    
    <content type="html"><![CDATA[<h1 id="git-提交消息的表情符号指南"><a href="#git-提交消息的表情符号指南" class="headerlink" title="git 提交消息的表情符号指南"></a>git 提交消息的表情符号指南</h1><h2 id="Gitmoji"><a href="#Gitmoji" class="headerlink" title="Gitmoji"></a>Gitmoji</h2><blockquote><p>是一项倡议，旨在标准化和解释 GitHub 提交消息上表情符号的使用。</p></blockquote><p>记录一下 emoji 在 git 中的使用方法，直接在 git 提交时添加 emoji 图标代码就可以了，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;:tada: Initial commit&quot;</span><br></code></pre></td></tr></table></figure><p>关于所有的 emoji 图标代码，可以参考<a href="https://link.juejin.im/?target=https://emojipedia.org/">emojipedia</a>，不过 GitHub 上有一套约定俗成的 emoji 使用规范，我整理成了以下表格，在使用 git 提交信息的时候，你不妨尝试使用它们，让你的提交信息更加明晰和生动。</p><table><thead><tr><th align="left">emoji</th><th align="left">emoji 代码</th><th align="left">commit 说明</th></tr></thead><tbody><tr><td align="left">:art: (调色板)</td><td align="left"><code>:art:</code></td><td align="left">改进代码结构/代码格式</td></tr><tr><td align="left">:zap: (闪电) :racehorse: (赛马)</td><td align="left"><code>:zap:</code> <code>:racehorse:</code></td><td align="left">提升性能</td></tr><tr><td align="left">:fire: (火焰)</td><td align="left"><code>:fire:</code></td><td align="left">移除代码或文件</td></tr><tr><td align="left">:bug: (bug)</td><td align="left"><code>:bug:</code></td><td align="left">修复 bug</td></tr><tr><td align="left">:ambulance: (急救车)</td><td align="left"><code>:ambulance:</code></td><td align="left">重要补丁</td></tr><tr><td align="left">:sparkles: (火花)</td><td align="left"><code>:sparkles:</code></td><td align="left">引入新功能</td></tr><tr><td align="left">:memo: (备忘录)</td><td align="left"><code>:memo:</code></td><td align="left">撰写文档</td></tr><tr><td align="left">:rocket: (火箭)</td><td align="left"><code>:rocket:</code></td><td align="left">部署功能</td></tr><tr><td align="left">:lipstick: (口红)</td><td align="left"><code>:lipstick:</code></td><td align="left">更新 UI 和样式文件</td></tr><tr><td align="left">:tada: (庆祝)</td><td align="left"><code>:tada:</code></td><td align="left">初次提交</td></tr><tr><td align="left">:white_check_mark: (白色复选框)</td><td align="left"><code>:white_check_mark:</code></td><td align="left">更新测试</td></tr><tr><td align="left">:lock: (锁)</td><td align="left"><code>:lock:</code></td><td align="left">修复安全问题</td></tr><tr><td align="left">:apple: (苹果)</td><td align="left"><code>:apple:</code></td><td align="left">修复 macOS 下的问题</td></tr><tr><td align="left">:penguin: (企鹅)</td><td align="left"><code>:penguin:</code></td><td align="left">修复 Linux 下的问题</td></tr><tr><td align="left">:checkered_flag: (旗帜)</td><td align="left"><code>:checked_flag:</code></td><td align="left">修复 Windows 下的问题</td></tr><tr><td align="left">:robot:（机器人）</td><td align="left"><code>:robot:</code></td><td align="left">修复 Android 下的问题</td></tr><tr><td align="left">:green_apple: (绿苹果)</td><td align="left"><code>:green_apple:</code></td><td align="left">修复 iOS 下的问题</td></tr><tr><td align="left">:bookmark: (书签)</td><td align="left"><code>:bookmark:</code></td><td align="left">发行/版本标签</td></tr><tr><td align="left">:rotating_light: (警车灯)</td><td align="left"><code>:rotating_light:</code></td><td align="left">移除 linter 警告</td></tr><tr><td align="left">:construction: (施工)</td><td align="left"><code>:construction:</code></td><td align="left">工作进行中</td></tr><tr><td align="left">:construction_worker: (工人)</td><td align="left"><code>:construction_worker:</code></td><td align="left">添加 CI 构建系统</td></tr><tr><td align="left">:green_heart: (绿心)</td><td align="left"><code>:green_heart:</code></td><td align="left">修复 CI 构建问题</td></tr><tr><td align="left">:arrow_up: (上升箭头)</td><td align="left"><code>:arrow_up:</code></td><td align="left">升级依赖</td></tr><tr><td align="left">:arrow_down: (下降箭头)</td><td align="left"><code>:arrow_down:</code></td><td align="left">降级依赖</td></tr><tr><td align="left">:pushpin: (图钉)</td><td align="left"><code>:pushpin:</code></td><td align="left">将依赖项固定到特定版本</td></tr><tr><td align="left">:chart_with_upwards_trend: (上升趋势图)</td><td align="left"><code>:chart_with_upwards_trend:</code></td><td align="left">添加分析或跟踪代码</td></tr><tr><td align="left">:recycle: （回收）</td><td align="left"><code>:recycle:</code></td><td align="left">重构代码</td></tr><tr><td align="left">:whale: (鲸鱼)</td><td align="left"><code>:whale:</code></td><td align="left">Docker 相关工作</td></tr><tr><td align="left">:globe_with_meridians: (带子午线的地球仪)</td><td align="left"><code>:globe_with_meridians:</code></td><td align="left">国际化与本地化</td></tr><tr><td align="left">:heavy_plus_sign: (加号)</td><td align="left"><code>:heavy_plus_sign:</code></td><td align="left">增加一个依赖</td></tr><tr><td align="left">:heavy_minus_sign: (减号)</td><td align="left"><code>:heavy_minus_sign:</code></td><td align="left">减少一个依赖</td></tr><tr><td align="left">:wrench: (扳手)</td><td align="left"><code>:wrench:</code></td><td align="left">修改配置文件</td></tr><tr><td align="left">:hammer: (锤子)</td><td align="left"><code>:hammer:</code></td><td align="left">重大重构</td></tr><tr><td align="left">:pencil2: (铅笔)</td><td align="left"><code>:pencil2:</code></td><td align="left">修复 typo</td></tr><tr><td align="left">:hankey: (粑粑…)</td><td align="left"><code>:hankey:</code></td><td align="left">写了辣鸡代码需要优化</td></tr><tr><td align="left">:rewind: (倒带)</td><td align="left"><code>:rewind:</code></td><td align="left">恢复更改</td></tr><tr><td align="left">:twisted_rightwards_arrows: (交叉向右的箭头)</td><td align="left"><code>:twisted_rightwards_arrows:</code></td><td align="left">合并分支</td></tr><tr><td align="left">:package: (包裹)</td><td align="left"><code>:package:</code></td><td align="left">更新编译的文件或包</td></tr><tr><td align="left">:alien: (外星人)</td><td align="left"><code>:alien:</code></td><td align="left">由于外部 API 更改而更新代码</td></tr><tr><td align="left">:truck: (货车)</td><td align="left"><code>:truck:</code></td><td align="left">移动或者重命名文件</td></tr><tr><td align="left">:page_facing_up: (正面朝上的页面)</td><td align="left"><code>:page_facing_up:</code></td><td align="left">增加或更新许可证书</td></tr><tr><td align="left">:boom: (爆炸)</td><td align="left"><code>:boom:</code></td><td align="left">引入突破性的变化</td></tr><tr><td align="left">:bento: (铅笔)</td><td align="left"><code>:bento:</code></td><td align="left">增加或更新资源</td></tr><tr><td align="left">:ok_hand: (OK 手势)</td><td align="left"><code>:ok_hand:</code></td><td align="left">由于代码审查更改而更新代码</td></tr><tr><td align="left">:wheelchair: (轮椅)</td><td align="left"><code>:wheelchair:</code></td><td align="left">改善无障碍交互</td></tr><tr><td align="left">:bulb: (灯泡)</td><td align="left"><code>:bulb:</code></td><td align="left">给代码添加注释</td></tr><tr><td align="left">:beers: (啤酒)</td><td align="left"><code>:beers:</code></td><td align="left">醉醺醺地写代码…</td></tr><tr><td align="left">:speech_balloon: (消息气泡)</td><td align="left"><code>:speech_balloon:</code></td><td align="left">更新文本文档</td></tr><tr><td align="left">:card_file_box: (卡片文件盒)</td><td align="left"><code>:card_file_box:</code></td><td align="left">执行与数据库相关的更改</td></tr><tr><td align="left">:loud_sound: (音量大)</td><td align="left"><code>:loud_sound:</code></td><td align="left">增加日志</td></tr><tr><td align="left">:mute: (静音)</td><td align="left"><code>:mute:</code></td><td align="left">移除日志</td></tr><tr><td align="left">:busts_in_silhouette: (轮廓中的半身像)</td><td align="left"><code>:busts_in_silhouette:</code></td><td align="left">增加贡献者</td></tr><tr><td align="left">:children_crossing: (孩童通行)</td><td align="left"><code>:children_crossing:</code></td><td align="left">优化用户体验、可用性</td></tr><tr><td align="left">:building_construction: (建筑建造)</td><td align="left"><code>:building_construction:</code></td><td align="left">结构变动</td></tr><tr><td align="left">:iphone: (iPhone)</td><td align="left"><code>:iphone:</code></td><td align="left">做响应式设计</td></tr><tr><td align="left">:clown_face: (小丑脸)</td><td align="left"><code>:clown_face:</code></td><td align="left">嘲弄事物（直译，这个没明白）</td></tr><tr><td align="left">:egg: (鸡蛋)</td><td align="left"><code>:egg:</code></td><td align="left">增加彩蛋</td></tr><tr><td align="left">:see_no_evil: (看不见邪恶)</td><td align="left"><code>:see_no_evil:</code></td><td align="left">增加或更改 gitignore</td></tr><tr><td align="left">:camera_flash: (照相机闪光灯)</td><td align="left"><code>:camera_flash:</code></td><td align="left">增加或更新截图</td></tr><tr><td align="left">:alembic: (蒸馏器)</td><td align="left"><code>:alembic:</code></td><td align="left">尝试新东西</td></tr><tr><td align="left">:mag: (放大镜)</td><td align="left"><code>:mag:</code></td><td align="left">SEO 优化</td></tr><tr><td align="left">:wheel_of_dharma: (船的方向盘)</td><td align="left"><code>:wheel_of_dharma:</code></td><td align="left">关于 Kubernetes 的工作</td></tr><tr><td align="left">:label: (标签)</td><td align="left"><code>:label:</code></td><td align="left">增加类型（FLow、Typescript）</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js中数组对象去重</title>
    <link href="/blog/2021/03/17/JS/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E5%8E%BB%E9%87%8D/"/>
    <url>/blog/2021/03/17/JS/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E5%8E%BB%E9%87%8D/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">parentid</span>: <span class="hljs-number">0</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">parentid</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">parentid</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">parentid</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">parentid</span>: <span class="hljs-number">2</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">parentid</span>: <span class="hljs-number">2</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">parentid</span>: <span class="hljs-number">0</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">parentid</span>: <span class="hljs-number">0</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">parentid</span>: <span class="hljs-number">0</span> &#125;,<br>]<br></code></pre></td></tr></table></figure><h3 id="数组对象去重方法一"><a href="#数组对象去重方法一" class="headerlink" title="数组对象去重方法一"></a>数组对象去重方法一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj1 = &#123;&#125;<br><span class="hljs-keyword">let</span> res1 = []<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!obj1[item.<span class="hljs-property">id</span>]) &#123;<br>    res1.<span class="hljs-title function_">push</span>(item)<br>    obj1[item.<span class="hljs-property">id</span>] = <span class="hljs-literal">true</span><br>  &#125;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res1)<br></code></pre></td></tr></table></figure><h3 id="数组对象去重方法二"><a href="#数组对象去重方法二" class="headerlink" title="数组对象去重方法二"></a>数组对象去重方法二</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj2 = &#123;&#125;<br><span class="hljs-keyword">let</span> res2 = []<br>res2 = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, item</span>) =&gt;</span> &#123;<br>  obj2[item.<span class="hljs-property">id</span>] ? <span class="hljs-string">&#x27;&#x27;</span> : (obj2[item.<span class="hljs-property">id</span>] = <span class="hljs-literal">true</span> &amp;&amp; prev.<span class="hljs-title function_">push</span>(item))<br>  <span class="hljs-keyword">return</span> prev<br>&#125;, [])<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res2)<br></code></pre></td></tr></table></figure><p><code>reduce</code>的用法：</p><p><code>reduce()</code>方法接收一个函数作为累加器，<code>reduce</code>为数组中每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，回调函数接收的四个参数：初始值（上一次回调的返回值）、当前元素、当前索引、原数组。</p><p>语法：<code>arr.reduce(callback, [initialValue])</code></p><p><code>callback</code>中的 4 个参数：</p><ol><li><code>previousValue</code>：上一次调用回调返回的值，或者是提供的初始值<code>initialValue</code></li><li><code>currentValue</code>：数组中当前被处理的元素</li><li><code>index</code>：当前元素在数组中的索引</li><li><code>array</code>：调用的数组</li></ol><p><code>initialValue</code>：作为第一次调用<code>callback</code>的第一个参数</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数组</tag>
      
      <tag>utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 基础面试</title>
    <link href="/blog/2021/03/02/other/interview/"/>
    <url>/blog/2021/03/02/other/interview/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h1><blockquote><p>注意：每道题前面出现的 (xx) 数字代表这道题出现的频次，此 JS 基础是基于 30+ 篇前端面经整理出的问题和对应的回答、参考链接等。文章内容为拿到 Offer 的本人整理。</p></blockquote><h2 id="（2）问：0-1-0-2-0-3-嘛？为什么？"><a href="#（2）问：0-1-0-2-0-3-嘛？为什么？" class="headerlink" title="（2）问：0.1 + 0.2 === 0.3 嘛？为什么？"></a>（2）问：0.1 + 0.2 === 0.3 嘛？为什么？</h2><p><code>JavaScirpt</code> 使用 <code>Number</code> 类型来表示数字（整数或浮点数），遵循 IEEE 754 标准，通过 64 位来表示一个数字（1 + 11 + 52）</p><ul><li>1 符号位，0 表示正数，1 表示负数 s</li><li>11 指数位（e）</li><li>52 尾数，小数部分（即有效数字）</li></ul><p>最大安全数字：<code>Number.MAX_SAFE_INTEGER = Math.pow(2, 53) - 1</code>，转换成整数就是 <code>16</code> 位，所以 0.1 === 0.1，是因为通过 toPrecision(16) 去有效位之后，两者是相等的。</p><p>在两数相加时，会先转换成二进制，0.1 和 0.2 转换成二进制的时候尾数会发生无限循环，然后进行对阶运算，JS 引擎对二进制进行截断，所以造成精度丢失。</p><p>所以总结：<strong>精度丢失可能出现在进制转换和对阶运算中</strong></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://juejin.im/post/5b90e00e6fb9a05cf9080dff">juejin.im/post/5b90e0…</a></li></ul><h2 id="（4）问：JS-数据类型"><a href="#（4）问：JS-数据类型" class="headerlink" title="（4）问：JS 数据类型"></a>（4）问：JS 数据类型</h2><p>基本类型：<code>Number</code>、<code>Boolean</code>、<code>String</code>、<code>null</code>、<code>undefined</code>、<code>symbol</code>（ES6 新增的），<code>BigInt</code>（ES2020） 引用类型：<code>Object</code>，对象子类型（<code>Array</code>，<code>Function</code>）</p><h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://juejin.im/post/5b2b0a6051882574de4f3d96">juejin.im/post/5b2b0a…</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures">developer.mozilla.org/zh-CN/docs/…</a></li></ul><h2 id="问：JS-整数是怎么表示的？"><a href="#问：JS-整数是怎么表示的？" class="headerlink" title="问：JS 整数是怎么表示的？"></a>问：JS 整数是怎么表示的？</h2><ul><li>通过 Number 类型来表示，遵循 IEEE754 标准，通过 64 位来表示一个数字，（1 + 11 + 52），最大安全数字是 Math.pow(2, 53) - 1，对于 16 位十进制。（符号位 + 指数位 + 小数部分有效位）</li></ul><h2 id="问：Number-的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办"><a href="#问：Number-的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办" class="headerlink" title="问：Number() 的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办"></a>问：Number() 的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办</h2><p>Math.pow(2, 53) ，53 为有效数字，会发生截断，等于 JS 能支持的最大数字。</p><h2 id="（4）写代码：实现函数能够深度克隆基本类型"><a href="#（4）写代码：实现函数能够深度克隆基本类型" class="headerlink" title="（4）写代码：实现函数能够深度克隆基本类型"></a>（4）写代码：实现函数能够深度克隆基本类型</h2><p>浅克隆：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">shallowClone</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">let</span> cloneObj = &#123;&#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>    cloneObj[i] = obj[i]<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> cloneObj<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>深克隆：</p><ul><li>考虑基础类型</li><li>引用类型<ul><li>RegExp、Date、函数 不是 JSON 安全的</li><li>会丢失 constructor，所有的构造函数都指向 Object</li><li>破解循环引用</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepCopy</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>    <span class="hljs-keyword">var</span> result = obj.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span> ? [] : &#123;&#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>      result[i] = <span class="hljs-keyword">typeof</span> obj[i] === <span class="hljs-string">&#x27;object&#x27;</span> ? <span class="hljs-title function_">deepCopy</span>(obj[i]) : obj[i]<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">var</span> result = obj<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="问：事件流"><a href="#问：事件流" class="headerlink" title="问：事件流"></a>问：事件流</h2><p>事件流是网页元素接收事件的顺序，”DOM2 级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段。 首先发生的事件捕获，为截获事件提供机会。然后是实际的目标接受事件。最后一个阶段是时间冒泡阶段，可以在这个阶段对事件做出响应。 虽然捕获阶段在规范中规定不允许响应事件，但是实际上还是会执行，所以有两次机会获取到目标对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>事件冒泡<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;parEle&quot;</span>&gt;</span>我是父元素 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sonEle&quot;</span>&gt;</span>我是子元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> sonEle = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;sonEle&#x27;</span>)</span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> parEle = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;parEle&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  parEle.<span class="hljs-title function_">addEventListener</span>(</span><br><span class="language-javascript">    <span class="hljs-string">&#x27;click&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;父级 冒泡&#x27;</span>)</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-literal">false</span></span><br><span class="language-javascript">  )</span><br><span class="language-javascript">  parEle.<span class="hljs-title function_">addEventListener</span>(</span><br><span class="language-javascript">    <span class="hljs-string">&#x27;click&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;父级 捕获&#x27;</span>)</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-literal">true</span></span><br><span class="language-javascript">  )</span><br><span class="language-javascript"></span><br><span class="language-javascript">  sonEle.<span class="hljs-title function_">addEventListener</span>(</span><br><span class="language-javascript">    <span class="hljs-string">&#x27;click&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;子级冒泡&#x27;</span>)</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-literal">false</span></span><br><span class="language-javascript">  )</span><br><span class="language-javascript">  sonEle.<span class="hljs-title function_">addEventListener</span>(</span><br><span class="language-javascript">    <span class="hljs-string">&#x27;click&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;子级捕获&#x27;</span>)</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-literal">true</span></span><br><span class="language-javascript">  )</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>复制代码<br></code></pre></td></tr></table></figure><p>当容器元素及嵌套元素，即在<code>捕获阶段</code>又在<code>冒泡阶段</code>调用事件处理程序时：<strong>事件按 DOM 事件流的顺序</strong>执行事件处理程序：</p><ul><li>父级捕获</li><li>子级冒泡</li><li>子级捕获</li><li>父级冒泡</li></ul><p>且当事件处于目标阶段时，事件调用顺序决定于绑定事件的<strong>书写顺序</strong>，按上面的例子为，先调用冒泡阶段的事件处理程序，再调用捕获阶段的事件处理程序。依次 alert 出“子集冒泡”，“子集捕获”。</p><h3 id="IE-兼容"><a href="#IE-兼容" class="headerlink" title="IE 兼容"></a>IE 兼容</h3><ul><li>attchEvent(‘on’ + type, handler)</li><li>detachEvent(‘on’ + type, handler)</li></ul><h3 id="参考链接-2"><a href="#参考链接-2" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://juejin.im/entry/5826ba9d0ce4630056f85e07">juejin.im/entry/5826b…</a></li></ul><h2 id="问：事件是如何实现的？"><a href="#问：事件是如何实现的？" class="headerlink" title="问：事件是如何实现的？"></a>问：事件是如何实现的？</h2><p>基于发布订阅模式，就是在浏览器加载的时候会读取事件相关的代码，但是只有实际等到具体的事件触发的时候才会执行。</p><p>比如点击按钮，这是个事件（Event），而负责处理事件的代码段通常被称为事件处理程序（Event Handler），也就是「启动对话框的显示」这个动作。</p><p>在 Web 端，我们常见的就是 DOM 事件：</p><ul><li>DOM0 级事件，直接在 html 元素上绑定 on-event，比如 onclick，取消的话，dom.onclick = null，同一个事件只能有一个处理程序，后面的会覆盖前面的。</li><li>DOM2 级事件，通过 addEventListener 注册事件，通过 removeEventListener 来删除事件，一个事件可以有多个事件处理程序，按顺序执行，捕获事件和冒泡事件</li><li>DOM3 级事件，增加了事件类型，比如 UI 事件，焦点事件，鼠标事件</li></ul><h3 id="参考链接-3"><a href="#参考链接-3" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/73091706">zhuanlan.zhihu.com/p/73091706</a></li></ul><h2 id="问：new-一个函数发生了什么"><a href="#问：new-一个函数发生了什么" class="headerlink" title="问：new 一个函数发生了什么"></a>问：new 一个函数发生了什么</h2><p>构造调用：</p><ul><li>创造一个全新的对象</li><li>这个对象会被执行 [[Prototype]] 连接，将这个新对象的 [[Prototype]] 链接到这个构造函数.prototype 所指向的对象</li><li>这个新对象会绑定到函数调用的 this</li><li>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象</li></ul><h2 id="问：new-一个构造函数，如果函数返回-return-、-return-null-，-return-1-，-return-true-会发生什么情况？"><a href="#问：new-一个构造函数，如果函数返回-return-、-return-null-，-return-1-，-return-true-会发生什么情况？" class="headerlink" title="问：new 一个构造函数，如果函数返回 return {} 、 return null ， return 1 ， return true 会发生什么情况？"></a>问：new 一个构造函数，如果函数返回 <code>return &#123;&#125;</code> 、 <code>return null</code> ， <code>return 1</code> ， <code>return true</code> 会发生什么情况？</h2><p>如果函数返回一个对象，那么 new 这个函数调用返回这个函数的返回对象，否则返回 new 创建的新对象</p><h2 id="问：symbol-有什么用处"><a href="#问：symbol-有什么用处" class="headerlink" title="问：symbol 有什么用处"></a>问：<code>symbol</code> 有什么用处</h2><p>可以用来表示一个独一无二的变量防止命名冲突。但是面试官问还有吗？我没想出其他的用处就直接答我不知道了，还可以利用 <code>symbol</code> 不会被常规的方法（除了 <code>Object.getOwnPropertySymbols</code> 外）遍历到，所以可以用来模拟私有变量。</p><p>主要用来提供遍历接口，布置了 <code>symbol.iterator</code> 的对象才可以使用 <code>for···of</code> 循环，可以统一处理数据结构。调用之后回返回一个遍历器对象，包含有一个 next 方法，使用 next 方法后有两个返回值 value 和 done 分别表示函数当前执行位置的值和是否遍历完毕。</p><p>Symbol.for() 可以在全局访问 symbol</p><h2 id="（3）问：闭包是什么？"><a href="#（3）问：闭包是什么？" class="headerlink" title="（3）问：闭包是什么？"></a>（3）问：闭包是什么？</h2><p>闭包是指有权访问另外一个函数作用域中的变量的函数</p><p>JavaScript 代码的整个执行过程，分为两个阶段，代码编译阶段与代码执行阶段。编译阶段由编译器完成，将代码翻译成可执行代码，这个阶段作用域规则会确定。执行阶段由引擎完成，主要任务是执行可执行代码，执行上下文在这个阶段创建。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c508a8bbade94a699d0baad47e5d43ed~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="什么是作用域？"><a href="#什么是作用域？" class="headerlink" title="什么是作用域？"></a>什么是作用域？</h3><p>ES5 中只存在两种作用域：全局作用域和函数作用域。在 JavaScript 中，我们将作用域定义为一套规则，这套规则用来管理引擎如何在当前作用域以及嵌套子作用域中根据标识符名称进行变量（变量名或者函数名）查找</p><h3 id="什么是作用域链？"><a href="#什么是作用域链？" class="headerlink" title="什么是作用域链？"></a>什么是作用域链？</h3><p>首先要了解作用域链，当访问一个变量时，编译器在执行这段代码时，会首先从当前的作用域中查找是否有这个标识符，如果没有找到，就会去父作用域查找，如果父作用域还没找到继续向上查找，直到全局作用域为止,，而作用域链，就是有当前作用域与上层作用域的一系列变量对象组成，它保证了当前执行的作用域对符合访问权限的变量和函数的有序访问。</p><h3 id="闭包产生的本质"><a href="#闭包产生的本质" class="headerlink" title="闭包产生的本质"></a>闭包产生的本质</h3><p>当前环境中存在指向父级作用域的引用</p><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>闭包是一种特殊的对象，它由两部分组成：执行上下文（代号 A），以及在该执行上下文中创建的函数 （代号 B），当 B 执行时，如果访问了 A 中变量对象的值，那么闭包就会产生，且在 Chrome 中使用这个执行上下文 A 的函数名代指闭包。</p><h3 id="一般如何产生闭包"><a href="#一般如何产生闭包" class="headerlink" title="一般如何产生闭包"></a>一般如何产生闭包</h3><ul><li>返回函数</li><li>函数当做参数传递</li></ul><h3 id="闭包的应用场景"><a href="#闭包的应用场景" class="headerlink" title="闭包的应用场景"></a>闭包的应用场景</h3><ul><li>柯里化 bind</li><li>模块</li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://segmentfault.com/a/1190000012646221">segmentfault.com/a/119000001…</a></li></ul><h2 id="问：NaN-是什么，用-typeof-会输出什么？"><a href="#问：NaN-是什么，用-typeof-会输出什么？" class="headerlink" title="问：NaN 是什么，用 typeof 会输出什么？"></a>问：NaN 是什么，用 typeof 会输出什么？</h2><p>Not a Number，表示非数字，typeof NaN === ‘number’</p><h2 id="（2）问：JS-隐式转换，显示转换"><a href="#（2）问：JS-隐式转换，显示转换" class="headerlink" title="（2）问：JS 隐式转换，显示转换"></a>（2）问：JS 隐式转换，显示转换</h2><p>一般非基础类型进行转换时会先调用 valueOf，如果 valueOf 无法返回基本类型值，就会调用 toString</p><h3 id="字符串和数字"><a href="#字符串和数字" class="headerlink" title="字符串和数字"></a>字符串和数字</h3><ul><li>“+” 操作符，如果有一个为字符串，那么都转化到字符串然后执行字符串拼接</li><li>“-“ 操作符，转换为数字，相减 (-a, a * 1 a/1) 都能进行隐式强制类型转换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[] + &#123;&#125; 和 &#123;&#125; + []<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="布尔值到数字"><a href="#布尔值到数字" class="headerlink" title="布尔值到数字"></a>布尔值到数字</h3><ul><li>1 + true = 2</li><li>1 + false = 1</li></ul><h3 id="转换为布尔值"><a href="#转换为布尔值" class="headerlink" title="转换为布尔值"></a>转换为布尔值</h3><ul><li>for 中第二个</li><li>while</li><li>if</li><li>三元表达式</li><li>|| （逻辑或） &amp;&amp; （逻辑与）左边的操作数</li></ul><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><ul><li>不能被转换为数字</li><li>能被转换为布尔值（都是 true）</li><li>可以被转换成字符串 “Symbol(cool)”</li></ul><h3 id="宽松相等和严格相等"><a href="#宽松相等和严格相等" class="headerlink" title="宽松相等和严格相等"></a>宽松相等和严格相等</h3><p>宽松相等允许进行强制类型转换，而严格相等不允许</p><h4 id="字符串与数字"><a href="#字符串与数字" class="headerlink" title="字符串与数字"></a>字符串与数字</h4><p>转换为数字然后比较</p><h4 id="其他类型与布尔类型"><a href="#其他类型与布尔类型" class="headerlink" title="其他类型与布尔类型"></a>其他类型与布尔类型</h4><ul><li>先把布尔类型转换为数字，然后继续进行比较</li></ul><h4 id="对象与非对象"><a href="#对象与非对象" class="headerlink" title="对象与非对象"></a>对象与非对象</h4><ul><li>执行对象的 ToPrimitive(对象）然后继续进行比较</li></ul><h4 id="假值列表"><a href="#假值列表" class="headerlink" title="假值列表"></a>假值列表</h4><ul><li>undefined</li><li>null</li><li>false</li><li>+0, -0, NaN</li><li>“”</li></ul><h2 id="（2）问：了解-this-嘛，bind，call，apply-具体指什么"><a href="#（2）问：了解-this-嘛，bind，call，apply-具体指什么" class="headerlink" title="（2）问：了解 this 嘛，bind，call，apply 具体指什么"></a>（2）问：了解 this 嘛，bind，call，apply 具体指什么</h2><p>它们都是函数的方法</p><p><code>call: Array.prototype.call(this, args1, args2])</code> <code>apply: Array.prototype.apply(this, [args1, args2])</code> ：ES6 之前用来展开数组调用, <code>foo.appy(null, [])</code>，ES6 之后使用 … 操作符</p><ul><li>New 绑定 &gt; 显示绑定 &gt; 隐式绑定 &gt; 默认绑定</li><li>如果需要使用 bind 的柯里化和 apply 的数组解构，绑定到 null，尽可能使用 Object.create(null) 创建一个 DMZ 对象</li></ul><p>四条规则：</p><ul><li>默认绑定，没有其他修饰（bind、apply、call)，在非严格模式下定义指向全局对象，在严格模式下定义指向 undefined</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span><br><span class="hljs-title function_">foo</span>()<br>复制代码<br></code></pre></td></tr></table></figure><ul><li>隐式绑定：调用位置是否有上下文对象，或者是否被某个对象拥有或者包含，那么隐式绑定规则会把函数调用中的 this 绑定到这个上下文对象。而且，对象属性链只有上一层或者说最后一层在调用位置中起作用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">foo</span>: foo,<br>&#125;<br><br>obj.<span class="hljs-title function_">foo</span>() <span class="hljs-comment">// 2</span><br>复制代码<br></code></pre></td></tr></table></figure><ul><li>显示绑定：通过在函数上运行 call 和 apply ，来显示的绑定 this</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>,<br>&#125;<br><br>foo.<span class="hljs-title function_">call</span>(obj)<br>复制代码<br></code></pre></td></tr></table></figure><p>显示绑定之硬绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">something</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>, something)<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> + something<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bind</span>(<span class="hljs-params">fn, obj</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>(obj, <span class="hljs-variable language_">arguments</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>,<br>&#125;<br><br><span class="hljs-keyword">var</span> bar = <span class="hljs-title function_">bind</span>(foo, obj)<br>复制代码<br></code></pre></td></tr></table></figure><p>New 绑定，new 调用函数会创建一个全新的对象，并将这个对象绑定到函数调用的 this。</p><ul><li>New 绑定时，如果是 new 一个硬绑定函数，那么会用 new 新建的对象替换这个硬绑定 this，</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = a<br>&#125;<br><br><span class="hljs-keyword">var</span> bar = <span class="hljs-keyword">new</span> <span class="hljs-title function_">foo</span>(<span class="hljs-number">2</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar.<span class="hljs-property">a</span>)<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="（4）问：手写-bind、apply、call"><a href="#（4）问：手写-bind、apply、call" class="headerlink" title="（4）问：手写 bind、apply、call"></a>（4）问：手写 bind、apply、call</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// call</span><br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">call</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context, ...args</span>) &#123;<br>  context = context || <span class="hljs-variable language_">window</span><br><br>  <span class="hljs-keyword">const</span> fnSymbol = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;fn&#x27;</span>)<br>  context[fnSymbol] = <span class="hljs-variable language_">this</span><br><br>  context[fnSymbol](...args)<br>  <span class="hljs-keyword">delete</span> context[fnSymbol]<br>&#125;<br>复制代码<br><span class="hljs-comment">// apply</span><br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">apply</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context, argsArr</span>) &#123;<br>  context = context || <span class="hljs-variable language_">window</span><br><br>  <span class="hljs-keyword">const</span> fnSymbol = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;fn&#x27;</span>)<br>  context[fnSymbol] = <span class="hljs-variable language_">this</span><br><br>  context[fnSymbol](...argsArr)<br>  <span class="hljs-keyword">delete</span> context[fnSymbol]<br>&#125;<br>复制代码<br><span class="hljs-comment">// bind</span><br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">bind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context, ...args</span>) &#123;<br>  context = context || <span class="hljs-variable language_">window</span><br>  <span class="hljs-keyword">const</span> fnSymbol = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;fn&#x27;</span>)<br>  context[fnSymbol] = <span class="hljs-variable language_">this</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">..._args</span>) &#123;<br>    args = args.<span class="hljs-title function_">concat</span>(_args)<br><br>    context[fnSymbol](...args)<br>    <span class="hljs-keyword">delete</span> context[fnSymbol]<br>  &#125;<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><h2 id="（3）问：setTimeout-fn-0-多久才执行，Event-Loop"><a href="#（3）问：setTimeout-fn-0-多久才执行，Event-Loop" class="headerlink" title="（3）问：setTimeout(fn, 0)多久才执行，Event Loop"></a>（3）问：<code>setTimeout(fn, 0)</code>多久才执行，Event Loop</h2><p>setTimeout 按照顺序放到队列里面，然后等待函数调用栈清空之后才开始执行，而这些操作进入队列的顺序，则由设定的延迟时间来决定</p><h2 id="手写题：Promise-原理"><a href="#手写题：Promise-原理" class="headerlink" title="手写题：Promise 原理"></a>手写题：Promise 原理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPromise</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolvedCallbacks</span> = []<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">rejectedCallbacks</span> = []<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&#x27;PENDING&#x27;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-title function_">fn</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">resolve</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-variable language_">this</span>.<span class="hljs-property">reject</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>))<br>  &#125;<br><br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === <span class="hljs-string">&#x27;PENDING&#x27;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&#x27;RESOLVED&#x27;</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value<br><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolvedCallbacks</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">cb</span> =&gt;</span> <span class="hljs-title function_">cb</span>(value))<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">reject</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === <span class="hljs-string">&#x27;PENDING&#x27;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&#x27;REJECTED&#x27;</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value<br><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">rejectedCallbacks</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">cb</span> =&gt;</span> <span class="hljs-title function_">cb</span>(value))<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">then</span>(<span class="hljs-params">onFulfilled, onRejected</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === <span class="hljs-string">&#x27;PENDING&#x27;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolvedCallbacks</span>.<span class="hljs-title function_">push</span>(onFulfilled)<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">rejectedCallbacks</span>.<span class="hljs-title function_">push</span>(onRejected)<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === <span class="hljs-string">&#x27;RESOLVED&#x27;</span>) &#123;<br>      <span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === <span class="hljs-string">&#x27;REJECTED&#x27;</span>) &#123;<br>      <span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br>复制代码<br></code></pre></td></tr></table></figure><h2 id="问：js-脚本加载问题，async、defer-问题"><a href="#问：js-脚本加载问题，async、defer-问题" class="headerlink" title="问：js 脚本加载问题，async、defer 问题"></a>问：js 脚本加载问题，async、defer 问题</h2><ul><li>如果依赖其他脚本和 DOM 结果，使用 defer</li><li>如果与 DOM 和其他脚本依赖不强时，使用 async</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://mp.weixin.qq.com/s/pw5lfFeNagmjFj45ygl2dQ">mp.weixin.qq.com/s/pw5lfFeNa…</a></li></ul><h2 id="问：如何判断一个对象是不是空对象？"><a href="#问：如何判断一个对象是不是空对象？" class="headerlink" title="问：如何判断一个对象是不是空对象？"></a>问：如何判断一个对象是不是空对象？</h2><p>Object.keys(obj).length === 0</p><p>手写题：在线编程，getUrlParams(url,key); 就是很简单的获取 url 的某个参数的问题，但要考虑边界情况，多个返回值等等</p><h2 id="问：-lt-script-src-’xxx’-’xxx’-gt-外部-js-文件先加载还是-onload-先执行，为什么？"><a href="#问：-lt-script-src-’xxx’-’xxx’-gt-外部-js-文件先加载还是-onload-先执行，为什么？" class="headerlink" title="问： &lt;script src=’xxx’ ’xxx’/&gt;外部 js 文件先加载还是 onload 先执行，为什么？"></a>问： &lt;script src=’xxx’ ’xxx’/&gt;外部 js 文件先加载还是 onload 先执行，为什么？</h2><p>onload 是所以加载完成之后执行的</p><h2 id="问：怎么加事件监听，两种"><a href="#问：怎么加事件监听，两种" class="headerlink" title="问：怎么加事件监听，两种"></a>问：怎么加事件监听，两种</h2><p>onclick 和 addEventListener</p><h2 id="问：事件传播机制（事件流）"><a href="#问：事件传播机制（事件流）" class="headerlink" title="问：事件传播机制（事件流）"></a>问：事件传播机制（事件流）</h2><p>冒泡和捕获</p><h2 id="（4）问：说一下原型链和原型链的继承吧"><a href="#（4）问：说一下原型链和原型链的继承吧" class="headerlink" title="（4）问：说一下原型链和原型链的继承吧"></a>（4）问：说一下原型链和原型链的继承吧</h2><ul><li>所有普通的 [[Prototype]] 链最终都会指向内置的 Object.prototype，其包含了 JavaScript 中许多通用的功能</li><li>为什么能创建 “类”，借助一种特殊的属性：所有的函数默认都会拥有一个名为 prototype 的共有且不可枚举的属性，它会指向另外一个对象，这个对象通常被称为函数的原型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Person</span><br>复制代码<br></code></pre></td></tr></table></figure><ul><li>在发生 new 构造函数调用时，会将创建的新对象的 [[Prototype]] 链接到 Person.prototype 指向的对象，这个机制就被称为原型链继承</li><li>方法定义在原型上，属性定义在构造函数上</li><li>首先要说一下 JS 原型和实例的关系：每个构造函数 （constructor）都有一个原型对象（prototype），这个原型对象包含一个指向此构造函数的指针属性，通过 new 进行构造函数调用生成的实例，此实例包含一个指向原型对象的指针，也就是通过 [[Prototype]] 链接到了这个原型对象</li><li>然后说一下 JS 中属性的查找：当我们试图引用实例对象的某个属性时，是按照这样的方式去查找的，首先查找实例对象上是否有这个属性，如果没有找到，就去构造这个实例对象的构造函数的 prototype 所指向的对象上去查找，如果还找不到，就从这个 prototype 对象所指向的构造函数的 prototype 原型对象上去查找</li><li>什么是原型链：这样逐级查找形似一个链条，且通过 [[Prototype]] 属性链接，所以被称为原型链</li><li>什么是原型链继承，类比类的继承：当有两个构造函数 A 和 B，将一个构造函数 A 的原型对象的，通过其 [[Prototype]] 属性链接到另外一个 B 构造函数的原型对象时，这个过程被称之为原型继承。</li></ul><h3 id="标准答案更正确的解释"><a href="#标准答案更正确的解释" class="headerlink" title="标准答案更正确的解释"></a>标准答案更正确的解释</h3><p><strong>什么是原型链？</strong></p><p>当对象查找一个属性的时候，如果没有在自身找到，那么就会查找自身的原型，如果原型还没有找到，那么会继续查找原型的原型，直到找到 Object.prototype 的原型时，此时原型为 null，查找停止。 这种通过 通过原型链接的逐级向上的查找链被称为原型链</p><p><strong>什么是原型继承？</strong></p><p>一个对象可以使用另外一个对象的属性或者方法，就称之为继承。具体是通过将这个对象的原型设置为另外一个对象，这样根据原型链的规则，如果查找一个对象属性且在自身不存在时，就会查找另外一个对象，相当于一个对象可以使用另外一个对象的属性和方法了。</p><h3 id="参考链接-4"><a href="#参考链接-4" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/35790971">zhuanlan.zhihu.com/p/35790971</a></li></ul><h2 id="问：说下对-JS-的了解吧"><a href="#问：说下对-JS-的了解吧" class="headerlink" title="问：说下对 JS 的了解吧"></a>问：说下对 JS 的了解吧</h2><p>是基于原型的动态语言，主要独特特性有 this、原型和原型链。</p><p>JS 严格意义上来说分为：语言标准部分（ECMAScript）+ 宿主环境部分</p><h3 id="语言标准部分"><a href="#语言标准部分" class="headerlink" title="语言标准部分"></a>语言标准部分</h3><p>2015 年发布 ES6，引入诸多新特性使得能够编写大型项目变成可能，标准自 2015 之后以年号代号，每年一更</p><h3 id="宿主环境部分"><a href="#宿主环境部分" class="headerlink" title="宿主环境部分"></a>宿主环境部分</h3><ul><li>在浏览器宿主环境包括 DOM + BOM 等</li><li>在 Node，宿主环境包括一些文件、数据库、网络、与操作系统的交互等</li></ul><h2 id="问：数组能够调用的函数有那些？"><a href="#问：数组能够调用的函数有那些？" class="headerlink" title="问：数组能够调用的函数有那些？"></a>问：数组能够调用的函数有那些？</h2><ul><li>push</li><li>pop</li><li>splice</li><li>slice</li><li>shift</li><li>unshift</li><li>sort</li><li>find</li><li>findIndex</li><li>map/filter/reduce 等函数式编程方法</li><li>还有一些原型链上的方法：toString/valudOf</li></ul><h2 id="问：如何判断数组类型"><a href="#问：如何判断数组类型" class="headerlink" title="问：如何判断数组类型"></a>问：如何判断数组类型</h2><p>Array.isArray</p><h2 id="问：-函数中的-arguments-是数组吗？类数组转数组的方法了解一下？"><a href="#问：-函数中的-arguments-是数组吗？类数组转数组的方法了解一下？" class="headerlink" title="问： 函数中的 arguments 是数组吗？类数组转数组的方法了解一下？"></a>问： 函数中的 arguments 是数组吗？类数组转数组的方法了解一下？</h2><p>是类数组，是属于鸭子类型的范畴，长得像数组，</p><ul><li>… 运算符</li><li>Array.from</li><li>Array.prototype.slice.apply(arguments)</li></ul><h2 id="问：用过-TypeScript-吗？它的作用是什么？"><a href="#问：用过-TypeScript-吗？它的作用是什么？" class="headerlink" title="问：用过 TypeScript 吗？它的作用是什么？"></a>问：用过 TypeScript 吗？它的作用是什么？</h2><p>为 JS 添加类型支持，以及提供最新版的 ES 语法的支持，是的利于团队协作和排错，开发大型项目</p><h2 id="问：PWA-使用过吗？serviceWorker-的使用原理是啥？"><a href="#问：PWA-使用过吗？serviceWorker-的使用原理是啥？" class="headerlink" title="问：PWA 使用过吗？serviceWorker 的使用原理是啥？"></a>问：PWA 使用过吗？serviceWorker 的使用原理是啥？</h2><p><code>渐进式网络应用（PWA）</code>是谷歌在 2015 年底提出的概念。基本上算是 web 应用程序，但在外观和感觉上与<code>原生app</code>类似。支持<code>PWA</code>的网站可以提供脱机工作、推送通知和设备硬件访问等功能。</p><p><code>Service Worker</code>是浏览器在后台独立于网页运行的脚本，它打开了通向不需要网页或用户交互的功能的大门。 现在，它们已包括如推送通知和后台同步等功能。 将来，<code>Service Worker</code>将会支持如定期同步或地理围栏等其他功能。 本教程讨论的核心功能是拦截和处理网络请求，包括通过程序来管理缓存中的响应。</p><h3 id="参考链接-5"><a href="#参考链接-5" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://juejin.im/post/5e26aa785188254c257c462d#heading-8">juejin.im/post/5e26aa…</a></li></ul><h2 id="问：ES6-之前使用-prototype-实现继承"><a href="#问：ES6-之前使用-prototype-实现继承" class="headerlink" title="问：ES6 之前使用 prototype 实现继承"></a>问：ES6 之前使用 prototype 实现继承</h2><p>Object.create() 会创建一个 “新” 对象，然后将此对象内部的 [[Prototype]] 关联到你指定的对象（Foo.prototype）。Object.create(null) 创建一个空 [[Prototype]] 链接的对象，这个对象无法进行委托。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>&#125;<br><br><span class="hljs-comment">// 继承属性，通过借用构造函数调用</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Bar</span>(<span class="hljs-params">name, label</span>) &#123;<br>  <span class="hljs-title class_">Foo</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">label</span> = label<br>&#125;<br><br><span class="hljs-comment">// 继承方法，创建备份</span><br><span class="hljs-title class_">Bar</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br><br><span class="hljs-comment">// 必须设置回正确的构造函数，要不然在会发生判断类型出错</span><br><span class="hljs-title class_">Bar</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Bar</span><br><br><span class="hljs-comment">// 必须在上一步之后</span><br><span class="hljs-title class_">Bar</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myLabel</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">label</span><br>&#125;<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bar</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;obj a&#x27;</span>)<br><br>a.<span class="hljs-title function_">myName</span>() <span class="hljs-comment">// &quot;a&quot;</span><br>a.<span class="hljs-title function_">myLabel</span>() <span class="hljs-comment">// &quot;obj a&quot;</span><br>复制代码<br></code></pre></td></tr></table></figure><h2 id="问-如果一个构造函数，bind-了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？"><a href="#问-如果一个构造函数，bind-了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？" class="headerlink" title="问:如果一个构造函数，bind 了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？"></a>问:如果一个构造函数，bind 了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？</h2><p>不会继承，因为根据 this 绑定四大规则，new 绑定的优先级高于 bind 显示绑定，通过 new 进行构造函数调用时，会创建一个新对象，这个新对象会代替 bind 的对象绑定，作为此函数的 this，并且在此函数没有返回对象的情况下，返回这个新建的对象</p><h2 id="3-箭头函数和普通函数有啥区别？箭头函数能当构造函数吗？"><a href="#3-箭头函数和普通函数有啥区别？箭头函数能当构造函数吗？" class="headerlink" title="(3)箭头函数和普通函数有啥区别？箭头函数能当构造函数吗？"></a>(3)箭头函数和普通函数有啥区别？箭头函数能当构造函数吗？</h2><ul><li><p>普通函数通过 function 关键字定义， this 无法结合词法作用域使用，在运行时绑定，只取决于函数的调用方式，在哪里被调用，调用位置。（取决于调用者，和是否独立运行）</p></li><li><p>箭头函数使用被称为 “胖箭头” 的操作</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">=&gt;<br></code></pre></td></tr></table></figure><p>定义，箭头函数不应用普通函数 this 绑定的四种规则，而是根据外层（函数或全局）的作用域来决定 this，且箭头函数的绑定无法被修改（new 也不行）。</p><ul><li>箭头函数常用于回调函数中，包括事件处理器或定时器</li><li>箭头函数和 var self = this，都试图取代传统的 this 运行机制，将 this 的绑定拉回到词法作用域</li><li>没有原型、没有 this、没有 super，没有 arguments，没有 new.target</li><li>不能通过 new 关键字调用<ul><li>一个函数内部有两个方法：[[Call]] 和 [[Construct]]，在通过 new 进行函数调用时，会执行 [[construct]] 方法，创建一个实例对象，然后再执行这个函数体，将函数的 this 绑定在这个实例对象上</li><li>当直接调用时，执行 [[Call]] 方法，直接执行函数体</li><li>箭头函数没有 [[Construct]] 方法，不能被用作构造函数调用，当使用 new 进行函数调用时会报错。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>,<br>&#125;<br><br><span class="hljs-keyword">var</span> obj2 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>,<br>&#125;<br><br><span class="hljs-keyword">var</span> bar = foo.<span class="hljs-title function_">call</span>(obj1)<br>bar.<span class="hljs-title function_">call</span>(obj2)<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://segmentfault.com/a/1190000015162781">segmentfault.com/a/119000001…</a></li></ul><h2 id="问：知道-ES6-的-Class-嘛？Static-关键字有了解嘛"><a href="#问：知道-ES6-的-Class-嘛？Static-关键字有了解嘛" class="headerlink" title="问：知道 ES6 的 Class 嘛？Static 关键字有了解嘛"></a>问：知道 ES6 的 Class 嘛？Static 关键字有了解嘛</h2><p>为这个类的函数对象直接添加方法，而不是加在这个函数对象的原型对象上</p><h2 id="（3）问：事件循环机制-（Event-Loop）"><a href="#（3）问：事件循环机制-（Event-Loop）" class="headerlink" title="（3）问：事件循环机制 （Event Loop）"></a>（3）问：事件循环机制 （Event Loop）</h2><p>事件循环机制从整体上告诉了我们 JavaScript 代码的执行顺序 <code>Event Loop</code>即事件循环，是指浏览器或<code>Node</code>的一种解决<code>javaScript</code>单线程运行时不会阻塞的一种机制，也就是我们经常使用<strong>异步</strong>的原理。</p><p>先执行宏任务队列，然后执行微任务队列，然后开始下一轮事件循环，继续先执行宏任务队列，再执行微任务队列。</p><ul><li>宏任务：script/setTimeout/setInterval/setImmediate/ I/O / UI Rendering</li><li>微任务：process.nextTick()/Promise</li></ul><p>上诉的 setTimeout 和 setInterval 等都是任务源，真正进入任务队列的是他们分发的任务。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul><li>setTimeout = setInterval 一个队列</li><li>setTimeout &gt; setImmediate</li><li>process.nextTick &gt; Promise</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> macroTask <span class="hljs-keyword">of</span> macroTaskQueue) &#123;<br>  <span class="hljs-title function_">handleMacroTask</span>()<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> microTask <span class="hljs-keyword">of</span> microTaskQueue) &#123;<br>    <span class="hljs-title function_">handleMicroTask</span>(microTask)<br>  &#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="参考链接-6"><a href="#参考链接-6" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://juejin.im/post/59e85eebf265da430d571f89">juejin.im/post/59e85e…</a></li></ul><h2 id="（2）手写题：数组扁平化"><a href="#（2）手写题：数组扁平化" class="headerlink" title="（2）手写题：数组扁平化"></a>（2）手写题：数组扁平化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">let</span> result = []<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr[i])) &#123;<br>      result = result.<span class="hljs-title function_">concat</span>(<span class="hljs-title function_">flatten</span>(arr[i]))<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      result = result.<span class="hljs-title function_">concat</span>(arr[i])<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">flatten</span>(a))<br><br>复制代码<br></code></pre></td></tr></table></figure><h2 id="手写题：实现柯里化"><a href="#手写题：实现柯里化" class="headerlink" title="手写题：实现柯里化"></a>手写题：实现柯里化</h2><p>预先设置一些参数</p><p>柯里化是什么：是指这样一个函数，它接收函数 A，并且能返回一个新的函数，这个新的函数能够处理函数 A 的剩余参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createCurry</span>(<span class="hljs-params">func, args</span>) &#123;<br>  <span class="hljs-keyword">var</span> argity = func.<span class="hljs-property">length</span><br>  <span class="hljs-keyword">var</span> args = args || []<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> _args = [].<span class="hljs-property">slice</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">arguments</span>)<br>    args.<span class="hljs-title function_">push</span>(..._args)<br><br>    <span class="hljs-keyword">if</span> (args.<span class="hljs-property">length</span> &lt; argity) &#123;<br>      <span class="hljs-keyword">return</span> createCurry.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, func, args)<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> func.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>  &#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="手写题：数组去重"><a href="#手写题：数组去重" class="headerlink" title="手写题：数组去重"></a>手写题：数组去重</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>]))<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="问：let-闭包"><a href="#问：let-闭包" class="headerlink" title="问：let 闭包"></a>问：let 闭包</h2><p>let 会产生临时性死区，在当前的执行上下文中，会进行变量提升，但是未被初始化，所以在执行上下文执行阶段，执行代码如果还没有执行到变量赋值，就引用此变量就会报错，此变量未初始化。</p><h2 id="问：变量提升"><a href="#问：变量提升" class="headerlink" title="问：变量提升"></a>问：变量提升</h2><p>函数在运行的时候，会首先创建执行上下文，然后将执行上下文入栈，然后当此执行上下文处于栈顶时，开始运行执行上下文。</p><p>在创建执行上下文的过程中会做三件事：创建变量对象，创建作用域链，确定 this 指向，其中创建变量对象的过程中，首先会为 arguments 创建一个属性，值为 arguments，然后会扫码 function 函数声明，创建一个同名属性，值为函数的引用，接着会扫码 var 变量声明，创建一个同名属性，值为 undefined，这就是变量提升 *<strong>*问：</strong>如何看待 PWA App、原生 App 以及 Flutter 和 React Native 这种前端驱动的开发模式？</p><h2 id="instance-如何使用"><a href="#instance-如何使用" class="headerlink" title="instance 如何使用"></a>instance 如何使用</h2><p>左边可以是任意值，右边只能是函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;hello tuture&#x27;</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span> <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h2 id="参考资料-2"><a href="#参考资料-2" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://juejin.im/post/5d79ccf85188254bf34fd9d1">juejin.im/post/5d79cc…</a></li><li><a href="https://mp.weixin.qq.com/s/pw5lfFeNagmjFj45ygl2dQ">mp.weixin.qq.com/s/pw5lfFeNa…</a></li><li><a href="https://mp.weixin.qq.com/s/bHclDpsGdfaZQT8u9VRAAw">mp.weixin.qq.com/s/bHclDpsGd…</a></li><li><a href="https://www.jianshu.com/p/cd3fee40ef59">www.jianshu.com/p/cd3fee40e…</a></li></ul><p><a href="https://juejin.cn/post/6934500357091360781">本文转自 https://juejin.cn/post/6934500357091360781</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue解决同一页面跳转页面不更新</title>
    <link href="/blog/2021/01/31/vue/vue_router/"/>
    <url>/blog/2021/01/31/vue/vue_router/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue-解决同一页面跳转页面不更新"><a href="#Vue-解决同一页面跳转页面不更新" class="headerlink" title="Vue 解决同一页面跳转页面不更新"></a>Vue 解决同一页面跳转页面不更新</h2><blockquote><p>问题分析：路由之间的切换，其实就是组件之间的切换，不是真正的页面切换。这也会导致一个问题，就是引用相同组件的时候，会导致该组件无法更新。</p></blockquote><p>两个页面参数不同使用同一组件，默认情况下当这两个页面切换时并不会触发<code>created</code>或者<code>mounted</code>钩子。</p><h3 id="方法一：通过-watch-route-的变化来做处理"><a href="#方法一：通过-watch-route-的变化来做处理" class="headerlink" title="方法一：通过 watch $route 的变化来做处理"></a>方法一：通过 watch $route 的变化来做处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">watch</span>: &#123;<br>  $route(to, <span class="hljs-keyword">from</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(to);<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="方法二：在-router-view-上加上一个唯一的-key，来保证路由切换时都会重新渲染触发钩子"><a href="#方法二：在-router-view-上加上一个唯一的-key，来保证路由切换时都会重新渲染触发钩子" class="headerlink" title="方法二：在 router-view 上加上一个唯一的 key，来保证路由切换时都会重新渲染触发钩子"></a>方法二：在 router-view 上加上一个唯一的 key，来保证路由切换时都会重新渲染触发钩子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-title function_">key</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">name</span> !== <span class="hljs-literal">undefined</span>? <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">name</span> + +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(): <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span> + +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><p>跳转当前路由可能遇到如下错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Navigating to current location (XXX) is not allowed&#x27;</span><br></code></pre></td></tr></table></figure><p>此时在<code>src/router/index.js</code>里导入<code>router</code>的后面追加如下方法即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br>...<br><br><span class="hljs-comment">// fix Navigating to current location</span><br><span class="hljs-keyword">const</span> originalPush = <span class="hljs-title class_">VueRouter</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span><br><span class="hljs-title class_">VueRouter</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">location</span>) &#123;<br>  <span class="hljs-keyword">return</span> originalPush.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, location).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> err)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vurRouter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nest.js学习（二）</title>
    <link href="/blog/2021/01/29/node/nest_2/"/>
    <url>/blog/2021/01/29/node/nest_2/</url>
    
    <content type="html"><![CDATA[<p>这篇主要内容：</p><ul><li>项目架构规划</li><li>入口文件配置说明</li><li>依赖安装</li><li>配置模板引擎和静态文件</li><li>静态模板</li><li>系统配置和应用配置</li><li>数据库之用户表</li><li>注册</li><li>使用 node-mailer 发送邮件</li><li>登录和第三方认证 github 登录</li><li>session 和 cookie</li><li>找回密码和登出</li></ul><h2 id="项目架构规划设计"><a href="#项目架构规划设计" class="headerlink" title="项目架构规划设计"></a>项目架构规划设计</h2><p>一个好的文件结构约定，会让我们开发合作、维护管理，节省很多不必要沟通。</p><p>这里我<code>src</code>文件规划：</p><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td>main.ts</td><td>入口</td></tr><tr><td>main.hmr.ts</td><td>热更新入口</td></tr><tr><td>app.service.ts</td><td>APP 服务（选择）</td></tr><tr><td>app.module.ts</td><td>APP 模块（根模块，必须）</td></tr><tr><td>app.controller.ts</td><td>APP 控制器（选择）</td></tr><tr><td>app.controller.spec.ts</td><td>APP 控制器单元测试用例（选择）</td></tr><tr><td>config</td><td>配置模块</td></tr><tr><td>core</td><td>核心模块（申明过滤器、管道、拦截器、守卫、中间件、全局模块）</td></tr><tr><td>feature</td><td>特性模块（主要业务模块）</td></tr><tr><td>shared</td><td>共享模块（共享 mongodb、redis 封装服务、通用服务）</td></tr><tr><td>tools</td><td>工具（提供一些小工具函数）</td></tr></tbody></table><blockquote><p>这是我参考我<code>Angular</code>项目的结构，写了几个<code>nest</code>项目后发现这个很不错。把<code>mongodb</code>服务和业务模块分开，还有一个好处就是减少<code>nest</code>循环依赖注入深坑，后面会讲怎么解决它。</p></blockquote><h2 id="入口文件配置说明"><a href="#入口文件配置说明" class="headerlink" title="入口文件配置说明"></a>入口文件配置说明</h2><p>打开<code>main.ts</code>文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NestFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/core&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.module&#x27;</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>)<br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>)<br>&#125;<br><span class="hljs-title function_">bootstrap</span>()<br></code></pre></td></tr></table></figure><p><code>NestFactory</code> 创建一个 app 实例，监听<code>3000</code>端口。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates an instance of the NestApplication</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Promise</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title function_">create</span>(<span class="hljs-attr">module</span>: <span class="hljs-built_in">any</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">INestApplication</span> &amp; <span class="hljs-title class_">INestExpressApplication</span>&gt;;<br><span class="hljs-title function_">create</span>(<span class="hljs-attr">module</span>: <span class="hljs-built_in">any</span>, <span class="hljs-attr">options</span>: <span class="hljs-title class_">NestApplicationOptions</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">INestApplication</span> &amp; <span class="hljs-title class_">INestExpressApplication</span>&gt;;<br><span class="hljs-title function_">create</span>(<span class="hljs-attr">module</span>: <span class="hljs-built_in">any</span>, <span class="hljs-attr">httpServer</span>: <span class="hljs-title class_">FastifyAdapter</span>, options?: <span class="hljs-title class_">NestApplicationOptions</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">INestApplication</span> &amp; <span class="hljs-title class_">INestFastifyApplication</span>&gt;;<br><span class="hljs-title function_">create</span>(<span class="hljs-attr">module</span>: <span class="hljs-built_in">any</span>, <span class="hljs-attr">httpServer</span>: <span class="hljs-title class_">HttpServer</span>, options?: <span class="hljs-title class_">NestApplicationOptions</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">INestApplication</span> &amp; <span class="hljs-title class_">INestExpressApplication</span>&gt;;<br><span class="hljs-title function_">create</span>(<span class="hljs-attr">module</span>: <span class="hljs-built_in">any</span>, <span class="hljs-attr">httpServer</span>: <span class="hljs-built_in">any</span>, options?: <span class="hljs-title class_">NestApplicationOptions</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">INestApplication</span> &amp; <span class="hljs-title class_">INestExpressApplication</span>&gt;;<br></code></pre></td></tr></table></figure><p><code>create</code>方法有 1-3 参数，第一个是入口模块<code>AppModule</code>, 第二个是一个<code>httpServer</code>,如果要绑定<code>Express</code>中间件，需要传递<code>Express</code>实例。第三个全局配置：</p><ul><li>logger 打印日志</li><li>cors 跨域配置</li><li>bodyParser post 和 put 解析 body 中间件配置</li><li>httpsOptions https 配置</li></ul><p><code>app</code> 带方法有哪些<br><code>INestApplication</code>下</p><ul><li>init 初始化应用程序，直接调用此方法并非强制。（效果不明）</li><li>use 注册中间件</li><li>enableCors 启用 CORS（跨源资源共享）</li><li>listen 启动应用程序。</li><li>listenAsync 同步启动应用程序。</li><li>setGlobalPrefix 注册每个 HTTP 路由路径的前缀</li><li>useWebSocketAdapter 安装将在网关内部使用的 Ws 适配器。使用时覆盖，默认<code>socket.io</code>库。</li><li>connectMicroservice 将微服务连接到 NestApplication 实例。 将应用程序转换为混合实例。</li><li>getMicroservices 返回连接到 NestApplication 的微服务的数组。</li><li>getHttpServer 返回基础的本地 HTTP 服务器。</li><li>startAllMicroservices 异步启动所有连接的微服务</li><li>startAllMicroservicesAsync 同步启动所有连接的微服务</li><li>useGlobalFilters 将异常过滤器注册为全局过滤器（将在每个 HTTP 路由处理程序中使用）</li><li>useGlobalPipes 将管道注册为全局管道（将在每个 HTTP 路由处理程序中使用）</li><li>useGlobalInterceptors 将拦截器注册为全局拦截器（将在每个 HTTP 路由处理器中使用）</li><li>useGlobalGuards 注册警卫作为全局警卫（将在每个 HTTP 路由处理程序中使用）</li><li>close 终止应用程序（包括 NestApplication，网关和每个连接的微服务）<br><code>INestExpressApplication</code>下</li><li>set 围绕本地<code>express.set()</code>方法的包装函数。</li><li>engine 围绕本地<code>express.engine()</code>方法的包装函数。</li><li>enable 围绕本地<code>express.enable()</code>方法的包装函数。</li><li>disable 围绕本地<code>express.disable()</code>方法的包装函数。</li><li>useStaticAssets 为静态资源设置基础目录。围绕本地<code>express.static(path, options)</code>方法的包装函数。</li><li>setBaseViewsDir 设置模板（视图）的基本目录。围绕本地<code>express.set(&#39;views&#39;, path)</code>方法的包装函数。</li><li>setViewEngine 为模板（视图）设置视图引擎。围绕本地<code>express.set(&#39;view engine&#39;, engine)</code>方法的包装函数。</li></ul><h2 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h2><h3 id="核心依赖"><a href="#核心依赖" class="headerlink" title="核心依赖"></a>核心依赖</h3><p>因为目前 CNode 采用<code>Egg</code>编写，里面大量使用与<code>Egg</code>集成的<code>egg-xxx</code>包，这里我把相关的连对应的依赖都一一来出来。</p><h4 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h4><p><code>Egg-CNode</code>使用<code>egg-view-ejs</code>，本项目使用<code>ejs</code>包，唯一缺点没有<code>layout</code>功能，可以麻烦点，在每个文件引入头和尾即可，也有另外一个包<code>ejs-mate</code>，它有<code>layout</code>功能，后面会介绍它怎么使用。</p><h4 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Egg-CNode`使用`egg-redis`操作`redis`，其实它是包装的`ioredis`包，我也一直在nodejs里使用这个包，需要安装生产`ioredis`和开发`@types/ioredis<br></code></pre></td></tr></table></figure><h4 id="mongoose"><a href="#mongoose" class="headerlink" title="mongoose"></a>mongoose</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Egg-CNode`使用`egg-mongoose`操作`mongodb`，`Nest`提供了`@nestjs/mongoose`，需要安装生产`mongoose`和开发`@types/mongoose<br></code></pre></td></tr></table></figure><h4 id="passport"><a href="#passport" class="headerlink" title="passport"></a>passport</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Egg-CNode`使用`egg-passport、egg-passport-github、egg-passport-local`做身份验证，`Nest`提供了`@nestjs/passport`，需要安装生产`passport、passport-github、passport-local<br></code></pre></td></tr></table></figure><p>其他依赖在后面用到时候在详细介绍，这几个是比较重要的依赖。</p><h2 id="配置-Views-视图模板和-public-静态资源"><a href="#配置-Views-视图模板和-public-静态资源" class="headerlink" title="配置 Views 视图模板和 public 静态资源"></a>配置 Views 视图模板和 public 静态资源</h2><p><code>CNode</code> 使用的是<code>egg-ejs</code>,为了简单点，减少静态文件编写，我也用<code>ejs</code>。发现区别就是少了<code>layout</code>功能，需要我们拆分<code>layout/header.ejs</code>和<code>layout/footer.ejs</code>在使用了。<br>但是有一个包可以做到类似的功能<code>ejs-mate</code>，这个是<a href="https://github.com/JacksonTian">@JacksonTian</a> 朴灵大神的作品。</p><p>新建模板存放<code>views</code>文件夹(root/views)和静态资源存放<code>public</code>文件夹(root/public)</p><p><strong>注意</strong>：<code>nest-cli</code>默认只处理<code>src</code>里面的 ts 文件，如有其他文件需要自己写脚本处理，<code>gulp</code>或者<code>webpack</code>都可以，这里就简单一点，直接把<code>views</code>和<code>public</code>放在<code>src</code>平级的根目录里面了。后面会说怎么处理它们设置问题。</p><h3 id="模板引擎-1"><a href="#模板引擎-1" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>安装<code>ejs-mate</code>依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install ejs-mate --save<br></code></pre></td></tr></table></figure><p>用法很简单了，关于文件名后缀，默认使用<code>.ejs</code>，<code>.ejs</code>虽然会让它语法高亮，有个坑就<code>html</code>标签不会自动补全提示。那需要换成<code>.html</code>后缀。</p><p>设置模板引擎：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; join &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> ejsMate <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ejs-mate&#x27;</span>;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>    ....<br>      <span class="hljs-comment">// 获取根目录 nest-cnode</span><br>    <span class="hljs-keyword">const</span> rootDir = <span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-comment">// 指定视图引擎 处理.html后缀文件</span><br>    app.<span class="hljs-title function_">engine</span>(<span class="hljs-string">&#x27;html&#x27;</span>, ejsMate);<br>    <span class="hljs-comment">// 视图引擎</span><br>    app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;html&#x27;</span>);<br>    <span class="hljs-comment">// 配置模板（视图）的基本目录</span><br>    app.<span class="hljs-title function_">setBaseViewsDir</span>(<span class="hljs-title function_">join</span>(rootDir, <span class="hljs-string">&#x27;views&#x27;</span>));<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：当前启动程序是<code>src/main.ts</code>，因为<code>views</code>和<code>public</code>在根目录，所有我们就需要去获取获取根目录。其他注释已经说明，就不再赘述。</p></blockquote><p>使用模板引擎：</p><ol><li>我们在<code>views</code>文件夹里面新建一个<code>layout.html</code>和一个<code>index.html</code>。</li><li>写通用的<code>layout.html</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我是layout模板<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    &lt;%- body -%&gt;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>写的<code>index.html</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;% layout(&#x27;layout&#x27;) -%&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>渲染模板引擎</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Get</span>, <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Render</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.service&#x27;</span><br><br><span class="hljs-meta">@Controller</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> appService: AppService</span>) &#123;&#125;<br><br>  <span class="hljs-meta">@Get</span>()<br>  <span class="hljs-meta">@Render</span>(<span class="hljs-string">&#x27;index&#x27;</span>)<br>  <span class="hljs-title function_">root</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：<code>@Render()</code>里面一定要写模板文件名(可以省略后缀)，不然访问页面显示是<code>json</code>对象。</p><p>访问首页<code>http://localhost:3000/</code>看结果。</p><p><a href="https://user-images.githubusercontent.com/6111778/44764383-043ced00-ab82-11e8-8ae4-35d9cedcd26d.png"><img src="https://user-images.githubusercontent.com/6111778/44764383-043ced00-ab82-11e8-8ae4-35d9cedcd26d.png" alt="3nc4l2 l_nbp_di0fkomamc"></a></p><p><code>ejs-mate</code>语法：</p><p><code>ejs-mate</code>兼容<a href="https://ejs.bootcss.com/">ejs</a>语法，语法很简单，这里顺便带一下：</p><ul><li>&lt;% ‘脚本’ 标签，用于流程控制，无输出。</li><li>&lt;%_ 删除其前面的空格符</li><li>&lt;%= 输出数据到模板（输出是转义 HTML 标签）</li><li>&lt;%- 输出非转义的数据到模板</li><li>&lt;%# 注释标签，不执行、不输出内容</li><li>&lt;%% 输出字符串 ‘&lt;%’</li><li>%&gt; 一般结束标签</li><li>-%&gt; 删除紧随其后的换行符</li><li>_%&gt; 将结束标签后面的空格符删除</li></ul><p>说几个常用的写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;% 直接写js代码，不输出：%&gt;<br><br>&lt;ul&gt;<br>  &lt;% users.forEach(<span class="hljs-keyword">function</span>(user)&#123; %&gt;<br>    &lt;%- include(<span class="hljs-string">&#x27;user/show&#x27;</span>, &#123;user: user&#125;); %&gt;<br>  &lt;% &#125;); %&gt;<br>&lt;/ul&gt;<br><br>&lt;%<span class="hljs-comment"># 输出变量：%&gt;</span><br><br>&lt;%= <span class="hljs-string">&#x27;变量&#x27;</span> %&gt;<br><br>&lt;%<span class="hljs-comment"># 输出HTML：%&gt;</span><br><br>&lt;%- <span class="hljs-string">&#x27;&lt;h1&gt;标题&lt;/h1&gt;&#x27;</span> %&gt;<br><br>&lt;%<span class="hljs-comment"># 引入其他ejs文件（注意：2个参数，第一个是路径：相对于当前模板路径中的模板片段包含进来；第二个是传递数据对象。）：%&gt;</span><br><br>&lt;%- include(<span class="hljs-string">&#x27;user/show&#x27;</span>, &#123;user: user&#125;); %&gt;<br></code></pre></td></tr></table></figure><p>说明：</p><p><strong>注意</strong>：以上语法基本一样，有一样不一样，<code>include</code>需要用<code>partial</code>代替。他们俩用法一模一样。</p><p><code>layout</code>功能，需要在引用的页面，比如<code>index.html</code>里面使用<code>&lt;% layout(&#39;layout&#39;) -%&gt;</code>，<strong>注意</strong>：这里<code>&#39;layout&#39;</code>是指<code>layout.html</code>。</p><p>还有一个比较重要的功能是<code>block</code>。它是在指定的位置插入自定义内容。类似于<code>angularjs</code>的<code>transclude</code>，<code>angular</code>的<code>&lt;ng-content select=&quot;[xxx]&quot;&gt;&lt;/ng-content&gt;</code>，<code>vue</code>的<code>&lt;slot&gt;&lt;/slot&gt;</code>。</p><p><code>slot</code>写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%- block(&#x27;head&#x27;).toString() %&gt;<br></code></pre></td></tr></table></figure><p><code>block(&#39;head&#39;)</code>，是一个占位标识符，<code>toString</code>是合并所有的插入使用<code>join</code>转成字符串。</p><p>使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;% block(&#x27;head&#x27;).append(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/append.css&quot;</span> /&gt;</span>&#x27;) %&gt; &lt;% block(&#x27;head&#x27;).prepend(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">link</span></span><br><span class="hljs-tag">  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/prepend.css&quot;</span></span><br><span class="hljs-tag">/&gt;</span>&#x27;) %&gt;<br></code></pre></td></tr></table></figure><p><code>append</code>和<code>prepend</code>是插入的顺序，<code>append</code>总是插槽位置插入在最后，<code>prepend</code>总是插槽位置插入在最前。</p><p>我们来验证一下。</p><p>现在<code>layout.html</code>的<code>head</code>里面写上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/style.css&quot;</span> /&gt;</span><br>  &lt;%- block(&#x27;head&#x27;).toString() %&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>index.html</code>的结尾写上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">... &lt;% block(&#x27;head&#x27;).append(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/append.css&quot;</span> /&gt;</span>&#x27;) %&gt; &lt;% block(&#x27;head&#x27;).prepend(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">link</span></span><br><span class="hljs-tag">  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/prepend.css&quot;</span></span><br><span class="hljs-tag">/&gt;</span>&#x27;) %&gt; &lt;% block(&#x27;head&#x27;).prepend(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/prepend2.css&quot;</span> /&gt;</span>&#x27;) %&gt; &lt;% block(&#x27;head&#x27;).append(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">link</span></span><br><span class="hljs-tag">  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/append2.css&quot;</span></span><br><span class="hljs-tag">/&gt;</span>&#x27;) %&gt;<br></code></pre></td></tr></table></figure><p>访问首页<code>http://localhost:3000/</code>看结果。</p><p><a href="https://user-images.githubusercontent.com/6111778/44764409-1ae34400-ab82-11e8-9177-aba90b3d799d.png"><img src="https://user-images.githubusercontent.com/6111778/44764409-1ae34400-ab82-11e8-9177-aba90b3d799d.png" alt="7d kp 0rh t 7 i4"></a></p><p><strong>注意</strong>：<code>index.html</code>里书写<code>block(&#39;head&#39;).append</code>的位置不影响它显示插槽的位置，只受定义插槽<code>&lt;%- block(&#39;head&#39;).toString() %&gt;</code></p><p>还有一个方法<code>replace</code>，没看懂怎么用的，文档里面也没有说明，基本<code>append</code>、<code>prepend</code>、<code>toString</code>就够用了。</p><p>总结：<code>toString</code>是定义插槽位置，<code>append</code>、<code>prepend</code>往插槽插入指定的内容。他们主要做什么了，<code>layout</code>载入公共的<code>css</code>、<code>js</code>，如果有的页面有不一样地方，就需要插入当前页面的 js 了，那么一来这个插槽功能就有用，如果使用<code>layout</code>功能插入，就会包含在<code>layout</code>位置，无论是语义还是加载都是不合理的。就有了<code>block</code>的功能，在另一款模板引擎<code>Jade</code>里面也有同样的功能也叫<code>block</code>功能。</p><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p><code>public</code>文件夹里面内容直接拷贝<code>egg-cnode</code>下的<code>public</code>的静态资源</p><p>还需要安装几个依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i --save loader loader-connect loader-builder<br></code></pre></td></tr></table></figure><p>这几个模块是加载 css 和 js 使用，也是<a href="https://github.com/JacksonTian">@JacksonTian</a> 朴灵大神的作品。</p><p>main.ts 配置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; join &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span>;<br><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> loaderConnect <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;loader-connect&#x27;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  ...<br>  <span class="hljs-comment">// 根目录 nest-cnode</span><br>  <span class="hljs-keyword">const</span> rootDir = <span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;..&#x27;</span>);<br>  <span class="hljs-comment">// 注意：这个要在express.static之前调用，loader2.0之后要使用loader-connect</span><br>  <span class="hljs-comment">// 自动转换less为css</span><br>  <span class="hljs-keyword">if</span> (isDevelopment) &#123;<br>    app.<span class="hljs-title function_">use</span>(loaderConnect.<span class="hljs-title function_">less</span>(rootDir));<br>  &#125;<br>  <span class="hljs-comment">// 所有的静态文件路径都前缀&quot;/public&quot;, 需要使用“挂载”功能</span><br>  app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/public&#x27;</span>, express.<span class="hljs-title function_">static</span>(<span class="hljs-title function_">join</span>(rootDir, <span class="hljs-string">&#x27;public&#x27;</span>)));<br>  <span class="hljs-comment">// 官方指定是这个 默认访问根目录</span><br>  <span class="hljs-comment">// app.useStaticAssets(join(__dirname, &#x27;..&#x27;, &#x27;public&#x27;));</span><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：如果静态文件路径都前缀<code>/public</code>，需要使用<code>use</code>去挂载<code>express.static</code>路径。只有<code>express</code>是这样的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">useStaticAssets</span>(<span class="hljs-params">path: <span class="hljs-built_in">string</span>, options: ServeStaticOptions</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path, options));<br>&#125;<br></code></pre></td></tr></table></figure><p>它的源码是这样写的，如果这样的，你的静态资源路径就是从根目录开始，如果需要加前缀<code>/public</code>，就需要<code>express</code>提供的<a href="http://expressjs.jser.us/4x_zh-cn/api.html#app.use">方式</a></p><p>测试我们静态资源路径设置是否正常工作</p><p>在<code>index.html</code>里面引入<code>public/images/logo.png</code>图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/public/images/logo.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;logo&quot;</span> /&gt;</span><br>...<br></code></pre></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/6111778/44764424-2e8eaa80-ab82-11e8-9a94-44979c2265e6.png"><img src="https://user-images.githubusercontent.com/6111778/44764424-2e8eaa80-ab82-11e8-9a94-44979c2265e6.png" alt="l8p0 psc xxuk6 zyea0nvs"></a></p><p>如果有问题，请找原因，路径是否正确，设置是否正确，如果都 ok，还是不能访问，可以联系我。</p><p>关于<code>loader</code>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- style --&gt;<br>&lt;%- <span class="hljs-title class_">Loader</span>(<span class="hljs-string">&#x27;/public/stylesheets/index.min.css&#x27;</span>)<br>.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;/public/libs/bootstrap/css/bootstrap.css&#x27;</span>)<br>.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;/public/stylesheets/common.css&#x27;</span>)<br>.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;/public/stylesheets/style.less&#x27;</span>)<br>.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;/public/stylesheets/responsive.css&#x27;</span>)<br>.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;/public/stylesheets/jquery.atwho.css&#x27;</span>)<br>.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;/public/libs/editor/editor.css&#x27;</span>)<br>.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;/public/libs/webuploader/webuploader.css&#x27;</span>)<br>.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;/public/libs/code-prettify/prettify.css&#x27;</span>)<br>.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;/public/libs/font-awesome/css/font-awesome.css&#x27;</span>)<br>.<span class="hljs-title function_">done</span>(assets, config.<span class="hljs-property">site_static_host</span>, config.<span class="hljs-property">mini_assets</span>)<br>%&gt;<br><br>&lt;!-- scripts --&gt;<br>&lt;%- <span class="hljs-title class_">Loader</span>(<span class="hljs-string">&#x27;/public/index.min.js&#x27;</span>)<br>.<span class="hljs-title function_">js</span>(<span class="hljs-string">&#x27;/public/libs/jquery-2.1.0.js&#x27;</span>)<br>.<span class="hljs-title function_">js</span>(<span class="hljs-string">&#x27;/public/libs/lodash.compat.js&#x27;</span>)<br>.<span class="hljs-title function_">js</span>(<span class="hljs-string">&#x27;/public/libs/jquery-ujs.js&#x27;</span>)<br>.<span class="hljs-title function_">js</span>(<span class="hljs-string">&#x27;/public/libs/bootstrap/js/bootstrap.js&#x27;</span>)<br>.<span class="hljs-title function_">js</span>(<span class="hljs-string">&#x27;/public/libs/jquery.caret.js&#x27;</span>)<br>.<span class="hljs-title function_">js</span>(<span class="hljs-string">&#x27;/public/libs/jquery.atwho.js&#x27;</span>)<br>.<span class="hljs-title function_">js</span>(<span class="hljs-string">&#x27;/public/libs/markdownit.js&#x27;</span>)<br>.<span class="hljs-title function_">js</span>(<span class="hljs-string">&#x27;/public/libs/code-prettify/prettify.js&#x27;</span>)<br>.<span class="hljs-title function_">js</span>(<span class="hljs-string">&#x27;/public/libs/qrcode.js&#x27;</span>)<br>.<span class="hljs-title function_">js</span>(<span class="hljs-string">&#x27;/public/javascripts/main.js&#x27;</span>)<br>.<span class="hljs-title function_">js</span>(<span class="hljs-string">&#x27;/public/javascripts/responsive.js&#x27;</span>)<br>.<span class="hljs-title function_">done</span>(assets, config.<span class="hljs-property">site_static_host</span>, config.<span class="hljs-property">mini_assets</span>)<br>%&gt;<br></code></pre></td></tr></table></figure><ul><li><code>Loader</code>可以加载<code>.js</code>方法也可以加载<code>.coffee</code>、<code>.es</code>类型的文件，<code>.css</code>方法可以加载<code>.less</code>、<code>.styl</code>文件。</li><li><code>Loader(&#39;/public/index.min.js&#39;)</code>是合并后名字</li><li><code>.js(&#39;/public/libs/jquery-2.1.0.js&#39;)</code>是加载每一个文件地址</li><li><code>.done(assets, config.site_static_host, config.mini_assets)</code>是处理文件，第一个参数合并压缩后的路径（后面讲解），第二个参数静态文件服务器地址，第三个参数是否压缩</li></ul><p><code>assets</code>从哪里来</p><p>在<code>package.json</code>的<code>scripts</code>配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    ...<br>    <span class="hljs-attr">&quot;assets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;loader /views /&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>loader 的写法是：<code>loader &lt;views_dir&gt; &lt;output_dir&gt;</code>。<code>views_dir</code>是模板引擎目录，<code>output_dir</code>是<code>assets.json</code>文件输出的目录，<code>/</code>表示根目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run assets<br></code></pre></td></tr></table></figure><p>直接运行会报错，这个问题在<code>egg-node</code>有人提<a href="https://github.com/cnodejs/egg-cnode/issues/129">issues</a></p><p><a href="https://user-images.githubusercontent.com/6111778/44764434-3b130300-ab82-11e8-9322-088c7688949a.png"><img src="https://user-images.githubusercontent.com/6111778/44764434-3b130300-ab82-11e8-9322-088c7688949a.png" alt="z90d4zb w t t26e_2 l"></a></p><p>主要是静态资源<code>css</code>引用的背景图片和字体地址有错误，需要修改哪些文件：</p><p>错误信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">no such file or directory, open <span class="hljs-string">&#x27;E:\github\nest-cnode\E:\public\img\glyphicons-halflings.png&#x27;</span><br></code></pre></td></tr></table></figure><p>谁引用了它 <code>Error! File:/public/libs/bootstrap/css/bootstrap.css</code></p><p>/public/libs/bootstrap/css/bootstrap.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs css">...<br><span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;icon-&quot;</span>]</span>,<br><span class="hljs-selector-attr">[class*=<span class="hljs-string">&quot; icon-&quot;</span>]</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1px</span>;<br>    *<span class="hljs-attribute">margin-right</span>: .<span class="hljs-number">3em</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">vertical-align</span>: text-top;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;/public/libs/bootstrap/img/glyphicons-halflings.png&quot;</span>);<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">14px</span> <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>&#125;<br>...<br><br><span class="hljs-selector-class">.icon-white</span>,<br><span class="hljs-selector-class">.nav-pills</span> &gt; <span class="hljs-selector-class">.active</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.nav-pills</span> &gt; <span class="hljs-selector-class">.active</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-attr">[class*=<span class="hljs-string">&quot; icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.nav-list</span> &gt; <span class="hljs-selector-class">.active</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.nav-list</span> &gt; <span class="hljs-selector-class">.active</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-attr">[class*=<span class="hljs-string">&quot; icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.navbar-inverse</span> <span class="hljs-selector-class">.nav</span> &gt; <span class="hljs-selector-class">.active</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.navbar-inverse</span> <span class="hljs-selector-class">.nav</span> &gt; <span class="hljs-selector-class">.active</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-attr">[class*=<span class="hljs-string">&quot; icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.dropdown-menu</span> &gt; <span class="hljs-selector-tag">li</span> &gt; <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &gt; <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.dropdown-menu</span> &gt; <span class="hljs-selector-tag">li</span> &gt; <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span> &gt; <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.dropdown-menu</span> &gt; <span class="hljs-selector-tag">li</span> &gt; <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &gt; <span class="hljs-selector-attr">[class*=<span class="hljs-string">&quot; icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.dropdown-menu</span> &gt; <span class="hljs-selector-tag">li</span> &gt; <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span> &gt; <span class="hljs-selector-attr">[class*=<span class="hljs-string">&quot; icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.dropdown-menu</span> &gt; <span class="hljs-selector-class">.active</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.dropdown-menu</span> &gt; <span class="hljs-selector-class">.active</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-attr">[class*=<span class="hljs-string">&quot; icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.dropdown-submenu</span><span class="hljs-selector-pseudo">:hover</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.dropdown-submenu</span><span class="hljs-selector-pseudo">:focus</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.dropdown-submenu</span><span class="hljs-selector-pseudo">:hover</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-attr">[class*=<span class="hljs-string">&quot; icon-&quot;</span>]</span>,<br><span class="hljs-selector-class">.dropdown-submenu</span><span class="hljs-selector-pseudo">:focus</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-attr">[class*=<span class="hljs-string">&quot; icon-&quot;</span>]</span> &#123;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;/public/libs/bootstrap/img/glyphicons-halflings-white.png&quot;</span>);<br>&#125;<br>...<br></code></pre></td></tr></table></figure><p>大约<code>2296</code>和<code>2320</code>行位置，你可以用查找搜索<code>glyphicons-halflings.png</code>，默认是<code>background-image: url(&quot;../img/glyphicons-halflings.png&quot;);</code>, 替换为上面写法。</p><p>/public/stylesheets/style.less</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css">...<br><span class="hljs-selector-class">.navbar</span> <span class="hljs-selector-class">.search-query</span> &#123;<br>  -webkit-<span class="hljs-attribute">box-shadow</span>: none;<br>  -moz-<span class="hljs-attribute">box-shadow</span>: none;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#888</span> <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;/public/images/search.png&#x27;</span>) no-repeat <span class="hljs-number">4px</span> <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">3px</span> <span class="hljs-number">5px</span> <span class="hljs-number">3px</span> <span class="hljs-number">22px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">2px</span>;<br><br>  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: white;<br>  &#125;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.5s</span>;<br><br>  &amp;<span class="hljs-selector-pseudo">:focus</span>, &amp;<span class="hljs-selector-class">.focused</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: white;<br>  &#125;<br>&#125;<br>...<br></code></pre></td></tr></table></figure><p>大约<code>850</code>行位置</p><blockquote><p>简单解释就是换成相对于根目录的路径，后面错误就类似。</p></blockquote><p><a href="https://user-images.githubusercontent.com/6111778/44764444-45350180-ab82-11e8-9f65-a6b319a11fec.png"><img src="https://user-images.githubusercontent.com/6111778/44764444-45350180-ab82-11e8-9f65-a6b319a11fec.png" alt="45 7el q a5ph tf g84r 0"></a></p><p>打包成功以后会输出一个<code>assets.json</code>在根目录。<code>assets</code>指的就是这个 json 文件，后面我们会讲如果把它们关联起来。</p><h2 id="静态模板"><a href="#静态模板" class="headerlink" title="静态模板"></a>静态模板</h2><p>我们上面已经配置好了模板引擎和静态资源，我们先要去扩展他们，先让页面好看点。</p><p>打开<a href="https://cnodejs.org/">cnode</a>，然后右键查看源代码。把里面内容复制，拷贝到<code>index.html</code>里去。</p><p>访问<code>http://localhost:3000/</code>就可以瞬间看到和<code>cnode</code>首页一样的内容了。</p><p><a href="https://user-images.githubusercontent.com/6111778/44771917-006b9380-ab9f-11e8-9122-ed902df536a7.png"><img src="https://user-images.githubusercontent.com/6111778/44771917-006b9380-ab9f-11e8-9122-ed902df536a7.png" alt="1"></a></p><p>有模板以后，我们需要改造他们:</p><ol><li>使用 HTML5 推荐的<code>DOCTYPE</code>申明</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>拆分<code>body</code>标签之外到<code>layout.html</code></li></ol><p>浏览<code>cnode</code>所有页面<code>head</code>内容，除了<code>title</code>标签内容其他一样</p><p>基础<code>layout.html</code>模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我是layout模板<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    &lt;%- body -%&gt;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>把<code>index.html</code>里的<code>head</code>标签内容都移动到<code>layout.html</code>的<code>head</code>，同名的直接替换。</p><p>替换之后的<code>layout.html</code>模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CNode：Node.js专业中文社区<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;CNode：Node.js专业中文社区&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;nodejs, node, express, connect, socket.io&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- see http://smerity.com/articles/2013/where_did_all_the_http_referrers_go.html --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;referrer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;always&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;EDP@TaoBao&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;wb:webmaster&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;617be6bd946c6b96&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;_csrf&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;csrf-param&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;vlUgGvkx-SgmuzendL9gAP3DHXVS3834IpC4&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;csrf-token&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;RSS&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;application/rss+xml&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;alternate&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/rss&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;//o4j806krb.qnssl.com/public/images/cnode_icon_32.png&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- style --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;//o4j806krb.qnssl.com/public/stylesheets/index.min.23a5b1ca.min.css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;all&quot;</span> /&gt;</span><br>    &lt;%- block(&#x27;styles&#x27;).toString() %&gt;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    &lt;%- body -%&gt;<br>    <span class="hljs-comment">&lt;!-- scripts --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//o4j806krb.qnssl.com/public/index.min.f7c13f64.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    &lt;%- block(&#x27;scripts&#x27;).toString() %&gt;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>style 放头部，script 放底部，并且利用模板引擎做了 2 个插槽，一个<code>styles</code>和<code>scripts</code></p></blockquote><ol><li>拆分<code>body</code>标签之内到<code>layout.html</code></li></ol><p>浏览<code>cnode</code>所有页面内容，发现头部黑色部分和底部白色部分都是一样的。那么我们需要把它们提取出来。</p><p><code>cnode</code>模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;backtotop&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sidebar-mask&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>backtotop</code>和<code>sidebar-mask</code>是 2 个和 js 相关的功能标签，直接保留它们。</li><li>class<code>navbar</code>对应到<code>header</code>标签</li><li>id<code>main</code>对应到<code>main</code>标签</li><li>id<code>footer</code>对应到<code>footer</code>标签</li><li>并且把除了<code>main</code>标签之外内容都放到对应的标签里面</li><li>模板里面关于网站访问统计的代码，我们就不需要了，直接去掉了。</li></ul><p>改版后的<code>layout.html</code>模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;navbar&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span>&lt;%- body -%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;backtotop&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sidebar-mask&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>把剩下<code>index.html</code>里面的<code>styles</code>和<code>scripts</code>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;% block(&#x27;styles&#x27;).append(``) %&gt; &lt;% block(&#x27;scripts&#x27;).append(``) %&gt;<br></code></pre></td></tr></table></figure><p>最好是写成<code>script</code>和<code>style</code>文件。</p><ol><li>拆分<code>main</code>标签之内到<code>sidebar.html</code></li></ol><p>浏览<code>cnode</code>所有主体内容，发现右边侧边栏除了<code>api</code>页面没有，注册登录找回密码，是另外一种模板内容，其他页面都是一样。</p><p>当前<code>index.html</code>模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">... &lt;% layout(&#x27;layout&#x27;) -%&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sidebar&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>替换后的<code>index.html</code>模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">... &lt;% layout(&#x27;layout&#x27;) -%&gt; &lt;%- partial(&#x27;./sidebar.html&#x27;) %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>这样我们首页模板已经完成了。</p><h2 id="系统配置和应用配置"><a href="#系统配置和应用配置" class="headerlink" title="系统配置和应用配置"></a>系统配置和应用配置</h2><p>系统配置是系统级别的配置，如数据配置，端口，host，签名，加密 keys 等</p><p>应用配置是应用级别的配置，如网站标题，关键字，描述等</p><p>系统配置使用<code>.env</code>文件，大部分语言都有这个文件，我们需要用<code>dotenv</code>读取它们里面的内容。</p><p><code>dotenv</code>支持的<code>.env</code>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 测试单行注释</span><br>KEY=<br>KEY=<span class="hljs-string">&#x27;&#x27;</span><br>KEY=value<br>KEY=<span class="hljs-string">&#x27;value&#x27;</span><br>KEY=&#123;<span class="hljs-string">&quot;foo&quot;</span>: <span class="hljs-string">&quot;bar&quot;</span>&#125;<br>KEY=<span class="hljs-string">&#x27;&#123;&quot;foo&quot;: &quot;bar&quot;&#125;&#x27;</span><br>KEY=[<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>]<br>KEY=<span class="hljs-string">&#x27;[&quot;foo&quot;, &quot;bar&quot;]&#x27;</span><br>KEY=<span class="hljs-literal">true</span><br>KEY=0<br>KEY=<span class="hljs-string">&#x27;0&#x27;</span><br>KEY=null<br>KEY=<span class="hljs-string">&#x27;null&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>.env</code> 语法非常简单，<code>key</code> 只能是字符串（ps：最好大写带下划线分割单词），<code>value</code> 可以是空、字符串、数字、布尔值、字典对象、数组，<code>dotenv</code>最后获取也是字符串，需要你做相应处理。</p></blockquote><p><strong>注意</strong>：<code>.env</code> 文件主要的作用是存储环境变量，也就是会随着环境变化的东西，比如数据库的用户名、密码、静态文件的存储路径之类的，因为这些信息应该是和环境绑定的，不应该随代码的更新而变化，所以一般不会把 <code>.env</code> 文件放到版本控制中；</p><p>我们需要在<code>.gitignore</code>文件中排除它们：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># dotenv environment variables file</span><br>*.<span class="hljs-built_in">env</span><br>.<span class="hljs-built_in">env</span><br></code></pre></td></tr></table></figure><blockquote><p><code>.env</code>配置文件，关于隐私配置，可以看<code>README.md</code>说明。<code>.env</code>文件模板</p></blockquote><h3 id="ConfigModule（配置模块）"><a href="#ConfigModule（配置模块）" class="headerlink" title="ConfigModule（配置模块）"></a>ConfigModule（配置模块）</h3><p>当我们使用<code>process global</code>对象时，很难保持测试的干净，因为测试类可能直接使用它。另一种方法是创建一个抽象层，即一个<code>ConfigModule</code>，它公开了一个装载配置变量的<code>ConfigService</code>。</p><p>关于配置模块，官网有详细的<a href="https://docs.nestjs.com/techniques/configuration">栗子</a>，这里也是基本类似。这里说一些关键点：</p><ol><li>需要用到依赖：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i --save dotenv  // 用来解析`.<span class="hljs-built_in">env</span>`配置文件<br><br>npm install --save joi  // 用来验证`.<span class="hljs-built_in">env</span>`配置文件<br>npm install --save-dev @types/joi<br></code></pre></td></tr></table></figure><ol><li>需要创建<code>.env</code>配置文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">development.env  开发配置<br>production.env  生产配置<br>test.env  测试配置<br>.env.tmp  .<span class="hljs-built_in">env</span>配置文件模板<br></code></pre></td></tr></table></figure><ol><li>怎么设置<code>NODE_ENV</code></li></ol><p><code>windows</code>和<code>mac</code>不一样</p><p>windows 设置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start:dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set NODE_ENV=development&amp;&amp; nodemon&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;start:prod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set NODE_ENV=production&amp;&amp; node dist/main.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set NODE_ENV=test&amp;&amp; jest&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>mac 设置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start:dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;export NODE_ENV=development&amp;&amp; nodemon&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;start:prod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;export NODE_ENV=production&amp;&amp; node dist/main.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;export NODE_ENV=test&amp;&amp; jest&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>你会发现这个很麻烦，有没有什么方便地方了，可以通过<code>cross-env</code>来解决问题，它就是解决跨平台设置 NODE_ENV 的问题，默认情况下，windows 不支持 NODE_ENV=development 的设置方式，加上 cross-env 就可以跨平台。</p><p>安装<code>cross-env</code>依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i --save-dev cross-env<br></code></pre></td></tr></table></figure><p><code>cross-env</code>设置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start:dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env NODE_ENV=development nodemon&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;start:prod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env NODE_ENV=production node dist/main.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env NODE_ENV=test jest&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol><li>创建<code>config</code>模块:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest generate module config<br>OR<br>$ nest g mo config<br></code></pre></td></tr></table></figure><ul><li>创建全局模块，全局模块不需要在注入到该模块，就能使用该模块导出的服务。</li><li>创建动态模块，动态模块可以创建可定制的模块，动态做依赖注入关系。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span>, <span class="hljs-title class_">DynamicModule</span>, <span class="hljs-title class_">Global</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config.service&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigurationToken</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config.constants&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">EnvConfig</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config.interface&#x27;</span><br><br><span class="hljs-meta">@Global</span>()<br><span class="hljs-meta">@Module</span>(&#123;&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigModule</span> &#123;<br>  <span class="hljs-keyword">static</span> forRoot&lt;T = <span class="hljs-title class_">EnvConfig</span>&gt;(filePath?: <span class="hljs-built_in">string</span>, validator?: <span class="hljs-function">(<span class="hljs-params">envConfig: T</span>) =&gt;</span> T): <span class="hljs-title class_">DynamicModule</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">module</span>: <span class="hljs-title class_">ConfigModule</span>,<br>      <span class="hljs-attr">providers</span>: [<br>        &#123;<br>          <span class="hljs-attr">provide</span>: <span class="hljs-title class_">ConfigService</span>,<br>          <span class="hljs-attr">useValue</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigService</span>(filePath || <span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.NODE_ENV || <span class="hljs-string">&#x27;development&#x27;</span>&#125;</span>.env`</span>, validator),<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">provide</span>: <span class="hljs-title class_">ConfigToken</span>,<br>          <span class="hljs-attr">useFactory</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigService</span>(filePath || <span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.NODE_ENV || <span class="hljs-string">&#x27;development&#x27;</span>&#125;</span>.env`</span>, validator),<br>        &#125;,<br>      ],<br>      <span class="hljs-attr">exports</span>: [<span class="hljs-title class_">ConfigService</span>, <span class="hljs-title class_">ConfigToken</span>],<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>&lt;T = EnvConfig&gt;</code>是一种什么写法，<code>T</code>是一个泛型，<code>EnvConfig</code>是一个默认值，如果使用者不传递就是默认类型，作用类似于函数默认值。</p><p>默认用 2 种注册服务的写法，一种是类，一种是工厂。前面基础篇已经提及了，后面讲怎么使用它们。</p><ol><li>创建<code>config</code>服务:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest generate service config/config<br>OR<br>$ nest g s config/config<br></code></pre></td></tr></table></figure><p>首先,让我们写<code>ConfigService</code>类。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span><br><span class="hljs-keyword">import</span> &#123; parse &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dotenv&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">EnvConfig</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config.interface&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigService</span>&lt;T = <span class="hljs-title class_">EnvConfig</span>&gt; &#123;<br>  <span class="hljs-comment">// 系统配置</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-attr">envConfig</span>: T<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">filePath: <span class="hljs-built_in">string</span>, validator?: (envConfig: T) =&gt; T</span>) &#123;<br>    <span class="hljs-comment">// 解析配置文件</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">configFile</span>: T = <span class="hljs-title function_">parse</span>(fs.<span class="hljs-title function_">readFileSync</span>(filePath))<br>    <span class="hljs-comment">// 验证配置参数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> validator === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>      <span class="hljs-keyword">const</span> <span class="hljs-attr">envConfig</span>: T = <span class="hljs-title function_">validator</span>(configFile)<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> envConfig !== <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;validator return value is not object&#x27;</span>)<br>      &#125;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">envConfig</span> = envConfig<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">envConfig</span> = configFile<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取配置</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">key</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">defaultVal</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">get</span>(<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>, defaultVal?: <span class="hljs-built_in">any</span>): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> process.<span class="hljs-property">env</span>[key] || <span class="hljs-variable language_">this</span>.<span class="hljs-property">envConfig</span>[key] || defaultVal<br>  &#125;<br><br>  <span class="hljs-comment">/** 获取系统配置 */</span><br>  <span class="hljs-title function_">getKeys</span>(<span class="hljs-attr">keys</span>: <span class="hljs-built_in">string</span>[]): <span class="hljs-built_in">any</span> &#123;<br>    <span class="hljs-keyword">return</span> keys.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">obj, key: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br>      obj[key] = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(key)<br>      <span class="hljs-keyword">return</span> obj<br>    &#125;, &#123;&#125;)<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取数字</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">key</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">getNumber</span>(<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">number</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Number</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(key))<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取布尔值</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">key</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">getBoolean</span>(<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">boolean</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(key))<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取字典对象和数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">key</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">getJson</span>(<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>): &#123; [<span class="hljs-attr">prop</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125; | <span class="hljs-literal">null</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(key))<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 检查一个key是否存在</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">key</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">has</span>(<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">boolean</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(key) !== <span class="hljs-literal">undefined</span><br>  &#125;<br><br>  <span class="hljs-comment">/** 开发模式 */</span><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">isDevelopment</span>(): <span class="hljs-built_in">boolean</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;NODE_ENV&#x27;</span>) === <span class="hljs-string">&#x27;development&#x27;</span><br>  &#125;<br>  <span class="hljs-comment">/** 生产模式 */</span><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">isProduction</span>(): <span class="hljs-built_in">boolean</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;NODE_ENV&#x27;</span>) === <span class="hljs-string">&#x27;production&#x27;</span><br>  &#125;<br>  <span class="hljs-comment">/** 测试模式 */</span><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">isTest</span>(): <span class="hljs-built_in">boolean</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;NODE_ENV&#x27;</span>) === <span class="hljs-string">&#x27;test&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解析数据都存在<code>envConfig</code>里，封装一些获取并转义<code>value</code>的方法。</p><p>传递 2 个参数，一个是<code>.env</code>文件路径，一个是验证器，配合<code>Joi</code>使用，<code>nest</code>官网文档把配置服务和验证字段放在一起，我觉得这样不是很科学。<br>我在<code>.env</code>加一个配置就需要去修改<code>ConfigService</code>类，它本来就是不需要修改的，我就把验证部分提取出来，这样就不用关心验证问题了。<code>ConfigService</code>只关心取值问题。</p><p>上面模块里面还有一个<code>ConfigToken</code>服务，它是做什么的了，它叫做令牌。</p><ol><li>我们创建一个常量文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">touch</span> src/config/config.constants.ts<br>OR<br>编辑器新建文件config.constants.ts<br></code></pre></td></tr></table></figure><p>里面写入常量<code>configToken</code>并导出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> const ConfigToken = <span class="hljs-string">&#x27;ConfigToken&#x27;</span>;<br></code></pre></td></tr></table></figure><p><code>ConfigModule</code>的<code>configToken</code>也是它。</p><ol><li>我们创建一个装饰器文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">touch</span> src/config/config.decorators.ts<br>OR<br>编辑器新建文件config.decorators.ts<br>import &#123; Inject &#125; from <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><br>import &#123; ConfigToken &#125; from <span class="hljs-string">&#x27;./config.constants&#x27;</span>;<br><br><span class="hljs-built_in">export</span> const InjectConfig = () =&gt; Inject(ConfigToken);<br></code></pre></td></tr></table></figure><p>使用<code>Inject</code>依赖注入器注入令牌对应的服务</p><p><code>InjectConfig</code>是一个装饰器。装饰器在<code>nest</code>、<code>angular</code>有大量实践案例，各种装饰器，让你眼花缭乱。</p><p>简单科普一下装饰器：</p><p>写法：（总共四种：类，属性，方法，方法参数）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">ClassDecorator</span> = &lt;<span class="hljs-title class_">TFunction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Function</span>&gt;<span class="hljs-function">(<span class="hljs-params">target: TFunction</span>) =&gt;</span> <span class="hljs-title class_">TFunction</span> | <span class="hljs-built_in">void</span><br><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">PropertyDecorator</span> = <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span></span>) =&gt;</span> <span class="hljs-built_in">void</span><br><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">MethodDecorator</span> = &lt;T&gt;<span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  target: <span class="hljs-built_in">Object</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  propertyKey: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  descriptor: TypedPropertyDescriptor&lt;T&gt;</span></span><br><span class="hljs-params"><span class="hljs-function"></span>) =&gt;</span> <span class="hljs-title class_">TypedPropertyDescriptor</span>&lt;T&gt; | <span class="hljs-built_in">void</span><br><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">ParameterDecorator</span> = <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span>, parameterIndex: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">void</span><br></code></pre></td></tr></table></figure><p>执行顺序：</p><ul><li>类装饰器总是最后执行。</li><li>有多个方法参数装饰器时：从最后一个参数依次向前执行。</li><li>方法参数装饰器中参数装饰器先执行，方法参数装饰器执行完以后，方法装饰器执。</li><li>方法和属性装饰器，谁在前面谁先执行。（ps：方法参数属于方法一部分，参数会一直紧紧挨着方法执行。）</li></ul><ol><li>如何使用<code>config</code></li></ol><p>2 种方式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 装饰器依赖注入</span><br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-meta">@InjectConfig</span>() <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> config: ConfigService&lt;EnvConfig&gt;,</span><br><span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// 普通依赖注入</span><br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> config: ConfigService&lt;EnvConfig&gt;,</span><br><span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// 通过app实例取</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">config</span>: <span class="hljs-title class_">ConfigService</span>&lt;<span class="hljs-title class_">EnvConfig</span>&gt; = app.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">ConfigService</span>);<br><br>...<br>  <span class="hljs-keyword">if</span> (config.<span class="hljs-property">isDevelopment</span>) &#123;<br>    app.<span class="hljs-title function_">use</span>(loaderConnect.<span class="hljs-title function_">less</span>(rootDir));<br>  &#125;<br>...<br><span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(config.<span class="hljs-title function_">getNumber</span>(<span class="hljs-string">&#x27;PORT&#x27;</span>));<br></code></pre></td></tr></table></figure><p>普通依赖注入就够玩了，这里用装饰器依赖注入有些画蛇添足，只是说明装饰器和注入器注入令牌用法。<br>通过 app 实例取，一般用于系统启动初始化配置，后面还要其他的获取方式，用到在介绍。</p><h3 id="Config（应用配置）"><a href="#Config（应用配置）" class="headerlink" title="Config（应用配置）"></a>Config（应用配置）</h3><p>应用配置对比系统配置就没有这么麻烦了，大多数数据都可以写死就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">touch</span> src/core/constants/config.constants.ts<br>OR<br>编辑器新建文件config.constants.ts<br></code></pre></td></tr></table></figure><p>参考<code>cnode-egg</code>的<code>config/config.default.js</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">Config</span> = &#123;<br>  <span class="hljs-comment">// 网站名字、标题</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;CNode技术社区&#x27;</span>,<br>  <span class="hljs-comment">// 网站关键词</span><br>  <span class="hljs-attr">keywords</span>: <span class="hljs-string">&#x27;nodejs, node, express, connect, socket.io&#x27;</span>,<br>  <span class="hljs-comment">// 网站描述</span><br>  <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;CNode：Node.js专业中文社区&#x27;</span>,<br>  <span class="hljs-comment">// logo</span><br>  <span class="hljs-attr">logo</span>: <span class="hljs-string">&#x27;/public/images/cnodejs_light.svg&#x27;</span>,<br>  <span class="hljs-comment">// icon</span><br>  <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;/public/images/cnode_icon_32.png&#x27;</span>,<br>  <span class="hljs-comment">// 版块</span><br>  <span class="hljs-attr">tabs</span>: [<br>    [<span class="hljs-string">&#x27;all&#x27;</span>, <span class="hljs-string">&#x27;全部&#x27;</span>],<br>    [<span class="hljs-string">&#x27;good&#x27;</span>, <span class="hljs-string">&#x27;精华&#x27;</span>],<br>    [<span class="hljs-string">&#x27;share&#x27;</span>, <span class="hljs-string">&#x27;分享&#x27;</span>],<br>    [<span class="hljs-string">&#x27;ask&#x27;</span>, <span class="hljs-string">&#x27;问答&#x27;</span>],<br>    [<span class="hljs-string">&#x27;job&#x27;</span>, <span class="hljs-string">&#x27;招聘&#x27;</span>],<br>    [<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;测试&#x27;</span>],<br>  ],<br>  <span class="hljs-comment">// RSS配置</span><br>  <span class="hljs-attr">rss</span>: &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">description</span>,<br>    <span class="hljs-attr">link</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">language</span>: <span class="hljs-string">&#x27;zh-cn&#x27;</span>,<br>    <span class="hljs-attr">description</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">description</span>,<br>    <span class="hljs-comment">// 最多获取的RSS Item数量</span><br>    <span class="hljs-attr">max_rss_items</span>: <span class="hljs-number">50</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 帖子配置</span><br>  <span class="hljs-attr">topic</span>: &#123;<br>    <span class="hljs-comment">// 列表分页20</span><br>    <span class="hljs-attr">list_count</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-comment">// 每天每用户限额计数10</span><br>    <span class="hljs-attr">perDayPerUserLimitCount</span>: <span class="hljs-number">10</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 用户配置</span><br>  <span class="hljs-attr">user</span>: &#123;<br>    <span class="hljs-comment">// 每个 IP 每天可创建用户数</span><br>    <span class="hljs-attr">create_user_per_ip</span>: <span class="hljs-number">1000</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 默认搜索方式</span><br>  <span class="hljs-attr">search</span>: <span class="hljs-string">&#x27;baidu&#x27;</span>, <span class="hljs-comment">// &#x27;google&#x27;, &#x27;baidu&#x27;, &#x27;local&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>哪里需要直接导入就行了，这个比较简单。</p><p>系统配置和应用配置告一段落了，那么接下来需要配置数</p><h3 id="mongoose-连接"><a href="#mongoose-连接" class="headerlink" title="mongoose 连接"></a>mongoose 连接</h3><p>关于<code>mongoDB</code>安装，创建数据库，连接认证等操作，这里就展开了，这里有篇<a href="https://github.com/jiayisheji/jianshu/blob/master/blog/%E8%BF%9E%E6%8E%A5MongoDB.md">文章</a></p><p>在<code>.env</code>文件里面，我们已经配置<code>mongoDB</code>相关数据。</p><ol><li>创建核心模块</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest generate module core<br>OR<br>$ nest g mo core<br></code></pre></td></tr></table></figure><p>核心模块，只会注入到<code>AppModule</code>，不会注入到<code>feature</code>和<code>shared</code>模块里面，专门做初始化配置工作，不需要导出任何模块。</p><p>它里面包括：守卫，管道，过滤器、拦截器、中间件、全局模块、常量、装饰器</p><p>其中全局中间件和全局模块需要模块里面注入和配置。</p><ol><li>配置<code>ConfigModule</code></li></ol><p>前面我们已经定义好了<code>ConfigModule</code>，现在把它添加到<code>CoreModule</code>中</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigModule</span>, <span class="hljs-title class_">EnvConfig</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../config&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigValidate</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config.validate&#x27;</span><br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">ConfigModule</span>.<span class="hljs-property">forRoot</span>&lt;<span class="hljs-title class_">EnvConfig</span>&gt;(<span class="hljs-literal">null</span>, <span class="hljs-title class_">ConfigValidate</span>.<span class="hljs-property">validateInput</span>)],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoreModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p><code>ConfigValidate.validateInput</code> 是一个验证 <code>.env</code> 方法，<code>nest</code>和官网文档一样.</p><ol><li>配置<code>mongooseModule</code></li></ol><p><code>nest</code>为我们提供了<code>@nestjs/mongoose</code>。</p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save @nestjs/mongoose mongoose<br>npm install --save-dev @types/mongoose<br></code></pre></td></tr></table></figure><p>配置模块：<a href="https://docs.nestjs.com/techniques/mongodb">文档</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts">...<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MongooseModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/mongoose&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>    <span class="hljs-attr">imports</span>: [<br>        ...<br>        <span class="hljs-title class_">MongooseModule</span>.<span class="hljs-title function_">forRoot</span>(url, config)<br>    ],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoreModule</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>MongooseModule</code>提供了 2 个静态方法：</p><ul><li>forRoot(url, config): 对应的<code>Mongoose.connect()</code>方法</li><li>forRootAsync({<br>imports,<br>useFactory,<br>inject<br>}): <code>useFactory</code>返回对应的<code>Mongoose.connect()</code>方法参数，<code>imports</code>依赖模块，<code>inject</code>依赖服务</li><li>forFeature([{ name, schema }]): 对应的<code>mongoose.model()</code>方法</li><li>constructor(@InjectModel(‘Cat’) private readonly catModel: Model) {}：<code>@InjectModel</code>获取<code>mongoose.model</code>，参数和<code>forFeature</code>的<code>name</code>一样。</li></ul><p>根模块使用: (forRoot 和 forRootAsync，只能注入一次，所以要在根模块导入)</p><p>这里我们需要借助配置模块里面获取配置，需要用到<code>forRootAsync</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts">...<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MongooseModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/mongoose&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>    <span class="hljs-attr">imports</span>: [<br>        ...<br>        <span class="hljs-title class_">MongooseModule</span>.<span class="hljs-title function_">forRootAsync</span>(&#123;<br>            <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">ConfigModule</span>],<br>            <span class="hljs-attr">useFactory</span>: <span class="hljs-keyword">async</span> (<span class="hljs-attr">configService</span>: <span class="hljs-title class_">ConfigService</span>) =&gt; (&#123;<br>                <span class="hljs-attr">uri</span>: configService.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;MONGODB_URI&#x27;</span>),<br>                <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span>,<br>            &#125;),<br>            <span class="hljs-attr">inject</span>: [<span class="hljs-title class_">ConfigService</span>],<br>        &#125;)<br>    ],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoreModule</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要写<code>MongooseOptions</code>怎么办</p><p>直接在 uri 后面写，有个必须的配置要写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DeprecationWarning: current URL string parser is deprecated, and will be removed <span class="hljs-keyword">in</span> a future version. To use the new parser, pass option &#123; useNewUrlParser: <span class="hljs-literal">true</span> &#125; to MongoClient.connect.<br></code></pre></td></tr></table></figure><p>其他配置根据自己需求来添加</p><p>如果启动失败会显示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">MongoError: Authentication failed.<br></code></pre></td></tr></table></figure><p>请检查 uri 是否正确，如果启动验证，账号是否验证通过，数据库名是否正确等等。</p><p>数据库连接成功，我们进行下一步，定义用户表。</p><h3 id="用户数据库模块"><a href="#用户数据库模块" class="headerlink" title="用户数据库模块"></a>用户数据库模块</h3><p>建立数据模型为后面控制器提供服务</p><h4 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h4><ol><li>创建<code>shared</code>模块</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest generate module shared<br>OR<br>$ nest g mo shared<br></code></pre></td></tr></table></figure><ol><li>创建<code>mongodb</code>模块</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest generate module shared/mongodb<br>OR<br>$ nest g mo shared/mongodb<br></code></pre></td></tr></table></figure><ol><li>创建<code>user</code>模块</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest generate module shared/mongodb/user<br>OR<br>$ nest g mo shared/mongodb/user<br></code></pre></td></tr></table></figure><ol><li>创建<code>user</code>服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest generate service shared/mongodb/user<br>OR<br>$ nest g s shared/mongodb/user<br></code></pre></td></tr></table></figure><ol><li>创建<code>user</code>的<code>interface</code>、<code>schema</code>、<code>index</code>。</li></ol><p>这三个文件无法用命令创建需要自己手动创建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">touch</span> src/shared/mongodb/user/user.interface.ts<br>$ <span class="hljs-built_in">touch</span> src/shared/mongodb/user/user.schema.ts<br>$ <span class="hljs-built_in">touch</span> src/shared/mongodb/user/index.ts<br>OR<br>编辑器新建文件`user.interface.ts`<br>编辑器新建文件`user.schema.ts`<br>编辑器新建文件`index.ts`<br></code></pre></td></tr></table></figure><ul><li><code>interface</code>是<code>ts</code>接口定义 ts</li><li><code>schema</code>是定义<code>mongodb</code>的<code>schema</code></li></ul><p>最后完整的<code>user</code>文件夹是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">index.ts<br>user.module.ts<br>user.service.ts<br>user.schema.ts<br>user.interface.ts<br></code></pre></td></tr></table></figure><blockquote><p>基本所有的<code>mongodb</code>模块都是这样的结构，后面不在介绍<code>生成文件</code>这项。</p></blockquote><h4 id="定义服务"><a href="#定义服务" class="headerlink" title="定义服务"></a>定义服务</h4><p>默认生产的模块文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在正式写<code>UserService</code>之前，我们先思考一个问题，因为操作数据库服务基本都类似，常用几个方法如：</p><ul><li>findAll 获取指定条件全部数据</li><li>paginator 带分页结构数据</li><li>findOne 获取一个数据</li><li>findById 获取指定 id 数据</li><li>count 获取指定条件个数</li><li>create 创建数据</li><li>delete 删除数据</li><li>update 更新数据</li></ul><p>一个基本表应该有增删改查这样 8 个快捷操作方法，如果每个表都写一个这样的，就比较多余了。<code>Typescript</code>给我们提供一个抽象类，我们可以把这些公共方法写在里面，然后用其他服务来继承。那我们开始写<code>base.service.ts</code>:</p><p>base.service.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽象CRUD操作基础服务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@export</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@abstract</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@class</span> <span class="hljs-variable">BaseService</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@template</span> <span class="hljs-variable">T</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseService</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Document</span>&gt; &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> _model: Model&lt;T&gt;</span>) &#123;&#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取指定条件全部数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">conditions</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">(any | null)</span>&#125; [projection]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">(&#123;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         sort?: any;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         limit?: number;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         skip?: number;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         populates?: ModelPopulateOptions[] | ModelPopulateOptions;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         [key: string]: any;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *     </span>&#125;)&#125; [options]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Promise&lt;T[]&gt;</span>&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">BaseService</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">findAll</span>(<br>    <span class="hljs-attr">conditions</span>: <span class="hljs-built_in">any</span>,<br>    projection?: <span class="hljs-built_in">any</span> | <span class="hljs-literal">null</span>,<br>    options?: &#123;<br>      sort?: <span class="hljs-built_in">any</span><br>      limit?: <span class="hljs-built_in">number</span><br>      skip?: <span class="hljs-built_in">number</span><br>      populates?: <span class="hljs-title class_">ModelPopulateOptions</span>[] | <span class="hljs-title class_">ModelPopulateOptions</span><br>      [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>    &#125;<br>  ): <span class="hljs-title class_">Promise</span>&lt;T[]&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; option, populates &#125; = options<br>    <span class="hljs-keyword">const</span> docsQuery = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_model</span>.<span class="hljs-title function_">find</span>(conditions, projection, option)<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">populates</span>&lt;T[]&gt;(docsQuery, populates)<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取带分页数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">conditions</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">(any | null)</span>&#125; [projection]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">(&#123;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         sort?: any;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         limit?: number;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         offset?: number;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         page?: number;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         populates?: ModelPopulateOptions[] | ModelPopulateOptions;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         [key: string]: any;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *     </span>&#125;)&#125; [options]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Promise&lt;Paginator&lt;T&gt;&gt;</span>&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">BaseService</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">paginator</span>(<br>    <span class="hljs-attr">conditions</span>: <span class="hljs-built_in">any</span>,<br>    projection?: <span class="hljs-built_in">any</span> | <span class="hljs-literal">null</span>,<br>    options?: &#123;<br>      sort?: <span class="hljs-built_in">any</span><br>      limit?: <span class="hljs-built_in">number</span><br>      offset?: <span class="hljs-built_in">number</span><br>      page?: <span class="hljs-built_in">number</span><br>      populates?: <span class="hljs-title class_">ModelPopulateOptions</span>[] | <span class="hljs-title class_">ModelPopulateOptions</span><br>      [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>    &#125;<br>  ): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Paginator</span>&lt;T&gt;&gt; &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">result</span>: <span class="hljs-title class_">Paginator</span>&lt;T&gt; = &#123;<br>      <span class="hljs-attr">data</span>: [],<br>      <span class="hljs-attr">total</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">limit</span>: options.<span class="hljs-property">limit</span> ? options.<span class="hljs-property">limit</span> : <span class="hljs-number">10</span>,<br>      <span class="hljs-attr">offset</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">page</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">pages</span>: <span class="hljs-number">0</span>,<br>    &#125;<br>    <span class="hljs-keyword">const</span> &#123; offset, page, option &#125; = options<br>    <span class="hljs-keyword">if</span> (offset !== <span class="hljs-literal">undefined</span>) &#123;<br>      result.<span class="hljs-property">offset</span> = options.<span class="hljs-property">offset</span><br>      options.<span class="hljs-property">skip</span> = offset<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (page !== <span class="hljs-literal">undefined</span>) &#123;<br>      result.<span class="hljs-property">page</span> = page<br>      options.<span class="hljs-property">skip</span> = (page - <span class="hljs-number">1</span>) * result.<span class="hljs-property">limit</span><br>      result.<span class="hljs-property">pages</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(result.<span class="hljs-property">total</span> / result.<span class="hljs-property">limit</span>) || <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      options.<span class="hljs-property">skip</span> = <span class="hljs-number">0</span><br>    &#125;<br>    result.<span class="hljs-property">data</span> = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">findAll</span>(conditions, projection, option)<br>    result.<span class="hljs-property">total</span> = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">count</span>(conditions)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(result)<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取单条数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">conditions</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; [projection]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">(&#123;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         lean?: boolean;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         populates?: ModelPopulateOptions[] | ModelPopulateOptions;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         [key: string]: any;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *     </span>&#125;)&#125; [options]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">(Promise&lt;T | null&gt;)</span>&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">BaseService</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">findOne</span>(<br>    <span class="hljs-attr">conditions</span>: <span class="hljs-built_in">any</span>,<br>    projection?: <span class="hljs-built_in">any</span>,<br>    options?: &#123;<br>      lean?: <span class="hljs-built_in">boolean</span><br>      populates?: <span class="hljs-title class_">ModelPopulateOptions</span>[] | <span class="hljs-title class_">ModelPopulateOptions</span><br>      [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>    &#125;<br>  ): <span class="hljs-title class_">Promise</span>&lt;T | <span class="hljs-literal">null</span>&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; option, populates &#125; = options<br>    <span class="hljs-keyword">const</span> docsQuery = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_model</span>.<span class="hljs-title function_">findOne</span>(conditions, projection, option)<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">populates</span>&lt;T&gt;(docsQuery, populates)<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据id获取单条数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">(any | string | number)</span>&#125; <span class="hljs-variable">id</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; [projection]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">(&#123;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         lean?: boolean;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         populates?: ModelPopulateOptions[] | ModelPopulateOptions;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *         [key: string]: any;</span></span><br><span class="hljs-type"><span class="hljs-comment">   *     </span>&#125;)&#125; [options]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">(Promise&lt;T | null&gt;)</span>&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">BaseService</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">findById</span>(<br>    <span class="hljs-attr">id</span>: <span class="hljs-built_in">any</span> | <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>,<br>    projection?: <span class="hljs-built_in">any</span>,<br>    options?: &#123;<br>      lean?: <span class="hljs-built_in">boolean</span><br>      populates?: <span class="hljs-title class_">ModelPopulateOptions</span>[] | <span class="hljs-title class_">ModelPopulateOptions</span><br>      [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>    &#125;<br>  ): <span class="hljs-title class_">Promise</span>&lt;T | <span class="hljs-literal">null</span>&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; option, populates &#125; = options<br>    <span class="hljs-keyword">const</span> docsQuery = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_model</span>.<span class="hljs-title function_">findById</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toObjectId</span>(id), projection, option)<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">populates</span>&lt;T&gt;(docsQuery, populates)<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取指定查询条件的数量</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">conditions</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Promise&lt;number&gt;</span>&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">UserService</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">count</span>(<span class="hljs-attr">conditions</span>: <span class="hljs-built_in">any</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">number</span>&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_model</span>.<span class="hljs-title function_">countDocuments</span>(conditions).<span class="hljs-title function_">exec</span>()<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建一条数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">T</span>&#125; <span class="hljs-variable">docs</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Promise&lt;T&gt;</span>&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">BaseService</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-attr">docs</span>: <span class="hljs-title class_">Partial</span>&lt;T&gt;): <span class="hljs-title class_">Promise</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_model</span>.<span class="hljs-title function_">create</span>(docs)<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 删除指定id数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">id</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Promise&lt;T&gt;</span>&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">BaseService</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">delete</span>(<br>    <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">options</span>: &#123;<br>      <span class="hljs-comment">/** if multiple docs are found by the conditions, sets the sort order to choose which doc to update */</span><br>      sort?: <span class="hljs-built_in">any</span><br>      <span class="hljs-comment">/** sets the document fields to return */</span><br>      select?: <span class="hljs-built_in">any</span><br>    &#125;<br>  ): <span class="hljs-title class_">Promise</span>&lt;T | <span class="hljs-literal">null</span>&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_model</span>.<span class="hljs-title function_">findByIdAndRemove</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toObjectId</span>(id), options).<span class="hljs-title function_">exec</span>()<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 更新指定id数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">id</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Partial&lt;T&gt;</span>&#125; [item=&#123;&#125;]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Promise&lt;T&gt;</span>&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">BaseService</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">update</span>(<br>    <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">update</span>: <span class="hljs-title class_">Partial</span>&lt;T&gt;,<br>    <span class="hljs-attr">options</span>: <span class="hljs-title class_">ModelFindByIdAndUpdateOptions</span> = &#123; <span class="hljs-attr">new</span>: <span class="hljs-literal">true</span> &#125;<br>  ): <span class="hljs-title class_">Promise</span>&lt;T | <span class="hljs-literal">null</span>&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_model</span>.<span class="hljs-title function_">findByIdAndUpdate</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toObjectId</span>(id), update, options).<span class="hljs-title function_">exec</span>()<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 删除所有匹配条件的文档集合</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; [conditions=&#123;&#125;]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Promise&lt;WriteOpResult[&#x27;result&#x27;]&gt;</span>&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">BaseService</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">clearCollection</span>(conditions = &#123;&#125;): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">WriteOpResult</span>[<span class="hljs-string">&#x27;result&#x27;</span>]&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_model</span>.<span class="hljs-title function_">deleteMany</span>(conditions).<span class="hljs-title function_">exec</span>()<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 转换ObjectId</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@private</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">id</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Types.ObjectId</span>&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">BaseService</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">toObjectId</span>(<span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span>): <span class="hljs-title class_">Types</span>.<span class="hljs-property">ObjectId</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Types</span>.<span class="hljs-title class_">ObjectId</span>(id)<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 填充其他模型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@private</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">docsQuery</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">populates</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">(Promise&lt;T | T[] | null&gt;)</span>&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">BaseService</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> populates&lt;R&gt;(docsQuery, populates): <span class="hljs-title class_">Promise</span>&lt;R | <span class="hljs-literal">null</span>&gt; &#123;<br>    <span class="hljs-keyword">if</span> (populates) &#123;<br>      ;[].<span class="hljs-title function_">concat</span>(populates).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        docsQuery.<span class="hljs-title function_">populate</span>(item)<br>      &#125;)<br>    &#125;<br>    <span class="hljs-keyword">return</span> docsQuery.<span class="hljs-title function_">exec</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里说几个上面没有提到的属性和方法：</p><ul><li>_model：当前模型的实例，我们使用它去扩展其他方法，如果上面方法不满足我们需求，我们可以随时自定义</li><li>clearCollection：删除所有匹配条件的文档集合</li><li>toObjectId：字符串 id 转换 ObjectId</li></ul><p>那么我们接下来的<code>UserService</code>就简单多了</p><p>user.service.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BaseService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../base.service&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">InjectModel</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/mongoose&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Model</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mongoose&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.interface&#x27;</span><br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">BaseService</span>&lt;<span class="hljs-title class_">User</span>&gt; &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-meta">@InjectModel</span>(<span class="hljs-string">&#x27;User&#x27;</span>) <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> userModel: Model&lt;User&gt;</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(userModel)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>BaseService</code>是一个泛型，泛型是什么，简单理解就是你传什么它就是什么。<code>T</code>需要把我们<code>User</code>类型传进去,返回都是<code>User</code>类型，使用<code>@InjectModel(&#39;User&#39;)</code>注入模型实例，最后赋值给<code>_model</code>。</p><p>我们现在数据库<code>UserService</code>就已经完成了，接下来就需要定义<code>schema</code>和<code>interface</code>。</p><h4 id="定义-schema"><a href="#定义-schema" class="headerlink" title="定义 schema"></a>定义 schema</h4><p>有了上面服务的经验，现在是不是你会说<code>schema</code>有没有公用的，当然可以呀。</p><p>我们定一个<code>base.schema.ts</code>，思考一下需要抽出来，好像唯一可以抽出来就是：</p><ul><li>create_at：创建时间</li><li>update_at: 更新时间</li></ul><p>这 2 个我们可以用抽出来，可以使用<code>schema</code>配置参数里面的<code>timestamps</code>属性，可以开启它，它默认<code>createdAt</code>和<code>updatedAt</code>。我们修改它们字段名，使用它们好处，创建自动赋值，修改时候自动更新。<br><strong>注意</strong>：它们的存的时间和本地时间相差 8 小时，这个后面说怎么处理。</p><p>那么我们最终的配置就是：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">schemaOptions</span>: <span class="hljs-title class_">SchemaOptions</span> = &#123;<br>  <span class="hljs-attr">toJSON</span>: &#123;<br>    <span class="hljs-attr">virtuals</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">getters</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">timestamps</span>: &#123;<br>    <span class="hljs-attr">createdAt</span>: <span class="hljs-string">&#x27;create_at&#x27;</span>,<br>    <span class="hljs-attr">updatedAt</span>: <span class="hljs-string">&#x27;update_at&#x27;</span>,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p><code>toJSON</code>是做什么的，我们需要开启显示<code>virtuals</code>虚拟数据，<code>getters</code>获取数据。</p><p>关于 schema 定义</p><p>在创建表之前我们需要跟大家说一下 mongoDB 的数据类型，具体数据类型如下：</p><ul><li>字符串 - 这是用于存储数据的最常用的数据类型。<code>MongoDB</code>中的字符串必须为<code>UTF-8</code>。</li><li>整型 - 此类型用于存储数值。 整数可以是 32 位或 64 位，具体取决于服务器。</li><li>布尔类型 - 此类型用于存储布尔值(true / false)值。</li><li>双精度浮点数 - 此类型用于存储浮点值。</li><li>最小/最大键 - 此类型用于将值与最小和最大<code>BSON</code>元素进行比较。</li><li>数组 - 此类型用于将数组或列表或多个值存储到一个键中。</li><li>时间戳 - <code>ctimestamp</code>当文档被修改或添加时，可以方便地进行录制。</li><li>对象 - 此数据类型用于嵌入式文档。</li><li>对象 - 此数据类型用于嵌入式文档。</li><li>Null - 此类型用于存储 Null 值。</li><li>符号 - 该数据类型与字符串相同; 但是，通常保留用于使用特定符号类型的语言。</li><li>日期 - 此数据类型用于以 UNIX 时间格式存储当前日期或时间。您可以通过创建日期对象并将日，月，年的日期进行指定自己需要的日期时间。</li><li>对象 ID - 此数据类型用于存储文档的 ID。</li><li>二进制数据 - 此数据类型用于存储二进制数据。</li><li>代码 - 此数据类型用于将 JavaScript 代码存储到文档中。</li><li>正则表达式 - 此数据类型用于存储正则表达式。</li></ul><p><code>mongoose</code>使用<code>Schema</code>所定义的数据模型，再使用<code>mongoose.model(modelName, schema)</code>将定义好的<code>Schema</code>转换为<code>Model</code>。<br>在<code>Mongoose</code>的设计理念中，<code>Schema</code>用来也只用来定义数据结构，具体对数据的增删改查操作都由<code>Model</code>来执行</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Schema</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mongoose&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">UserSchema</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>  <span class="hljs-comment">// 定义你的Schema</span><br>&#125;)<br><span class="hljs-title class_">UserSchema</span>.<span class="hljs-title function_">index</span>() <span class="hljs-comment">// 索引</span><br><span class="hljs-title class_">UserSchema</span>.<span class="hljs-title function_">virtual</span>() <span class="hljs-comment">// 虚拟值</span><br><span class="hljs-title class_">UserSchema</span>.<span class="hljs-title function_">pre</span>() <span class="hljs-comment">// 中间件</span><br><span class="hljs-title class_">UserSchema</span>.<span class="hljs-property">methods</span>.<span class="hljs-property">xxx</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125; <span class="hljs-comment">// 实例方法</span><br><span class="hljs-title class_">UserSchema</span>.<span class="hljs-property">statics</span>.<span class="hljs-property">xxx</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125; <span class="hljs-comment">// 静态方法</span><br><span class="hljs-title class_">UserSchema</span>.<span class="hljs-property">query</span>.<span class="hljs-property">xxx</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125; <span class="hljs-comment">// 查询助手</span><br><span class="hljs-title class_">UserSchema</span>.<span class="hljs-property">query</span>.<span class="hljs-property">xxx</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125; <span class="hljs-comment">// 查询助手</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：这里面都要使用普通函数<code>function()&#123;&#125;</code>，不能使用<code>()=&gt;&#123;&#125;</code>，原因你懂的。</p></blockquote><p>user.schema.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 引入mongoose包</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Schema</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mongoose&#x27;</span>;<br><span class="hljs-comment">// 一个工具包，使用MD5方法加密</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> utility <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;utility&#x27;</span>;<br><span class="hljs-comment">// 引入user接口</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.interface&#x27;</span>;<br><br><span class="hljs-comment">// 定义schema并导出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">UserSchema</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>    <span class="hljs-attr">name</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>    <span class="hljs-attr">loginname</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>    <span class="hljs-attr">pass</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>    <span class="hljs-attr">email</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>    <span class="hljs-attr">url</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>    <span class="hljs-attr">profile_image_url</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>    <span class="hljs-attr">location</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>    <span class="hljs-attr">signature</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>    <span class="hljs-attr">profile</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>    <span class="hljs-attr">weibo</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>    <span class="hljs-attr">avatar</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>    <span class="hljs-attr">githubId</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>    <span class="hljs-attr">githubUsername</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>    <span class="hljs-attr">githubAccessToken</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;,<br>    <span class="hljs-attr">is_block</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">Boolean</span>, <span class="hljs-attr">default</span>: <span class="hljs-literal">false</span> &#125;,<br>    ...<br>&#125;, schemaOptions);<br><br><span class="hljs-comment">// 设置索引</span><br><span class="hljs-title class_">UserSchema</span>.<span class="hljs-title function_">index</span>(&#123; <span class="hljs-attr">loginname</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">unique</span>: <span class="hljs-literal">true</span> &#125;);<br><span class="hljs-title class_">UserSchema</span>.<span class="hljs-title function_">index</span>(&#123; <span class="hljs-attr">email</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">unique</span>: <span class="hljs-literal">true</span> &#125;);<br><span class="hljs-title class_">UserSchema</span>.<span class="hljs-title function_">index</span>(&#123; <span class="hljs-attr">score</span>: -<span class="hljs-number">1</span> &#125;);<br><span class="hljs-title class_">UserSchema</span>.<span class="hljs-title function_">index</span>(&#123; <span class="hljs-attr">githubId</span>: <span class="hljs-number">1</span> &#125;);<br><span class="hljs-title class_">UserSchema</span>.<span class="hljs-title function_">index</span>(&#123; <span class="hljs-attr">accessToken</span>: <span class="hljs-number">1</span> &#125;);<br><br><span class="hljs-comment">// 设置虚拟属性</span><br><span class="hljs-title class_">UserSchema</span>.<span class="hljs-title function_">virtual</span>(<span class="hljs-string">&#x27;avatar_url&#x27;</span>).<span class="hljs-title function_">get</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> url =<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">avatar</span> ||<br>        <span class="hljs-string">`https://gravatar.com/avatar/<span class="hljs-subst">$&#123;utility.md5(<span class="hljs-variable language_">this</span>.email.toLowerCase())&#125;</span>?size=48`</span>;<br><br>    <span class="hljs-comment">// www.gravatar.com 被墙</span><br>    url = url.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;www.gravatar.com&#x27;</span>, <span class="hljs-string">&#x27;gravatar.com&#x27;</span>);<br><br>    <span class="hljs-comment">// 让协议自适应 protocol，使用 `//` 开头</span><br>    <span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;http:&#x27;</span>) === <span class="hljs-number">0</span>) &#123;<br>        url = url.<span class="hljs-title function_">slice</span>(<span class="hljs-number">5</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 如果是 github 的头像，则限制大小</span><br>    <span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;githubusercontent&#x27;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>        url += <span class="hljs-string">&#x27;&amp;s=120&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> url;<br>&#125;);<br>...<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：这里面使用<code>utility</code>工具包，需要安装一下，<code>npm install utility --save</code>。</p></blockquote><h4 id="定义-interface"><a href="#定义-interface" class="headerlink" title="定义 interface"></a>定义 interface</h4><p>因为有些公共的字段，我们在定义<code>interface</code>时候也需要抽离出来。使用<code>base.interface.ts</code></p><p>base.interface.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Document</span>, <span class="hljs-title class_">Types</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mongoose&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BaseInterface</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Document</span> &#123;<br>  <span class="hljs-attr">_id</span>: <span class="hljs-title class_">Types</span>.<span class="hljs-property">ObjectId</span> <span class="hljs-comment">// mongodb id</span><br>  <span class="hljs-attr">id</span>: <span class="hljs-title class_">Types</span>.<span class="hljs-property">ObjectId</span> <span class="hljs-comment">// mongodb id</span><br>  <span class="hljs-attr">create_at</span>: <span class="hljs-title class_">Date</span> <span class="hljs-comment">// 创建时间</span><br>  <span class="hljs-attr">update_at</span>: <span class="hljs-title class_">Date</span> <span class="hljs-comment">// 更新时间</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>interface</code> 文件内容和 <code>schema</code> 的基本一样，只需要字段名和类型就好了。</p><p>user.interface.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BaseInterface</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../base.interface&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseInterface</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;  <span class="hljs-comment">// 显示名字</span><br>    <span class="hljs-attr">loginname</span>: <span class="hljs-built_in">string</span>;  <span class="hljs-comment">// 登录名</span><br>    <span class="hljs-attr">pass</span>: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 密码</span><br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;  <span class="hljs-comment">// 年龄</span><br>    <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;  <span class="hljs-comment">// 邮箱</span><br>    <span class="hljs-attr">active</span>: <span class="hljs-built_in">boolean</span>;  <span class="hljs-comment">// 是否激活</span><br>    <span class="hljs-attr">collect_topic_count</span>: <span class="hljs-built_in">number</span>;  <span class="hljs-comment">// 收集话题数</span><br>    <span class="hljs-attr">topic_count</span>: <span class="hljs-built_in">number</span>;  <span class="hljs-comment">// 发布话题数</span><br>    <span class="hljs-attr">score</span>: <span class="hljs-built_in">number</span>;   <span class="hljs-comment">// 积分</span><br>    <span class="hljs-attr">is_star</span>: <span class="hljs-built_in">boolean</span>;  <span class="hljs-comment">//</span><br>    <span class="hljs-attr">is_block</span>: <span class="hljs-built_in">boolean</span>; <span class="hljs-comment">// 是否黑名单</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：如果是<code>schema</code>里面不是定义必填或者有默认值的字段，需要这样写<code>is_admin?: boolean;</code>，<code>?</code>表示该字段可选的。最好在<code>interface</code>里面写上每个字段加上注释，方便查看。</p></blockquote><h4 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h4><p>默认生产的模块文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [],<br>  <span class="hljs-attr">providers</span>: [],<br>  <span class="hljs-attr">exports</span>: [],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>上面<code>schema</code>和<code>service</code>，都定义好了，接下来我们需要在模块里面注册。</p><p>user.module.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><br><span class="hljs-comment">// 引入 nestjs 提供的 mongoose 模块</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MongooseModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/mongoose&#x27;</span><br><br><span class="hljs-comment">// 引入自己写的 schema 和 service 在模块里面注册</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserSchema</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.schema&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.service&#x27;</span><br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">MongooseModule</span>.<span class="hljs-title function_">forFeature</span>([&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User&#x27;</span>, <span class="hljs-attr">schema</span>: <span class="hljs-title class_">UserSchema</span> &#125;])],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">UserService</span>],<br>  <span class="hljs-attr">exports</span>: [<span class="hljs-title class_">UserService</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p><code>forFeature([&#123; name: &#39;User&#39;, schema: UserSchema &#125;])</code>就是<code>MongooseModule</code>为什么提供的<code>mongoose.model(modelName, schema)</code>操作</p><blockquote><p><strong>注意</strong>：<code>providers</code>是注册服务，如果想要给其他模块使用，需要在<code>exports</code>导出。</p></blockquote><h4 id="定义索引文件"><a href="#定义索引文件" class="headerlink" title="定义索引文件"></a>定义索引文件</h4><p>index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.module&#x27;</span><br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.interface&#x27;</span><br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.service&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：不是所有的文件都需要导出的，一些关键的文件，其他模块需要使用的，如果<code>interface</code>、<code>service</code>都是需要导出的。</p></blockquote><p>其他文件访问</p><p>xxx.service.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserService</span>, <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user&#x27;</span><br></code></pre></td></tr></table></figure><p>是不是很方便。</p><h3 id="shared-模块和-mongodb-模块"><a href="#shared-模块和-mongodb-模块" class="headerlink" title="shared 模块和 mongodb 模块"></a>shared 模块和 mongodb 模块</h3><h4 id="mongodb-模块"><a href="#mongodb-模块" class="headerlink" title="mongodb 模块"></a>mongodb 模块</h4><p><code>mongodb</code>模块是管理所有<code>mongodb</code>文件夹里模块导入导出</p><p>mongodb.module.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user&#x27;</span><br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">UserModule</span>],<br>  <span class="hljs-attr">exports</span>: [<span class="hljs-title class_">UserModule</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MongodbModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>建立索引文件<code>index.ts</code>导出<code>mongodb</code>文件夹下所有文件夹</p></blockquote><h4 id="shared-模块"><a href="#shared-模块" class="headerlink" title="shared 模块"></a>shared 模块</h4><p><code>shared</code>模块是管理所有<code>shared</code>文件夹里模块导入导出</p><p>shared.module.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MongodbModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mongodb&#x27;</span><br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">MongodbModule</span>],<br>  <span class="hljs-attr">exports</span>: [<span class="hljs-title class_">MongodbModule</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SharedModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>建立索引文件<code>index.ts</code>导出<code>shared</code>文件夹下所有文件夹</p></blockquote><p>到这里我们<code>user</code>数据表模块就基本完成了，接下来就需要使用它们。我们也可以运行<code>npm run start:dev</code>，不会出现任何错误，如果有错，请检查你的文件是否正确。如果找不到问题，可以联系我。</p><p><strong>注意</strong>：后面我们搭建数据库就不再如此详细说明，只是一笔带过，大家可以看源码。</p><h2 id="注册和使用node-mailer发送邮件"><a href="#注册和使用node-mailer发送邮件" class="headerlink" title="注册和使用node-mailer发送邮件"></a>注册和使用<code>node-mailer</code>发送邮件</h2><p>如果有用户模块功能，登陆注册应该说是必备的入门功能。</p><p>先说一下我们登陆注册逻辑：</p><ol><li>我们主要使用<code>passport、passport-github、passport-local</code>这三个模块，做身份认证。</li><li>支持本地注册登陆和<code>github</code>第三方认证登陆（后面会介绍 github 认证登陆怎么玩）</li><li>使用<code>session</code>和<code>cookie</code>，30 天内免登陆</li><li>退出后清除<code>session</code>和<code>cookie</code></li><li>支持电子邮箱找回密码</li></ol><p>这里注册、登录、登出、找回密码都放在这个模块里面</p><h3 id="生成文件-1"><a href="#生成文件-1" class="headerlink" title="生成文件"></a>生成文件</h3><ol><li>创建<code>feature</code>模块</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest generate module feature<br>OR<br>$ nest g mo feature<br></code></pre></td></tr></table></figure><ol><li>创建<code>auth</code>模块</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest generate module feature/auth<br>OR<br>$ nest g mo feature/auth<br></code></pre></td></tr></table></figure><ol><li>创建<code>auth</code>服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest generate service feature/auth<br>OR<br>$ nest g s feature/auth<br></code></pre></td></tr></table></figure><ol><li>创建<code>auth</code>控制器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest generate controller feature/auth<br>OR<br>$ nest g co feature/auth<br></code></pre></td></tr></table></figure><ol><li>创建<code>auth</code>的<code>dto</code></li></ol><p>dto 是字段参数验证的验证类，需要配合各种功能，等下会讲解。</p><p>最后完整的<code>auth</code>文件夹是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">index.ts<br>auth.module.ts<br>auth.service.ts<br>auth.controller.ts<br>dto<br></code></pre></td></tr></table></figure><blockquote><p>基本所有的<code>feature</code>模块都是这样的结构，后面不在介绍<code>生成文件</code>这项。</p></blockquote><h3 id="科普知识：async-await"><a href="#科普知识：async-await" class="headerlink" title="科普知识：async/await"></a>科普知识：async/await</h3><p><code>ES7</code>发布<code>async/await</code>，也算是异步的解决又一种方案，</p><p>看一个简单的栗子：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">sleep</span> = time =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>()<br>    &#125;, time)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">start</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 在这里使用起来就像同步代码那样直观</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;start&#x27;</span>)<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-number">3000</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;end&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> startFor = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`当前是第<span class="hljs-subst">$&#123;i&#125;</span>次等待..`</span>)<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">start</span>()<br><br><span class="hljs-comment">// startFor();</span><br></code></pre></td></tr></table></figure><blockquote><p>控制台先输出<code>start</code>，稍等<code>3</code>秒后，输出了<code>end</code>。</p></blockquote><p>看栗子也能知道<code>async/await</code>基本使用规则和条件</p><ol><li><code>async</code> 表示这是一个<code>async</code>函数，<code>await</code>只能用在这个函数里面</li><li><code>await</code> 表示在这里等待<code>promise</code>返回结果了，再继续执行。</li><li><code>await</code> 等待的虽然是<code>promise</code>对象，但不必写<code>.then(..)</code>，直接可以得到返回值。</li><li>捕捉错误可以直接用标准的<code>try catch</code>语法捕捉错误</li><li>循环多个<code>await</code> 可以写在 for 循环里，不必担心以往需要<code>闭包</code>才能解决的问题 (注意不能使用<code>forEach</code>,只可以用<code>for/for-of</code>)</li></ol><blockquote><p><strong>注意</strong>：<code>await</code>必须在<code>async</code>函数的上下文中</p></blockquote><p>在开始之前，前面数据操作有基础服务抽象类，这里控制器和服务也可以抽象出来。是可以抽象出来，但是本项目不决定这么来做，但会做一些抽象的辅助工具。</p><h3 id="auth-模块"><a href="#auth-模块" class="headerlink" title="auth 模块"></a>auth 模块</h3><p>auth.module.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-comment">// 引入共享模块 访问user数据库</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">SharedModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;shared&#x27;</span><br><span class="hljs-comment">// 引入控制和服务进行在模块注册</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./auth.service&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthController</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./auth.controller&#x27;</span><br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">SharedModule</span>],<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">AuthController</span>],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">AuthService</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>： <code>feature</code> 模块尽量不要导出服务，避免循环依赖。</p></blockquote><h3 id="feature-模块"><a href="#feature-模块" class="headerlink" title="feature 模块"></a>feature 模块</h3><p>feature.module.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-comment">// 引入Auth模块导入导出</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./auth/auth.module&#x27;</span><br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">AuthModule</span>],<br>  <span class="hljs-attr">exports</span>: [<span class="hljs-title class_">AuthModule</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeatureModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>： <code>feature</code> 模块功能就是导入导出所以的业务模块。</p></blockquote><h3 id="app-模块"><a href="#app-模块" class="headerlink" title="app 模块"></a>app 模块</h3><p>如果是按我顺序用命令行创建的文件，<code>feature</code> 模块会自动添加到 <code>APP</code> 模块里面，<br>如果不是，需要手动把 <code>feature</code> 模块引入到 <code>APP</code> 模块里面。</p><p>app.module.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-comment">// 引入核心模块 只能在AppModule导入，nest 没有 angular 模块检查机制，只能自觉遵守吧。</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CoreModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./core/core.module&#x27;</span>;<br><span class="hljs-comment">// 引入特性模块</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FeatureModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;feature&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">CoreModule</span>,<br>    <span class="hljs-title class_">FeatureModule</span>，<br>  ],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123; &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<code>APP</code> 模块不需要引入 <code>shared</code> 模块，<code>shared</code> 模式给业务模块引用的，<code>APP</code> 模块只需要引入 <code>CoreModule</code>, <code>feature</code> 模块就可以了。</p></blockquote><h3 id="auth-控制器"><a href="#auth-控制器" class="headerlink" title="auth 控制器"></a>auth 控制器</h3><p>默认控制器文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><br><span class="hljs-meta">@Controller</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p>要想登录，就要先注册，那我们先从注册开始。</p><p>auth.controller.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123;<br>    ...<br>    <span class="hljs-title class_">Get</span>,<br>    <span class="hljs-title class_">Render</span><br> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><br><span class="hljs-meta">@Controller</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;<br>    <span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;/register&#x27;</span>)<br>    <span class="hljs-meta">@Render</span>(<span class="hljs-string">&#x27;auth/register&#x27;</span>)<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">registerView</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">pageTitle</span>: <span class="hljs-string">&#x27;注册&#x27;</span> &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>前面介绍控制器时候已经介绍了<code>Get</code>，那么<code>Render</code>是什么，渲染模板，对应是<code>Express</code>的<code>res.render(&#39;xxxx&#39;);</code>方法。</p><p><strong>提示</strong>：</p><ol><li>关于控制器方法命名方式，因为本项目是服务的渲染的，所有会有模板页面和页面请求。模板页面统一加上<code>View</code>后缀</li><li>模板页面请求都是<code>get</code>，返回数据会带一个必须字段<code>pageTitle</code>，当前页面的<code>title</code>标签使用。</li><li>页面请求方法命名根据实际情况来。</li></ol><p>现在就可以运行开发启动命令看看效果，百分之两百的会报错，为什么？因为找不到模板<code>auth/register.ejs</code>文件。</p><p>那我们就去<code>views</code>下去创建一个<code>auth/register.ejs</code>，随便写的什么，在运行就可以了，浏览器访问：<code>http://localhost:3000/register</code>。</p><p><a href="https://user-images.githubusercontent.com/6111778/50327748-4d4aef80-052b-11e9-8f33-7012966a5f0b.png"><img src="https://user-images.githubusercontent.com/6111778/50327748-4d4aef80-052b-11e9-8f33-7012966a5f0b.png" alt="2"></a></p><p>我们需要完善里面的内容了，因为<code>cnode</code><br>屏蔽注册功能，全部走<code>github</code>第三方认证登录，所以看不到<code>https://cnodejs.org/signin</code>这个页面，那么我们可以在<a href="https://github.com/cnodejs/egg-cnode/blob/master/app/view/sign/signup.html">源码</a>找到这个页面结构，直接拷贝<code>div#content</code>里的内容过来。</p><p>一刷新就页面报错了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;statusCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">500</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Internal server error&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>查看命令行提示：j</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Nest] 22132   - 2018-9-4 16:21:11   [ExceptionsHandler] E:\github\nest-cnode\views\auth\register.html:61<br>    59|                         &lt;% &#125; %&gt;<br>    60|                     &lt;/div&gt;<br> &gt;&gt; 61|                 &lt;/div&gt;<br>    62|                 &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;hidden&#x27;</span> name=<span class="hljs-string">&#x27;_csrf&#x27;</span> value=<span class="hljs-string">&#x27;&lt;%= csrf %&gt;&#x27;</span> /&gt;<br>    63|<br>    64|                 &lt;div class=<span class="hljs-string">&#x27;form-actions&#x27;</span>&gt;<br><br>csrf is not defined<br></code></pre></td></tr></table></figure><p>提示我们<code>csrf</code>这个变量找不到。<code>csrf</code>是什么，<br>跨站请求伪造(CSRF 或 XSRF)是一种恶意利用的网站,未经授权的命令是传播从一个 web 应用程序的用户信任。<br>减轻这种攻击可以使用<code>csurf</code>包。这里有篇文章<a href="https://cnodejs.org/topic/5533dd6e9138f09b629674fd">浅谈 cnode 社区如何防止 csrf 攻击</a></p><p>安装所需的包:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i --save csurf<br></code></pre></td></tr></table></figure><p>在入口文件启动函数里面使用它。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> csurf <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;csurf&#x27;</span>;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>, application);<br>  ...<br>  <span class="hljs-comment">// 防止跨站请求伪造</span><br>  app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">csurf</span>(&#123; <span class="hljs-attr">cookie</span>: <span class="hljs-literal">true</span> &#125;));<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>直接这么写肯定有问题，刷新页面控制台报错<code>Error: misconfigured csrf</code></p><p>下面来说个我经常解决问题方法：</p><ol><li>首先如果我们用的<code>github</code>的开源依赖包，我们把这个错误复制到它的<code>issues</code>的搜索框里，如果有类似的问题，就进去看看，能不能找到解决方案，如果没有一个问题，你就可以提<code>issues</code>。</li></ol><p>把你的问题的和环境依赖、最好有示例代码，越详细越好，运气好马上有人给你解决问题。</p><ol><li>搜索引擎解决问题比如：谷歌、必应、百度。如果有条件首选谷歌，没条件优先必应，其次百度。也是把问题直接复制到输入框，回车就好有一些类似的答案。</li><li>就是去一些相关社区提问，和<code>1</code>一样，把问题描述清楚。</li></ol><p>使用必应搜索，发现结果第一个就是问题，和我们一模一样的。</p><p><a href="https://user-images.githubusercontent.com/6111778/50327760-563bc100-052b-11e9-888d-96abd6977499.png"><img src="https://user-images.githubusercontent.com/6111778/50327760-563bc100-052b-11e9-888d-96abd6977499.png" alt="3"></a></p><p>点击链接进去的，有人回复一个收到好评最高，说<code>app.use(csurf())</code>要在<code>app.use(cookieParser())</code>和<code>app.use(session(&#123;...&#125;)</code>之后执行。</p><p>其实我们的这个问题，在<a href="https://github.com/expressjs/csurf">csurf</a>说明文档里面已经有写了，使用之前必须依赖<code>cookieParser</code>和<code>session</code>中间件。</p><p><code>session</code>中间件可以选择<a href="https://www.npmjs.com/package/express-session">express-session</a>和<a href="https://www.npmjs.com/package/cookie-session">cookie-session</a></p><p>我们需要安装 2 个中间件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i --save cookie-parser express-session connect-redis<br></code></pre></td></tr></table></figure><p>在入口文件启动函数里面使用它。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> cookieParser <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cookie-parser&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> expressSession <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express-session&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> connectRedis <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;connect-redis&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> csurf <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;csurf&#x27;</span>;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>, application);<br>  ...<br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">RedisStore</span> = <span class="hljs-title function_">connectRedis</span>(expressSession);<br>  <span class="hljs-keyword">const</span> secret = config.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;SESSION_SECRET&#x27;</span>);<br>  <span class="hljs-comment">// 注册session中间件</span><br>  app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">expressSession</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jiayi&#x27;</span>,<br>    secret,  <span class="hljs-comment">// 用来对sessionid 相关的 cookie 进行签名</span><br>    <span class="hljs-attr">store</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisStore</span>(<span class="hljs-title function_">getRedisConfig</span>(config)),  <span class="hljs-comment">// 本地存储session（文本文件，也可以选择其他store，比如redis的）</span><br>    <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span>,  <span class="hljs-comment">// 是否自动保存未初始化的会话，建议false</span><br>    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,  <span class="hljs-comment">// 是否每次都重新保存会话，建议false</span><br>  &#125;));<br>  <span class="hljs-comment">// 注册cookies中间件</span><br>  app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieParser</span>(secret));<br>  <span class="hljs-comment">// 防止跨站请求伪造</span><br>  app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">csurf</span>(&#123; <span class="hljs-attr">cookie</span>: <span class="hljs-literal">true</span> &#125;));<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>里面有注释，这里就不解释了。</p><p>现在刷新还是一样报错<code>csrf is not defined</code>。</p><p>上面已经 ok，现在是没有这个变量，我们去<code>registerView</code>方法返回值里面加上</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">async</span> <span class="hljs-title function_">registerView</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">pageTitle</span>: <span class="hljs-string">&#x27;注册&#x27;</span>, <span class="hljs-attr">csrf</span>: <span class="hljs-string">&#x27;&#x27;</span> &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>key 是<code>csrf</code>，value 随便写，返回最后都会被替换的。</p><p><a href="https://user-images.githubusercontent.com/6111778/50327790-71a6cc00-052b-11e9-84c7-0585c605653a.png"><img src="https://user-images.githubusercontent.com/6111778/50327790-71a6cc00-052b-11e9-84c7-0585c605653a.png" alt="4"></a></p><p>如果每次都要写一个那就比较麻烦了，需要写一个中间件来解决问题。</p><p>在入口文件启动函数里面使用它。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>, application);<br>  ...<br>  <span class="hljs-comment">// 设置变量 csrf 保存csrfToken值</span><br>  app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req: <span class="hljs-built_in">any</span>, res, next</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-property">locals</span>.<span class="hljs-property">csrf</span> = req.<span class="hljs-property">csrfToken</span> ? req.<span class="hljs-title function_">csrfToken</span>() : <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-title function_">next</span>();<br>  &#125;);<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>在刷新又报了另外一个错误：<code>ForbiddenError: invalid csrf token</code>。验证<code>token</code>失败。</p><p>文档里面也有，读取令牌从以下位置,按顺序:</p><ul><li><code>req.body._csrf</code> - typically generated by the <code>body-parser</code> module.</li><li><code>req.query._csrf</code> - a built-in from Express.js to read from the URL query string.</li><li><code>req.headers[&#39;csrf-token&#39;]</code> - the CSRF-Token HTTP request header.</li><li><code>req.headers[&#39;xsrf-token&#39;]</code> - the XSRF-Token HTTP request header.</li><li><code>req.headers[&#39;x-csrf-token&#39;]</code> - the X-CSRF-Token HTTP request header.</li><li><code>req.headers[&#39;x-xsrf-token&#39;]</code> - the X-XSRF-Token HTTP request header.</li></ul><p>前端向后端提交数据，常用有 2 种方式，<code>form</code>和<code>ajax</code>。<code>ajax</code>无刷新，这个比较常用，基本是主流操作了。<code>form</code>是服务端渲染使用比较多，不需要 js 处理直接提交，我们项目大部分都是<code>form</code>直接提交。</p><p>一般服务端渲染常用就 2 种请求，<code>get</code>打开一个页面，<code>post</code>直接<code>form</code>提交。</p><p><code>post</code>提交都是把数据放在<code>body</code>体里面，<code>Express</code>，解析<code>body</code>需要借助中间件<code>body-parser</code>。</p><p><code>nest</code>已经自带<code>body-parser</code>配置。但是我发现好像有 bug，原因不明，给作者提<a href="https://github.com/nestjs/nest/issues/1052">issues</a></p><p>作者回复速度很快，需要调用<code>app.init()</code>初始化才行。</p><p>还有一个重要的东西<code>layout.html</code>模板需要加上<code>csrf</code>这个变量。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&lt;%= csrf %&gt;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;csrf-token&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>接下来要写表单验证了：</p><p>我们在<code>dto</code>文件夹里面创建一个<code>register.dto.ts</code>和<code>index.ts</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">touch</span> src/feature/auth/dto/register.dto.ts<br>$ <span class="hljs-built_in">touch</span> src/feature/auth/dto/index.ts<br>OR<br>编辑器新建文件register.dto.ts<br>编辑器新建文件index.ts<br></code></pre></td></tr></table></figure><p><code>register.dto.ts</code>是一个导出的类，typescript 类型，可以是<code>class</code>，可以<code>interface</code>，推荐<code>class</code>，因为它不光可以定义类型，还可以初始化数据。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterDto</span> &#123;<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">loginname</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">pass</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">re_pass</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">_csrf</span>: <span class="hljs-built_in">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>什么叫<code>dto</code>, 全称数据传输对象（DTO)(Data Transfer Object)，简单来说<code>DTO</code>是面向界面<code>UI</code>，是通过<code>UI</code>的需求来定义的。通过<code>DTO</code>我们实现了控制器与数据验证转化解耦。</p><p><code>dto</code>中定义属性就是我们要提交的数据，控制器里面这样获取他们。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;/register&#x27;</span>)<br><span class="hljs-meta">@Render</span>(<span class="hljs-string">&#x27;auth/register&#x27;</span>)<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">register</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() register: RegisterDto</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">register</span>(register);<br>&#125;<br></code></pre></td></tr></table></figure><p>这样是不是很普通，也没有太大用处。如果真的是这样的，我就不会写出来了。如果我提交数据之前需要验证字段合法性怎么办。<code>nest</code>也为我们想到了，使用官方提供的<code>ValidationPipe</code>，并安装 2 个必须的依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i --save class-validator class-transformer<br></code></pre></td></tr></table></figure><p>因为数据验证是非常通用的，我们需要在入口文件里全局去注册管道。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>, application);<br>  ...<br>  <span class="hljs-comment">// 注册并配置全局验证管道</span><br>  app.<span class="hljs-title function_">useGlobalPipes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidationPipe</span>(&#123;<br>    <span class="hljs-attr">transform</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">whitelist</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">forbidNonWhitelisted</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">skipMissingProperties</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">forbidUnknownValues</span>: <span class="hljs-literal">true</span>,<br>  &#125;));<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>配置信息官网都有介绍，说一个重点，<code>transform</code>是转换数据，配合<code>class-transformer</code>使用。</p></blockquote><p>开始写验证规则，对于这些装饰器使用方法，可以看文档也可以看<code>.d.ts</code>文件。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ts">...<br><span class="hljs-meta">@IsNotEmpty</span>(&#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;用户名不能为空&#x27;</span>,<br>    &#125;)<br>    <span class="hljs-meta">@Matches</span>(<span class="hljs-regexp">/^[a-zA-Z0-9\-_]&#123;5, 20&#125;$/i</span>, &#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;用户名不合法&#x27;</span>,<br>    &#125;)<br>    <span class="hljs-meta">@Transform</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value.<span class="hljs-title function_">toLowerCase</span>(), &#123; <span class="hljs-attr">toClassOnly</span>: <span class="hljs-literal">true</span> &#125;)<br>    <span class="hljs-keyword">readonly</span> <span class="hljs-attr">loginname</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-meta">@IsNotEmpty</span>(&#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;邮箱不能为空&#x27;</span>,<br>    &#125;)<br>    <span class="hljs-meta">@IsEmail</span>(&#123;&#125;, &#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;邮箱不合法&#x27;</span>,<br>    &#125;)<br>    <span class="hljs-meta">@Transform</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value.<span class="hljs-title function_">toLowerCase</span>(), &#123; <span class="hljs-attr">toClassOnly</span>: <span class="hljs-literal">true</span> &#125;)<br>    <span class="hljs-keyword">readonly</span> <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-meta">@IsNotEmpty</span>(&#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;密码不能为空&#x27;</span>,<br>    &#125;)<br>    <span class="hljs-meta">@IsByteLength</span>(<span class="hljs-number">6</span>, <span class="hljs-number">18</span>, &#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;密码长度不是6-18位&#x27;</span>,<br>    &#125;)<br>    <span class="hljs-keyword">readonly</span> <span class="hljs-attr">pass</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-meta">@IsNotEmpty</span>(&#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;确认密码不能为空&#x27;</span>,<br>    &#125;)<br>    <span class="hljs-keyword">readonly</span> <span class="hljs-attr">re_pass</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-meta">@IsOptional</span>()<br>    <span class="hljs-keyword">readonly</span> _csrf?: <span class="hljs-built_in">string</span>;<br>...<br></code></pre></td></tr></table></figure><ul><li><code>IsNotEmpty</code>不能为空</li><li><code>Matches</code>使用正则表达式</li><li><code>Transform</code>转化数据，这里把英文转成小写。</li></ul><p>发现一个问题，默认的提供的<code>NotEquals、Equals</code>只能验证一个写死的值，那么我验证确认密码怎么办，这是动态的。我想到一个简单粗暴的方式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Transform</span>(<span class="hljs-function">(<span class="hljs-params">value, obj</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">pass</span> === value) &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;PASSWORD_INCONSISTENCY&#x27;</span>;<br>&#125;, &#123; <span class="hljs-attr">toClassOnly</span>: <span class="hljs-literal">true</span> &#125;)<br><span class="hljs-meta">@NotEquals</span>(<span class="hljs-string">&#x27;PASSWORD_INCONSISTENCY&#x27;</span>, &#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;两次密码输入不一致。&#x27;</span>,<br>&#125;)<br></code></pre></td></tr></table></figure><p>先用转化装饰器，去判断，<code>obj</code>拿到就当前实例类，然后去取它对应属性和当前的值对比，如果是相等就直接返回，如果不是就返回一个标识，再用<code>NotEquals</code>去判断。</p><p>这样写不是很友好，我们需要自定义一个装饰器来完成这个功能。</p><p>在 core 新建<code>decorators</code>文件夹下建<code>validator.decorators.ts</code>文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; registerDecorator, <span class="hljs-title class_">ValidationOptions</span>, <span class="hljs-title class_">ValidationArguments</span>, <span class="hljs-title class_">Validator</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;class-validator&#x27;</span><br><span class="hljs-keyword">import</span> &#123; get &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span><br><br><span class="hljs-keyword">const</span> validator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Validator</span>()<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">IsEqualsThan</span>(<span class="hljs-params">property: <span class="hljs-built_in">string</span>[] | <span class="hljs-built_in">string</span>, validationOptions?: ValidationOptions</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">object</span>: <span class="hljs-built_in">object</span>, propertyName: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">registerDecorator</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;IsEqualsThan&#x27;</span>,<br>      <span class="hljs-attr">target</span>: <span class="hljs-built_in">object</span>.<span class="hljs-property">constructor</span>,<br>      propertyName,<br>      <span class="hljs-attr">constraints</span>: [property],<br>      <span class="hljs-attr">options</span>: validationOptions,<br>      <span class="hljs-attr">validator</span>: &#123;<br>        <span class="hljs-title function_">validate</span>(<span class="hljs-attr">value</span>: <span class="hljs-built_in">any</span>, <span class="hljs-attr">args</span>: <span class="hljs-title class_">ValidationArguments</span>): <span class="hljs-built_in">boolean</span> &#123;<br>          <span class="hljs-comment">// 拿到要比较的属性名或者路径 参考`lodash#get`方法</span><br>          <span class="hljs-keyword">const</span> [comparativePropertyName] = args.<span class="hljs-property">constraints</span><br>          <span class="hljs-comment">// 拿到要比较的属性值</span><br>          <span class="hljs-keyword">const</span> comparativeValue = <span class="hljs-title function_">get</span>(args.<span class="hljs-property">object</span>, comparativePropertyName)<br>          <span class="hljs-comment">// 返回false 验证失败</span><br>          <span class="hljs-keyword">return</span> validator.<span class="hljs-title function_">equals</span>(value, comparativeValue)<br>        &#125;,<br>      &#125;,<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>官方文字里面有栗子：直接拷贝过来就行了，改改就好。我们需要改的就是<code>name</code>和<code>validate</code>函数里面的内容，</p><p><code>validate</code>函数返回 true 验证成功，false 验证失败，返回错误消息。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts">...<br><span class="hljs-meta">@IsNotEmpty</span>(&#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;确认密码不能为空&#x27;</span>,<br>&#125;)<br><span class="hljs-meta">@IsEqualsThan</span>(<span class="hljs-string">&#x27;pass&#x27;</span>, &#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;两次密码输入不一致。&#x27;</span>,<br>&#125;)<br><span class="hljs-keyword">readonly</span> <span class="hljs-attr">re_pass</span>: <span class="hljs-built_in">string</span>;<br>...<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<code>IsEqualsThan</code>第一个参数参考[lodash#get(<a href="https://lodash.com/docs/4.17.10#get">https://lodash.com/docs/4.17.10#get</a>)方法</p></blockquote><p>验证规则搞定了，现在又有 2 个新问题了，</p><ol><li>默认返回全部错误格式是数组 json，我们需要格式化自定义错误。</li><li>我们需要把错误信息显示到当前页面，并且有些字段还需要显示在里面，有些字段不需要（比如密码），需要<code>Render</code>方法，可以实现数据显示，但是拿不到当前错误控制器的模板地址。这个是比较致命的问题，其他问题都好解决。</li></ol><p>解决这个问题，我纠结了很久，想到了 2 个方法来解决问题。</p><h3 id="自定义装饰器-配合ValidationPipe-HttpExceptionFilter实现"><a href="#自定义装饰器-配合ValidationPipe-HttpExceptionFilter实现" class="headerlink" title="自定义装饰器+配合ValidationPipe+HttpExceptionFilter实现"></a>自定义装饰器+配合<code>ValidationPipe</code>+<code>HttpExceptionFilter</code>实现</h3><p>借助<code>class-validator</code>配置参数的<code>context</code>字段。</p><p>我们可以在上面写 2 个字段，一个是<code>render</code>，一个是<code>locals</code>。</p><p>在实现<code>render</code>功能之前，我们需要借助<code>typescript</code>的一个功能<code>enum</code>枚举。</p><p><code>Nest</code>里面<code>HttpStatus</code>状态码就是<code>enum</code>。</p><p>我们把所有的视图模板都存在<code>enum</code>里面，枚举好处就是映射，类似于<code>key-value</code>对象。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// js 模拟 enum 写法</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Enum</span> = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>&#125;<br><br><span class="hljs-comment">// 取值</span><br><span class="hljs-title class_">Enum</span>[<span class="hljs-title class_">Enum</span>.<span class="hljs-property">a</span>]<br><span class="hljs-comment">// &#x27;a&#x27;</span><br><br><span class="hljs-comment">// 字符串赋值</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Enum</span> &#123;<br>  a = <span class="hljs-string">&#x27;a&#x27;</span>,<br>  b = <span class="hljs-string">&#x27;b&#x27;</span>,<br>&#125;<br><br><span class="hljs-comment">// 取值</span><br><span class="hljs-title class_">Enum</span>.<span class="hljs-property">a</span><br><span class="hljs-comment">// &#x27;a&#x27;</span><br><br><span class="hljs-comment">// 索引赋值</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Enum</span> &#123;<br>  a,<br>  b,<br>&#125;<br><br><span class="hljs-comment">// 取值</span><br><span class="hljs-title class_">Enum</span>.<span class="hljs-property">a</span><br><span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><blockquote><p><code>typescript</code>转成<code>javascript</code>，枚举取值<code>Enum[Enum.a]</code>就是这样的。</p></blockquote><p>创建视图模板路径枚举</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts">$ touch src/core/enums/views-path.<span class="hljs-property">ts</span><br><span class="hljs-variable constant_">OR</span><br>编辑器新建文件views-path.<span class="hljs-property">ts</span><br></code></pre></td></tr></table></figure><p>在里面写上：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ViewsPath</span> &#123;<br>  <span class="hljs-title class_">Register</span> = <span class="hljs-string">&#x27;auth/register&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>auth.controller.ts 换上枚举：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts">...<br><span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;/register&#x27;</span>)<br><span class="hljs-meta">@Render</span>(<span class="hljs-title class_">ViewsPath</span>.<span class="hljs-property">Register</span>)<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">register</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() register: RegisterDto, <span class="hljs-meta">@Res</span>() res</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">register</span>(register);<br>&#125;<br>...<br></code></pre></td></tr></table></figure><p>解决问题之前，我们先看，<code>ValidationPipe</code>源码，验证失败之后干了些什么：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts">...<br><span class="hljs-keyword">const</span> errors = <span class="hljs-keyword">await</span> classValidator.<span class="hljs-title function_">validate</span>(entity, <span class="hljs-variable language_">this</span>.<span class="hljs-property">validatorOptions</span>);<br><span class="hljs-keyword">if</span> (errors.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadRequestException</span>(<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isDetailedOutputDisabled</span> ? <span class="hljs-literal">undefined</span> : errors,<br>    );<br>&#125;<br>...<br></code></pre></td></tr></table></figure><p>返回是一个<code>ValidationError[]</code>，那<code>ValidationError</code>里面有什么：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidationError</span> &#123;<br>  target?: <span class="hljs-title class_">Object</span> <span class="hljs-comment">// 目标对象，就是我们定义验证规则那个对象。这里是`RegisterDto`</span><br>  <span class="hljs-attr">property</span>: <span class="hljs-built_in">string</span> <span class="hljs-comment">// 当前字段</span><br>  value?: <span class="hljs-built_in">any</span> <span class="hljs-comment">// 当前的值</span><br>  <span class="hljs-attr">constraints</span>: &#123;<br>    <span class="hljs-comment">// 验证规则错误提示，我们定义的装饰 @IsNotEmpty,显示的key是 isNotEmpty，value是定义配置里的`message`，定义多少显示多少。如果想一次只显示一个错误怎么办，后面讲怎么处理</span><br>    [<span class="hljs-attr">type</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span><br>  &#125;<br>  <span class="hljs-attr">children</span>: <span class="hljs-title class_">ValidationError</span>[] <span class="hljs-comment">// 嵌套</span><br>  contexts?: &#123;<br>    <span class="hljs-comment">// 装饰器里面配置定义的`context`内容，key是 isNotEmpty ，value是 context内容</span><br>    [<span class="hljs-attr">type</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>  &#125;<br>  <span class="hljs-title function_">toString</span>(shouldDecorate?: <span class="hljs-built_in">boolean</span>, hasParent?: <span class="hljs-built_in">boolean</span>, parentPath?: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span> <span class="hljs-comment">// 这玩意就不解释了。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最开始我想到是使用<code>context</code>来配置 3 个字段：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// context定义内容</span><br><span class="hljs-keyword">interface</span> context &#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-built_in">string</span> <span class="hljs-comment">// 视图模板路径</span><br>  <span class="hljs-attr">locals</span>: <span class="hljs-built_in">boolean</span> <span class="hljs-comment">// 字段是否显示</span><br>  <span class="hljs-attr">priority</span>: <span class="hljs-built_in">number</span> <span class="hljs-comment">// 验证规则显示优先级</span><br>&#125;<br><br><span class="hljs-comment">// Render需要参数</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Render</span> &#123;<br>  <span class="hljs-attr">view</span>: <span class="hljs-built_in">string</span> <span class="hljs-comment">// 视图模板路径</span><br>  <span class="hljs-attr">locals</span>: &#123;<br>    <span class="hljs-comment">// 模板显示的变量</span><br>    <span class="hljs-attr">error</span>: <span class="hljs-built_in">string</span> <span class="hljs-comment">// 必须有的错误消息</span><br>    [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>折腾一遍，功能实现了，就是太麻烦了。每个规则验证装饰器里面都要写<code>context</code>一坨。</p><p>能不能简便一点了。如果我在这个类里面只定义一次是不是好点。</p><p>就想到了在<code>RegisterDto</code>里写个私有属性，把相关的字段存进去，改进了<code>context</code>配置：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ValidatorFilterContext</span> &#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">locals</span>: &#123; [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">boolean</span> &#125;<br>  <span class="hljs-attr">priority</span>: &#123; [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span>[] &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>就变成这样的：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts">...<br><br><span class="hljs-attr">__validator_filter__</span>: &#123;<br>    <span class="hljs-attr">render</span>: <span class="hljs-title class_">ViewsPath</span>.<span class="hljs-property">Register</span>,<br>    <span class="hljs-attr">locals</span>: &#123;<br>        <span class="hljs-attr">loginname</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">pass</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">re_pass</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">email</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    <span class="hljs-attr">priority</span>: &#123;<br>        <span class="hljs-attr">loginname</span>: [<span class="hljs-string">&#x27;IsNotEmpty&#x27;</span>, <span class="hljs-string">&#x27;Matches&#x27;</span>],<br>        <span class="hljs-attr">pass</span>: [<span class="hljs-string">&#x27;IsNotEmpty&#x27;</span>, <span class="hljs-string">&#x27;IsByteLength&#x27;</span>],<br>        <span class="hljs-attr">re_pass</span>: [<span class="hljs-string">&#x27;IsNotEmpty&#x27;</span>, <span class="hljs-string">&#x27;IsEqualsThan&#x27;</span>],<br>        <span class="hljs-attr">email</span>: [<span class="hljs-string">&#x27;IsNotEmpty&#x27;</span>, <span class="hljs-string">&#x27;IsEmail&#x27;</span>],<br>    &#125;,<br>&#125;<br>...<br></code></pre></td></tr></table></figure><p>这样就比每个规则验证装饰器写<code>context</code>配置好了很多，但是这样又有一个问题，会在<code>target</code>里面多一个<code>__validattsor_filter__</code>，有点多余了。</p><p>需要改进一下，我就想到类装饰器。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VALIDATOR_FILTER</span> = <span class="hljs-string">&#x27;__validator_filter__&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ValidatorFilter</span>(<span class="hljs-params">context: ValidatorFilterContext</span>): <span class="hljs-title class_">ClassDecorator</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(<span class="hljs-variable constant_">VALIDATOR_FILTER</span>, context, target)<br>&#125;<br></code></pre></td></tr></table></figure><p>类装饰器前面已经说过了，它是装饰器里面最后执行的，用来装饰类。这里有个比较特殊的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">Reflect</a>。</p><p><code>Reflect</code>翻译叫反射，应该说叫映射靠谱点。为什么了，它基本就是类似此功能。</p><p><code>defineMetadata</code>定义元数据，有 3 个参数：第一个是标识 key，第二个是存储的数据（获取就是它），第三个就是一个对象。</p><p>翻译过来就是在 a 对象里面定一个标识 b 的数据为 c。有定义就有获取</p><p><code>getMetadata</code>获取元数据，有 2 个参数：第一个是标识 key，第三个就是一个对象。</p><p>翻译过来就是在 a 对象里去查一个 b 标识，如果有就返回原数据，如果没有就是 Undefined。或者是 b 标识里面去查找 a 对象。理解差不多。目的是 2 个都匹配就返回数据。</p><p>这玩意简单理解<code>Reflect</code>是一个全局对象，<code>defineMetadata</code>定一个特定标识的数据，<code>getMetadata</code>根据特定标识获取数据。这里<code>Reflect</code>用的比较简单就不深入了，<code>Reflect</code>是<code>es6</code>新特性一部分。</p><p>在<code>Nest</code>的装饰器大量使用<code>Reflect</code>。在<code>nodejs</code>使用，需要借助<code>reflect-metadata</code>，引入方式<code>import &#39;reflect-metadata&#39;;</code>。</p><p>处理完了，dot 问题，那么我们接下来要处理异常捕获过滤器问题了。</p><p>前面也说，<code>Nest</code>执行顺序：<code>客户端请求 ---&gt; 中间件 ---&gt; 守卫 ---&gt; 拦截器之前 ---&gt; 管道 ---&gt; 控制器处理并响应 ---&gt; 拦截器之后 ---&gt; 过滤器</code>。</p><p>因为<code>ValidationPipe</code>源码里，只要验证错误就直接抛异常<code>new BadRequestException()</code>，然后就直接跳过控制器处理并响应，走拦截器之后和过滤器了。</p><p>那么我们需要在过滤器来处理这些问题，这是为什么要这么麻烦原因。</p><p><code>Nest</code>已经提供一个自定义<code>HttpExceptionFilter</code>的栗子，我们需要改良一下这个栗子。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Catch</span>(<span class="hljs-title class_">HttpException</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpExceptionFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ExceptionFilter</span> &#123;<br>  <span class="hljs-keyword">catch</span>(<span class="hljs-attr">exception</span>: <span class="hljs-title class_">HttpException</span>, <span class="hljs-attr">host</span>: <span class="hljs-title class_">ArgumentsHost</span>) &#123;<br>    <span class="hljs-keyword">const</span> ctx = host.<span class="hljs-title function_">switchToHttp</span>()<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">response</span>: <span class="hljs-title class_">Response</span> = ctx.<span class="hljs-title function_">getResponse</span>()<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">request</span>: <span class="hljs-title class_">Request</span> = ctx.<span class="hljs-title function_">getRequest</span>()<br>    <span class="hljs-keyword">const</span> status = exception.<span class="hljs-title function_">getStatus</span>()<br>    <span class="hljs-comment">// 如果错误码 400</span><br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">BAD_REQUEST</span>) &#123;<br>      <span class="hljs-keyword">const</span> render = <span class="hljs-title function_">validationErrorMessage</span>(exception.<span class="hljs-property">message</span>.<span class="hljs-property">message</span>)<br>      <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">render</span>(render.<span class="hljs-property">view</span>, render.<span class="hljs-property">locals</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>render</code>接受 3 个参数，平常只用前个，第一个是模板路径或者模板，第二个提供给模板显示的数据。</p><p>这里核心地方在<code>validationErrorMessage</code>里：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">validationErrorMessage</span>(<span class="hljs-params">messages: ValidationError[]</span>): <span class="hljs-title class_">Render</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">message</span>: <span class="hljs-title class_">ValidationError</span> = messages[<span class="hljs-number">0</span>]<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">metadata</span>: <span class="hljs-title class_">ValidatorFilterContext</span> = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getMetadata</span>(<span class="hljs-variable constant_">VALIDATOR_FILTER</span>, message.<span class="hljs-property">target</span>.<span class="hljs-property">constructor</span>)<br>  <span class="hljs-keyword">if</span> (!metadata) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;context is not undefined, use @ValidatorFilter(context)&#x27;</span>)<br>  &#125;<br>  <span class="hljs-comment">// 处理错误消息显示</span><br>  <span class="hljs-keyword">const</span> priorities = metadata.<span class="hljs-property">priority</span>[message.<span class="hljs-property">property</span>] || []<br>  <span class="hljs-keyword">let</span> error = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">const</span> notFound = priorities.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    key = key.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\b(\w)(\w*)/g</span>, <span class="hljs-function">(<span class="hljs-params">$0, $1, $2</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> $1.<span class="hljs-title function_">toLowerCase</span>() + $2<br>    &#125;)<br>    <span class="hljs-keyword">if</span> (!!message.<span class="hljs-property">constraints</span>[key]) &#123;<br>      error = message.<span class="hljs-property">constraints</span>[key]<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;)<br>  <span class="hljs-comment">// 没有找到对应错误消息，取第一个</span><br>  <span class="hljs-keyword">if</span> (!notFound) &#123;<br>    error = message.<span class="hljs-property">constraints</span>[<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(message.<span class="hljs-property">constraints</span>)[<span class="hljs-number">0</span>]]<br>  &#125;<br>  <span class="hljs-comment">// 处理错误以后显示数据</span><br>  <span class="hljs-keyword">const</span> locals = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(metadata.<span class="hljs-property">locals</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">obj, key</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (metadata.<span class="hljs-property">locals</span>[key]) &#123;<br>      obj[key] = message.<span class="hljs-property">target</span>[key]<br>    &#125;<br>    <span class="hljs-keyword">return</span> obj<br>  &#125;, &#123;&#125;)<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">view</span>: metadata.<span class="hljs-property">render</span>,<br>    <span class="hljs-attr">locals</span>: &#123;<br>      error,<br>      ...locals,<br>    &#125;,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>我们拿到的<code>messages</code>是一个数组，我们每次只显示一个错误消息，总是取第一个即可</li><li><code>metadata</code>是我们根据标识获取的元数据，如果找不到，就抛出异常。<strong>注意</strong>：<code>message.target</code>是一个<code>&#123;&#125;</code>，我们需要获取它的<code>constructor</code>才行。</li><li><code>priorities</code>获取当前错误字段显示错误提取的优先级列表</li><li><code>priority</code>里面没有配置获取配置<code>[]</code>, 就直接返回验证规则第一个。<strong>提示</strong>：这也是<code>&#123;&#125;</code>坑，默认按字母顺序排列属性的位置。</li><li><code>locals</code>直接去判断配置的<code>locals</code>，哪些<code>key</code>可以显示哪些<code>key</code>不能显示。</li><li>最后数据拼装在一起返回，供<code>render</code>使用。</li></ul><h3 id="自定义装饰器-自定义ViewValidationPipe实现"><a href="#自定义装饰器-自定义ViewValidationPipe实现" class="headerlink" title="自定义装饰器+自定义ViewValidationPipe实现"></a>自定义装饰器+自定义<code>ViewValidationPipe</code>实现</h3><p>装饰器部分就不用说了，和上面一样，虽然不需要但是后面有用。</p><p><code>ViewValidationPipe</code>实现：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">Optional</span>, <span class="hljs-title class_">ArgumentMetadata</span>, <span class="hljs-title class_">PipeTransform</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> classTransformer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;class-transformer&#x27;</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> classValidator <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;class-validator&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ValidatorOptions</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common/interfaces/external/validator-options.interface&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; isNil &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ValidationError</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;class-validator&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">VALIDATOR_FILTER</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../constants/validator-filter.constants&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ValidatorFilterContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../decorators&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ValidationPipeOptions</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ValidatorOptions</span> &#123;<br>  transform?: <span class="hljs-built_in">boolean</span><br>  disableErrorMessages?: <span class="hljs-built_in">boolean</span><br>&#125;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewValidationPipe</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PipeTransform</span>&lt;<span class="hljs-built_in">any</span>&gt; &#123;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-attr">isTransformEnabled</span>: <span class="hljs-built_in">boolean</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-attr">isDetailedOutputDisabled</span>: <span class="hljs-built_in">boolean</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-attr">validatorOptions</span>: <span class="hljs-title class_">ValidatorOptions</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-meta">@Optional</span>() options?: ValidationPipeOptions</span>) &#123;<br>    options = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<br>      &#123;<br>        <span class="hljs-attr">transform</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">whitelist</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">forbidNonWhitelisted</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">skipMissingProperties</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">forbidUnknownValues</span>: <span class="hljs-literal">true</span>,<br>      &#125;,<br>      options || &#123;&#125;<br>    )<br>    <span class="hljs-keyword">const</span> &#123; transform, disableErrorMessages, ...validatorOptions &#125; = options<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isTransformEnabled</span> = !!transform<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">validatorOptions</span> = validatorOptions<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isDetailedOutputDisabled</span> = disableErrorMessages<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-title function_">transform</span>(<span class="hljs-params">value, metadata: ArgumentMetadata</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; metatype &#125; = metadata<br>    <span class="hljs-keyword">if</span> (!metatype || !<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toValidate</span>(metadata)) &#123;<br>      <span class="hljs-keyword">return</span> value<br>    &#125;<br>    <span class="hljs-keyword">const</span> entity = classTransformer.<span class="hljs-title function_">plainToClass</span>(metatype, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toEmptyIfNil</span>(value))<br>    <span class="hljs-keyword">const</span> errors = <span class="hljs-keyword">await</span> classValidator.<span class="hljs-title function_">validate</span>(entity, <span class="hljs-variable language_">this</span>.<span class="hljs-property">validatorOptions</span>)<br>    <span class="hljs-comment">// 重点实现 start</span><br>    <span class="hljs-keyword">if</span> (errors.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">validationErrorMessage</span>(errors).<span class="hljs-property">locals</span><br>    &#125;<br>    <span class="hljs-comment">// 重点实现 end</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">isTransformEnabled</span><br>      ? entity<br>      : <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">validatorOptions</span>).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span><br>      ? classTransformer.<span class="hljs-title function_">classToPlain</span>(entity)<br>      : value<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">toValidate</span>(<span class="hljs-attr">metadata</span>: <span class="hljs-title class_">ArgumentMetadata</span>): <span class="hljs-built_in">boolean</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; metatype, <span class="hljs-keyword">type</span> &#125; = metadata<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === <span class="hljs-string">&#x27;custom&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> types = [<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Boolean</span>, <span class="hljs-title class_">Number</span>, <span class="hljs-title class_">Array</span>, <span class="hljs-title class_">Object</span>]<br>    <span class="hljs-keyword">return</span> !types.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> metatype === t) &amp;&amp; !<span class="hljs-title function_">isNil</span>(metatype)<br>  &#125;<br><br>  toEmptyIfNil&lt;T = <span class="hljs-built_in">any</span>, R = <span class="hljs-built_in">any</span>&gt;(<span class="hljs-attr">value</span>: T): R | &#123;&#125; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">isNil</span>(value) ? &#123;&#125; : value<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们这里把<code>validationErrorMessage</code>函数直接拿过来了。</p><p>控制器就需要这么写：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;/register&#x27;</span>)<br><span class="hljs-meta">@Render</span>(<span class="hljs-title class_">ViewsPath</span>.<span class="hljs-property">Register</span>)<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">register</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>(<span class="hljs-keyword">new</span> ViewValidationPipe(&#123;</span><br><span class="hljs-params">    transform: <span class="hljs-literal">true</span>,</span><br><span class="hljs-params">    whitelist: <span class="hljs-literal">true</span>,</span><br><span class="hljs-params">    forbidNonWhitelisted: <span class="hljs-literal">true</span>,</span><br><span class="hljs-params">    skipMissingProperties: <span class="hljs-literal">false</span>,</span><br><span class="hljs-params">    forbidUnknownValues: <span class="hljs-literal">true</span>,</span><br><span class="hljs-params">&#125;)) register: RegisterDto</span>) &#123;<br>    <span class="hljs-keyword">if</span> ((register <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>).<span class="hljs-property">view</span>) &#123;<br>        <span class="hljs-keyword">return</span> register.<span class="hljs-property">locals</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">register</span>(register);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>拿到是<code>pipe</code>转换后的结果</li><li>如果有<code>view</code>表示出错了，就直接返回<code>locals</code>，如果没有就接着处理服务逻辑。</li></ul><p><strong>注意</strong>：<code>(register as any).view</code>这个<code>view</code>是不靠谱的，需要返回一个特殊标识，不然页面出现一个<code>view</code>字段，就挂了。</p><p>这里我们使用第一种，接着实现服务逻辑。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ts">...<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">register: RegisterDto</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; loginname, email &#125; = register;<br>    <span class="hljs-comment">// 检查用户是否存在，查询登录名和邮箱</span><br>    <span class="hljs-keyword">const</span> exist = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">count</span>(&#123;<br>        <span class="hljs-attr">$or</span>: [<br>            &#123; loginname &#125;,<br>            &#123; email &#125;,<br>        ],<br>    &#125;);<br>    <span class="hljs-comment">// 返回1存在，0不存在</span><br>    <span class="hljs-keyword">if</span> (exist) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">error</span>: <span class="hljs-string">&#x27;用户名或邮箱已被使用。&#x27;</span>,<br>            loginname,<br>            email,<br>        &#125;;<br>    &#125;<br>    <span class="hljs-comment">// hash加密密码，不能明文存储到数据库</span><br>    <span class="hljs-keyword">const</span> passhash = <span class="hljs-title function_">hashSync</span>(register.<span class="hljs-property">pass</span>, <span class="hljs-number">10</span>);<br>    <span class="hljs-comment">// 错误捕获 async/await 科普已经说明</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 保存用户到数据库</span><br>        <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">create</span>(&#123; loginname, email, <span class="hljs-attr">pass</span>: passhash &#125;);<br>        <span class="hljs-comment">// 预留发送激活邮箱实现</span><br><br>        <span class="hljs-comment">// 返回注册成功信息</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">success</span>: <span class="hljs-string">`欢迎加入 <span class="hljs-subst">$&#123;Config.name&#125;</span>！我们已给您的注册邮箱发送了一封邮件，请点击里面的链接来激活您的帐号。`</span>,<br>        &#125;;<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalServerErrorException</span>(error);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>里面注释也说明的我们要操作的步骤，注册逻辑还是比较简单：</p><ul><li>验证参数是否合法</li><li>查询用户是否注册</li><li>加密密码</li><li>保存到数据库</li><li>发送激活邮箱</li><li>返回注册成功信息</li></ul><p>做登录之前完成邮箱激活的功能。</p><h3 id="邮箱模块"><a href="#邮箱模块" class="headerlink" title="邮箱模块"></a>邮箱模块</h3><p>前面基础已经介绍过<code>nest</code>模块，这里邮箱模块是一个通用的功能模块，我们需要抽离出来写成可配置的动态模块。<code>nest</code>目前没有提供发邮箱的功能模块，我们只能自己动手写了，<code>nodejs</code>发送邮件最出名使用<a href="https://nodemailer.com/about/">node-mailer</a>。我们这里也把<code>node-mailer</code>封装一下。</p><p>对于一个没有写过动态模块的我，是一脸懵逼，还好作者写很多包装的功能模块：</p><ul><li>graphql</li><li>typeorm</li><li>terminus</li><li>passport</li><li>elasticsearch</li><li>mongoose</li><li>jwt</li><li>cqrs</li></ul><p>既然不会写我们可以 copy 一个来仿写，实现我们要功能就 ok 了，卷起袖子就是干。</p><p>通过观察上面几个模块他们文件结构都是这样的：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts">index.<span class="hljs-property">ts</span> <span class="hljs-comment">// 导出快捷文件</span><br>mailer - options.<span class="hljs-property">interface</span>.<span class="hljs-property">ts</span> <span class="hljs-comment">// 定义配置接口</span><br>mailer.<span class="hljs-property">constants</span>.<span class="hljs-property">ts</span> <span class="hljs-comment">// 定义常量</span><br>mailer.<span class="hljs-property">providers</span>.<span class="hljs-property">ts</span> <span class="hljs-comment">// 定义供应商</span><br>mailer.<span class="hljs-property">module</span>.<span class="hljs-property">ts</span> <span class="hljs-comment">// 定义导出模块</span><br>mailer.<span class="hljs-property">decorators</span>.<span class="hljs-property">ts</span> <span class="hljs-comment">// 定义装饰器</span><br></code></pre></td></tr></table></figure><p>我们也来新建一个这样的结构，<code>core/mailer</code>建文件就不说了。</p><p>这一个模块，就需要先从模块开始：</p><ul><li>动态可配置模块，而且还是全局模块，只需要导入一次即可。</li><li>同步配置可以是直接填写，异步配置可以是依赖其他模块</li></ul><p>这是我们要实现的 2 个重要功能，作者写的模块基本是这个套路，有些东西我们不会写，可以先模仿。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">DynamicModule</span>, <span class="hljs-title class_">Module</span>, <span class="hljs-title class_">Provider</span>, <span class="hljs-title class_">Global</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MailerModuleAsyncOptions</span>, <span class="hljs-title class_">MailerOptionsFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mailer-options.interface&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MailerService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mailer.service&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">MAILER_MODULE_OPTIONS</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mailer.constants&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createMailerClient &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mailer.provider&#x27;</span><br><br><span class="hljs-meta">@Module</span>(&#123;&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailerModule</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 同步引导邮箱模块</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> options 邮箱模块的选项</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">static</span> forRoot&lt;T&gt;(<span class="hljs-attr">options</span>: T): <span class="hljs-title class_">DynamicModule</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">module</span>: <span class="hljs-title class_">MailerModule</span>,<br>      <span class="hljs-attr">providers</span>: [&#123; <span class="hljs-attr">provide</span>: <span class="hljs-variable constant_">MAILER_MODULE_OPTIONS</span>, <span class="hljs-attr">useValue</span>: options &#125;, createMailerClient&lt;T&gt;(), <span class="hljs-title class_">MailerService</span>],<br>      <span class="hljs-attr">exports</span>: [<span class="hljs-title class_">MailerService</span>],<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 异步引导邮箱模块</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> options 邮箱模块的选项</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">static</span> forRootAsync&lt;T&gt;(<span class="hljs-attr">options</span>: <span class="hljs-title class_">MailerModuleAsyncOptions</span>&lt;T&gt;): <span class="hljs-title class_">DynamicModule</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">module</span>: <span class="hljs-title class_">MailerModule</span>,<br>      <span class="hljs-attr">imports</span>: options.<span class="hljs-property">imports</span> || [],<br>      <span class="hljs-attr">providers</span>: [...<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createAsyncProviders</span>(options), createMailerClient&lt;T&gt;(), <span class="hljs-title class_">MailerService</span>],<br>      <span class="hljs-attr">exports</span>: [<span class="hljs-title class_">MailerService</span>],<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>forRoot</code>配置同步模块</li><li><code>forRootAsync</code>配置异步模块</li></ul><p>我们先说和<code>node-mailer</code>相关的，<code>node-mailer</code>主要分 2 块：</p><ul><li>创建<code>node-mailer</code>实例，<code>node-mailer</code>新版解决很多问题，自动去识别不同邮件配置，这对我们来说是一个非常好的消息，不用去做各种适配配置了，只需要按官网的相关配置即可。</li><li>使用<code>node-mailer</code>实例，<code>set</code>设置配置和<code>use</code>注册插件，<code>sendMail</code>发送邮件</li></ul><p>创建在<code>createMailerClient</code>方法里面完成</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">MAILER_MODULE_OPTIONS</span>, <span class="hljs-variable constant_">MAILER_TOKEN</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mailer.constants&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createTransport &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nodemailer&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> createMailerClient = &lt;T&gt;<span class="hljs-function">() =&gt;</span> (&#123;<br>  <span class="hljs-attr">provide</span>: <span class="hljs-variable constant_">MAILER_TOKEN</span>,<br>  <span class="hljs-attr">useFactory</span>: <span class="hljs-function">(<span class="hljs-params">options: T</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createTransport</span>(options)<br>  &#125;,<br>  <span class="hljs-attr">inject</span>: [<span class="hljs-variable constant_">MAILER_MODULE_OPTIONS</span>],<br>&#125;)<br></code></pre></td></tr></table></figure><p>这个方法是一个工厂方法，在介绍这个方法之前，先要回顾一下，<code>nest</code>依赖注入自定义服务：</p><ul><li>Use value</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> connectionProvider = &#123;<br>  <span class="hljs-attr">provide</span>: <span class="hljs-string">&#x27;Connection&#x27;</span>,<br>  <span class="hljs-attr">useValue</span>: connection,<br>&#125;<br></code></pre></td></tr></table></figure><p>值服务：这个一般作为配置，定义全局常量使用，单纯<code>key-value</code>形式</p><ul><li>Use class</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> configServiceProvider = &#123;<br>  <span class="hljs-attr">provide</span>: <span class="hljs-title class_">ConfigService</span>,<br>  <span class="hljs-attr">useClass</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;development&#x27;</span> ? <span class="hljs-title class_">DevelopmentConfigService</span> : <span class="hljs-title class_">ProductionConfigService</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>类服务：这个比较常用，默认就是类服务，如果<code>provide</code>和<code>useClass</code>一样，直接注册在<code>providers</code>数组里即可。我们只关心<code>provide</code>注入是谁，不关心<code>useClass</code>依赖谁。</p><ul><li>Use factory</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> connectionFactory = &#123;<br>  <span class="hljs-attr">provide</span>: <span class="hljs-string">&#x27;Connection&#x27;</span>,<br>  <span class="hljs-attr">useFactory</span>: <span class="hljs-function">(<span class="hljs-params">optionsProvider: OptionsProvider</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> options = optionsProvider.<span class="hljs-title function_">get</span>()<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatabaseConnection</span>(options)<br>  &#125;,<br>  <span class="hljs-attr">inject</span>: [<span class="hljs-title class_">OptionsProvider</span>],<br>&#125;<br></code></pre></td></tr></table></figure><p>工厂服务：这个比较高级，一般需要依赖其他服务，来创建当前服务的时候，操作使用。定制服务经常用到。</p><p>我们在回过头来说上面这个<code>createMailerClient</code>方法</p><p>本来我们可以直接写出一个<code>Use factory</code>例子一样的，考虑它需要<code>forRoot</code>和<code>forRootAsync</code>都需要使用，我们写成一个函数，使用时候直接调用即可，也可以写成一个对象形式。</p><p><code>provide</code>引入我们定义的常量，至于这个常量是什么，我们不需要关心，如果它变化这个注入者也发生变化，这里不需要改任何代码。也算是配置和程序分离，一种比较好编程方式。</p><p><code>inject</code>依赖其他服务，这里依赖是一个<code>useValue</code>服务，我们把邮箱配置传递给<code>MAILER_MODULE_OPTIONS</code>，然后把它放到<code>inject</code>，这样我们在<code>useFactory</code>方法里面就可以取到依赖列表。</p><p><strong>注意</strong>：<code>inject</code>是一个数组，<code>useFactory</code>参数和<code>inject</code>一一对应，简单理解，<code>useFactory</code>是形参，<code>inject</code>数组是实参。</p><p>在<code>useFactory</code>里面，我们可以根据参数做相关的操作，这里我们直接获取这个服务即可，然后使用<code>nodemailer</code>提供的邮件创建方法<code>createTransport</code>即可。</p><p>依赖注入和服务重点，我不关心依赖者怎么处理，我只关心注入者给我提供什么。</p><p>我们在来说上面这个<code>MAILER_MODULE_OPTIONS</code>值服务</p><p><code>MAILER_MODULE_OPTIONS</code>在<code>forRoot</code>里是一个值服务<code>&#123; provide: MAILER_MODULE_OPTIONS, useValue: options &#125;</code>，保存传递的参数。<br><code>MAILER_MODULE_OPTIONS</code>在<code>forRootAsync</code>里是一个特殊处理<code>...this.createAsyncProviders(options)</code>，后面会讲解这个函数。</p><p><strong>注意</strong>：因为<code>createMailerClient</code>依赖它，所以一定要在<code>createMailerClient</code>方法完成注册。</p><p>说完通用的创建服务，来说<code>forRootAsync</code>里的<code>createAsyncProviders</code>方法：</p><p><code>createAsyncProviders</code>主要完成的工作是把邮箱配置和邮箱动态模块配置剥离开来，然后根据给定要求分别去处理。</p><p><code>createAsyncProviders</code>方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据给定的模块选项返回异步提供程序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> options 邮箱模块的选项</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> createAsyncProviders&lt;T&gt;(<br>    <span class="hljs-attr">options</span>: <span class="hljs-title class_">MailerModuleAsyncOptions</span>&lt;T&gt;,<br>): <span class="hljs-title class_">Provider</span>[] &#123;<br>    <span class="hljs-keyword">if</span> (options.<span class="hljs-property">useFactory</span>) &#123;<br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable language_">this</span>.<span class="hljs-property">createAsyncOptionsProvider</span>&lt;T&gt;(options)];<br>    &#125;<br>    <span class="hljs-keyword">return</span> [<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createAsyncOptionsProvider</span>(options),<br>        &#123;<br>            <span class="hljs-attr">provide</span>: options.<span class="hljs-property">useClass</span>,<br>            <span class="hljs-attr">useClass</span>: options.<span class="hljs-property">useClass</span>,<br>        &#125;,<br>    ];<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据给定的模块选项返回异步邮箱选项提供程序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> options 邮箱模块的选项</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> createAsyncOptionsProvider&lt;T&gt;(<br>    <span class="hljs-attr">options</span>: <span class="hljs-title class_">MailerModuleAsyncOptions</span>&lt;T&gt;,<br>): <span class="hljs-title class_">Provider</span> &#123;<br>    <span class="hljs-keyword">if</span> (options.<span class="hljs-property">useFactory</span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">provide</span>: <span class="hljs-variable constant_">MAILER_MODULE_OPTIONS</span>,<br>            <span class="hljs-attr">useFactory</span>: options.<span class="hljs-property">useFactory</span>,<br>            <span class="hljs-attr">inject</span>: options.<span class="hljs-property">inject</span> || [],<br>        &#125;;<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">provide</span>: <span class="hljs-variable constant_">MAILER_MODULE_OPTIONS</span>,<br>        <span class="hljs-attr">useFactory</span>: <span class="hljs-keyword">async</span> (<span class="hljs-attr">optionsFactory</span>: <span class="hljs-title class_">MailerOptionsFactory</span>&lt;T&gt;) =&gt; <span class="hljs-keyword">await</span> optionsFactory.<span class="hljs-title function_">createMailerOptions</span>(),<br>        <span class="hljs-attr">inject</span>: [options.<span class="hljs-property">useClass</span>],<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>解释这个函数之前，先看配置参数有接口：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MailerModuleAsyncOptions</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Pick</span>&lt;<span class="hljs-title class_">ModuleMetadata</span>, &#x27;imports&#x27;&gt; &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 模块的名称</span><br><span class="hljs-comment">   */</span><br>  name?: <span class="hljs-built_in">string</span><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 应该用于提供MailerOptions的类</span><br><span class="hljs-comment">   */</span><br>  useClass?: <span class="hljs-title class_">Type</span>&lt;T&gt;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 工厂应该用来提供MailerOptions</span><br><span class="hljs-comment">   */</span><br>  useFactory?: <span class="hljs-function">(<span class="hljs-params">...args: <span class="hljs-built_in">any</span>[]</span>) =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;T&gt; | T<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 应该注入的提供者</span><br><span class="hljs-comment">   */</span><br>  inject?: <span class="hljs-built_in">any</span>[]<br>&#125;<br></code></pre></td></tr></table></figure><p>这里面支持 2 种写法，一种是自定义类，然后使用<code>useClass</code>, 一种是自定义工厂，然后使用<code>useFactory</code>。</p><p>使用在<code>MailerService</code>服务里面完成并且把它导出给其他模块使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Inject</span>, <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">Logger</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">MAILER_TOKEN</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mailer.constants&#x27;</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">Mail</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nodemailer/lib/mailer&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Options</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">MailMessageOptions</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nodemailer/lib/mailer&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">from</span>, <span class="hljs-title class_">Observable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span><br><span class="hljs-keyword">import</span> &#123; tap, retryWhen, scan, delay &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/operators&#x27;</span><br><br><span class="hljs-keyword">const</span> logger = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Logger</span>(<span class="hljs-string">&#x27;MailerModule&#x27;</span>)<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailerService</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-meta">@Inject</span>(MAILER_TOKEN) <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> mailer: Mail</span>) &#123;&#125;<br>  <span class="hljs-comment">// 注册插件</span><br>  <span class="hljs-title function_">use</span>(<span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">pluginFunc</span>: <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> <span class="hljs-built_in">any</span>): <span class="hljs-title class_">ThisType</span>&lt;<span class="hljs-title class_">MailerService</span>&gt; &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">mailer</span>.<span class="hljs-title function_">use</span>(name, pluginFunc)<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span><br>  &#125;<br><br>  <span class="hljs-comment">// 设置配置</span><br>  <span class="hljs-title function_">set</span>(<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">handler</span>: <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> <span class="hljs-built_in">any</span>): <span class="hljs-title class_">ThisType</span>&lt;<span class="hljs-title class_">MailerService</span>&gt; &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">mailer</span>.<span class="hljs-title function_">set</span>(key, handler)<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span><br>  &#125;<br><br>  <span class="hljs-comment">// 发送邮件配置</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">send</span>(<span class="hljs-attr">mailMessage</span>: <span class="hljs-title class_">MailMessageOptions</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-title function_">from</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">mailer</span>.<span class="hljs-title function_">sendMail</span>(mailMessage))<br>      .<span class="hljs-title function_">pipe</span>(<br>        <span class="hljs-title function_">handleRetry</span>(),<br>        <span class="hljs-title function_">tap</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          logger.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;send mail success&#x27;</span>)<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">mailer</span>.<span class="hljs-title function_">close</span>()<br>        &#125;)<br>      )<br>      .<span class="hljs-title function_">toPromise</span>()<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleRetry</span>(<span class="hljs-params">retryAttempts = <span class="hljs-number">5</span>, retryDelay = <span class="hljs-number">3000</span></span>): &lt;T&gt;<span class="hljs-function">(<span class="hljs-params">source: Observable&lt;T&gt;</span>) =&gt;</span> <span class="hljs-title class_">Observable</span>&lt;T&gt; &#123;<br>  <span class="hljs-keyword">return</span> &lt;T&gt;<span class="hljs-function">(<span class="hljs-params">source: Observable&lt;T&gt;</span>) =&gt;</span><br>    source.<span class="hljs-title function_">pipe</span>(<br>      <span class="hljs-title function_">retryWhen</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span><br>        e.<span class="hljs-title function_">pipe</span>(<br>          <span class="hljs-title function_">scan</span>(<span class="hljs-function">(<span class="hljs-params">errorCount, error</span>) =&gt;</span> &#123;<br>            logger.<span class="hljs-title function_">error</span>(<span class="hljs-string">`Unable to connect to the database. Retrying (<span class="hljs-subst">$&#123;errorCount + <span class="hljs-number">1</span>&#125;</span>)...`</span>)<br>            <span class="hljs-keyword">if</span> (errorCount + <span class="hljs-number">1</span> &gt;= retryAttempts) &#123;<br>              logger.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;send mail finally error&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(error))<br>              <span class="hljs-keyword">throw</span> error<br>            &#125;<br>            <span class="hljs-keyword">return</span> errorCount + <span class="hljs-number">1</span><br>          &#125;, <span class="hljs-number">0</span>),<br>          <span class="hljs-title function_">delay</span>(retryDelay)<br>        )<br>      )<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@Inject</code>是一个注入器，接受一个<code>provide</code>标识、令牌，这里我们拿到了<code>node-mailer</code>实例</p><p><code>send</code>方法使用<code>rxjs</code>写法，<code>this.mailer.sendMail(mailMessage)</code>返回是一个<code>Promise</code>，<code>Promise</code>有一些缺陷，<code>rxjs</code>可以去弥补一下这些缺陷。</p><p>比如这里使用是 rxjs 作用就是，<code>handleRetry()</code>去判断发送有没有错误，如果有错误，就去重试，默认重试 5 次，如果还错误就直接抛出异常。<code>tap()</code>类似一个<code>console</code>，不会去改变数据流。<br>有 2 个参数，第一个是无错误的处理函数，第二个是有错误的处理函数。如果发送成功我们需要关闭连接。<code>toPromise</code>就更简单了，看名字也知道，把<code>rxjs</code>转成<code>Promise</code>。</p><p>介绍完这个这个模块，那么接下来要说一下怎么使用它们：</p><p>模块注册：我们需要在核心模块里面<code>imports</code>，因为邮件需要一些配置信息，比如邮件地址，端口号，发送邮件的用户和授权码，如果不知道邮箱配置可<a href="https://nodemailer.com/about/">参考 nodemailer 官网</a>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title class_">MailerModule</span>.<span class="hljs-property">forRootAsync</span>&lt;<span class="hljs-title class_">SMTPTransportOptions</span>&gt;(&#123;<br>    <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">ConfigModule</span>],<br>    <span class="hljs-attr">useFactory</span>: <span class="hljs-keyword">async</span> (<span class="hljs-attr">configService</span>: <span class="hljs-title class_">ConfigService</span>) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> mailer = configService.<span class="hljs-title function_">getKeys</span>([<span class="hljs-string">&#x27;MAIL_HOST&#x27;</span>, <span class="hljs-string">&#x27;MAIL_PORT&#x27;</span>, <span class="hljs-string">&#x27;MAIL_USER&#x27;</span>, <span class="hljs-string">&#x27;MAIL_PASS&#x27;</span>]);<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">host</span>: mailer.<span class="hljs-property">MAIL_HOST</span>,     <span class="hljs-comment">// 邮箱smtp地址</span><br>            <span class="hljs-attr">port</span>: mailer.<span class="hljs-property">MAIL_PORT</span> * <span class="hljs-number">1</span>, <span class="hljs-comment">// 端口号</span><br>            <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">secureConnection</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">auth</span>: &#123;<br>                <span class="hljs-attr">user</span>: mailer.<span class="hljs-property">MAIL_USER</span>,  <span class="hljs-comment">// 邮箱账号</span><br>                <span class="hljs-attr">pass</span>: mailer.<span class="hljs-property">MAIL_PASS</span>,  <span class="hljs-comment">// 授权码</span><br>            &#125;,<br>            <span class="hljs-attr">ignoreTLS</span>: <span class="hljs-literal">true</span>,<br>        &#125;;<br>    &#125;,<br>    <span class="hljs-attr">inject</span>: [<span class="hljs-title class_">ConfigService</span>],<br>&#125;),<br></code></pre></td></tr></table></figure><p>先使用注入依赖<code>ConfigService</code>，拿到配置服务，根据配置服务获取对应的配置。进行邮箱配置即可。</p><p>在页面怎么使用它们，因为本项目比较简单，只有 2 个地方需要使用邮箱，注册成功和找回密码时候，单独写一个<code>mail.services</code>服务去处理它们，并且模板里面内容除了用户名，token 等特定的数据是动态的，其他都是写死的。</p><p>mail.services</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 激活邮件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> to 激活人邮箱</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> token token</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 名字</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title function_">sendActiveMail</span>(<span class="hljs-params">to: <span class="hljs-built_in">string</span>, token: <span class="hljs-built_in">string</span>, username: <span class="hljs-built_in">string</span></span>)&#123;<br>    <span class="hljs-keyword">const</span> name = <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>    <span class="hljs-keyword">const</span> subject = <span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>社区帐号激活`</span>;<br>    <span class="hljs-keyword">const</span> html = <span class="hljs-string">`&lt;p&gt;您好：<span class="hljs-subst">$&#123;username&#125;</span>&lt;/p&gt;</span><br><span class="hljs-string">        &lt;p&gt;我们收到您在<span class="hljs-subst">$&#123;name&#125;</span>社区的注册信息，请点击下面的链接来激活帐户：&lt;/p&gt;</span><br><span class="hljs-string">        &lt;a href=&quot;<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.host&#125;</span>/active_account?key=<span class="hljs-subst">$&#123;token&#125;</span>&amp;name=<span class="hljs-subst">$&#123;username&#125;</span>&quot;&gt;激活链接&lt;/a&gt;</span><br><span class="hljs-string">        &lt;p&gt;若您没有在<span class="hljs-subst">$&#123;name&#125;</span>社区填写过注册信息，说明有人滥用了您的电子邮箱，请删除此邮件，我们对给您造成的打扰感到抱歉。&lt;/p&gt;</span><br><span class="hljs-string">        &lt;p&gt;<span class="hljs-subst">$&#123;name&#125;</span>社区 谨上。&lt;/p&gt;`</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">mailer</span>.<span class="hljs-title function_">send</span>(&#123;<br>        <span class="hljs-attr">from</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">from</span>,<br>        to,<br>        subject,<br>        html,<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里是实现激活邮件方法，前面写的<code>mailer</code>模块，服务里面提供的<code>send</code>方法，接受四个最基本的参数。</p><ul><li><code>this.name</code>是配置里面获取的<code>name</code></li><li><code>this.from</code>是配置里面获取的数据，拼接而成，具体看源码</li><li><code>this.host</code>是配置里面获取的数据，拼接而成，具体看源码</li><li><code>from</code>邮件发起者，<code>to</code>邮件接收者，<code>subject</code>显示在邮件列表的标题，<code>html</code>邮件内容。</li></ul><p>我们在注册成功时候直接去调用它就好了。</p><p><strong>注意</strong>：我在本地测试，使用 163 邮箱作为发送者，用 qq 注册，就会被拦截，出现在垃圾邮箱里面。</p><h3 id="验证注册邮箱"><a href="#验证注册邮箱" class="headerlink" title="验证注册邮箱"></a>验证注册邮箱</h3><p>我们实现了发现邮箱的功能，接下来就来尝试验证走注册的功能及验证邮箱验证完成注册。</p><p>因为我只要一个发送邮箱的账号，和一个测试邮箱的的账号，我需要去数据库把我之前注册的账号删除了，从新完成注册。</p><p>填写信息，点击注册，就会发送一封邮件，是这个样子的：</p><p><a href="https://user-images.githubusercontent.com/6111778/56122270-a04a2600-5fa4-11e9-9df1-82a32a593217.png"><img src="https://user-images.githubusercontent.com/6111778/56122270-a04a2600-5fa4-11e9-9df1-82a32a593217.png" alt="I1A1)WG%(TW 532FZ)(AME9"></a></p><p>点击<code>激活链接</code>链接跳回来激活账号：</p><p><a href="https://user-images.githubusercontent.com/6111778/56122344-ce2f6a80-5fa4-11e9-84f9-93747d625a86.png">![2BAJ14WL_L}K{Z GZE{Q7`2](https://user-images.githubusercontent.com/6111778/56122344-ce2f6a80-5fa4-11e9-84f9-93747d625a86.png)</a></p><p>接下来我们就来实现<code>active_account</code>路由的逻辑</p><p>创建一个<code>account.dto</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@ValidatorFilter</span>(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-title class_">ViewsPath</span>.<span class="hljs-property">Notify</span>,<br>  <span class="hljs-attr">locals</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">key</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">priority</span>: &#123;<br>    <span class="hljs-attr">name</span>: [<span class="hljs-string">&#x27;IsNotEmpty&#x27;</span>],<br>    <span class="hljs-attr">key</span>: [<span class="hljs-string">&#x27;IsNotEmpty&#x27;</span>],<br>  &#125;,<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountDto</span> &#123;<br>  <span class="hljs-meta">@IsNotEmpty</span>(&#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;name不能为空&#x27;</span>,<br>  &#125;)<br>  <span class="hljs-meta">@Transform</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value.<span class="hljs-title function_">toLowerCase</span>(), &#123; <span class="hljs-attr">toClassOnly</span>: <span class="hljs-literal">true</span> &#125;)<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-meta">@IsNotEmpty</span>(&#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;key不能为空&#x27;</span>,<br>  &#125;)<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个很简单理解：需要 2 个参数，一个 name，一个 key，name 是用户名，key 是注册时候我们创建的标识，邮箱，密码，自定义盐混合一起加密。</p><p>通用消息模板：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ts">&lt;% <span class="hljs-title function_">layout</span>(<span class="hljs-string">&#x27;layout&#x27;</span>) -%&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;panel&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;header&#x27;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;breadcrumb&#x27;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;/&#x27;</span>&gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;divider&#x27;</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;active&#x27;</span>&gt;</span>通知<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;inner&#x27;</span>&gt;</span></span><br><span class="language-xml">            &lt;% if (typeof error !== &#x27;undefined&#x27; &amp;&amp; error) &#123; %&gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-error&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&lt;%= error %&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            &lt;% &#125; %&gt;</span><br><span class="language-xml">                &lt;% if (typeof success !== &#x27;undefined&#x27; &amp;&amp; success) &#123; %&gt;</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-success&quot;</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&lt;%= success %&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                &lt;% &#125; %&gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%- typeof referer !== &#x27;undefined&#x27; ? referer : &#x27;/&#x27; %&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;span-common&quot;</span>&gt;</span>返回<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这模板直接拿<code>cnode</code>的页面。</p><p>接下来就是控制器：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Controller</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> authService: AuthService,</span><br><span class="hljs-params">    </span>) &#123;&#125;<br>    ....<br>    <span class="hljs-comment">/** 激活账号 */</span><br>    <span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;/active_account&#x27;</span>)<br>    <span class="hljs-meta">@Render</span>(<span class="hljs-title class_">ViewsPath</span>.<span class="hljs-property">Notify</span>)<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">activeAccount</span>(<span class="hljs-params"><span class="hljs-meta">@Query</span>() account: AccountDto</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">activeAccount</span>(account);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要获取<code>url</code>的<code>?</code>后面的参数，需要用到<code>@Query()</code>装饰器，配合参数验证，最后拿到数据参数，丢给对应的服务去处理业务逻辑。</p><p><a href="https://github.com/Injectable">@Injectable</a>()<br>export class AuthService {<br>private readonly logger = new Logger(AuthService.name, true);<br>constructor(<br>private readonly userService: UserService,<br>private readonly config: ConfigService,<br>private readonly mailService: MailService,<br>) { }<br>…</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/** 激活账户 */</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">activeAccount</span>(<span class="hljs-params">&#123; name, key &#125;: AccountDto</span>) &#123;<br>    <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">findOne</span>(&#123;<br>        <span class="hljs-attr">loginname</span>: name,<br>    &#125;);<br>    <span class="hljs-comment">// 检查用户是否存在</span><br>    <span class="hljs-keyword">if</span> (!user) &#123;<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">error</span>: <span class="hljs-string">&#x27;用户不存在&#x27;</span> &#125;;<br>    &#125;<br>    <span class="hljs-comment">// 对比key是否正确</span><br>    <span class="hljs-keyword">if</span> (!user || utility.<span class="hljs-title function_">md5</span>(user.<span class="hljs-property">email</span> + user.<span class="hljs-property">pass</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;SESSION_SECRET&#x27;</span>)) !== key) &#123;<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">error</span>: <span class="hljs-string">&#x27;信息有误，帐号无法被激活。&#x27;</span> &#125;;<br>    &#125;<br>    <span class="hljs-comment">// 检查用户是否激活过</span><br>    <span class="hljs-keyword">if</span> (user.<span class="hljs-property">active</span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">error</span>: <span class="hljs-string">&#x27;帐号已经是激活状态。&#x27;</span>, <span class="hljs-attr">referer</span>: <span class="hljs-string">&#x27;/login&#x27;</span> &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果没有激活，就激活操作</span><br>    user.<span class="hljs-property">active</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">await</span> user.<span class="hljs-title function_">save</span>();<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">success</span>: <span class="hljs-string">&#x27;帐号已被激活，请登录&#x27;</span>, <span class="hljs-attr">referer</span>: <span class="hljs-string">&#x27;/login&#x27;</span> &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>}</p><p>注释已经写的很清晰的，就不在叙述的问题。接下来讲我们这篇文章的最后一个问题登录，在讲到登录之前需要简单科普一下怎么才算登录，它的凭证是什么？</p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="登录凭证"><a href="#登录凭证" class="headerlink" title="登录凭证"></a>登录凭证</h3><p>目前来说比较常用有 2 种一种是<code>session+cookie</code>，一种是<code>JSON Web Tokens</code>。</p><h4 id="session-cookie"><a href="#session-cookie" class="headerlink" title="session+cookie"></a>session+cookie</h4><p>session+cookie 是比较常见前后端一起那种。它是流程大概是这样的：</p><ol><li>前端发起 http 请求时有携带 cookie</li><li>后端拿到此 cookie 对比服务器 session，有登陆则放过此请求，无登录，redirect 到登录页面</li><li>前端登录，后端比对用户名密码，成功则生成唯一标识符，放在 session，并且存入浏览器 cookie</li><li>用户可以拿到自己的 cookie，就可以发起任何的客户端 http 请求</li></ol><p>注意：以上操作都是合法操作，如果个人过失暴露 cookie 给其他人，属于用户个人的行为，比如你在网吧里登录 QQ，服务端没有办法不允许这样操作。而客户端的人应有安全意识，在公共场所及时清空 cookie，或者停止使用一切 [不随 session 关闭而 cookie 失效] 的应用。</p><h4 id="JSON-Web-Tokens"><a href="#JSON-Web-Tokens" class="headerlink" title="JSON Web Tokens"></a>JSON Web Tokens</h4><p>JSON Web Tokens 是比较常见前后分离那种。它是流程大概是这样的：</p><ol><li>登录时候,客户端通过用户名与密码请求登录</li><li>服务端收到请求区验证用户名与密码</li><li>验证通过,服务端会签发一个 Token,再把这个 Token 发给客户端.</li><li>客户端收到 Token,存储到本地,如 Cookie,SessionStorage,LocalStorage.</li><li>客户端每次像服务器请求 API 接口时候,都要带上 Token.</li><li>服务端收到请求,验证 Token,如果通过就返回数据,否则提示报错信息.</li></ol><p>注意：前端是无设防的，不可以信任； 全部的校验都由后端完成</p><p>我们这里是前后端一体的，当然选择<code>session+cookie</code>。这里有篇文章介绍还行，<a href="http://wiki.jikexueyuan.com/project/node-lessons/cookie-session.html">传送门</a>。</p><p>我们这里登录需要实现 2 个，一个是本地登录，一个是第三方 github 登录。</p><h3 id="本地登录"><a href="#本地登录" class="headerlink" title="本地登录"></a>本地登录</h3><p><code>nestjs</code>已经帮我们封装好了<code>@nestjs/passport</code>，我们前面已经说了需要下载相关包。本地登录使用<code>passport-local</code>完成。</p><p>新写个模板，需要去定义一个枚举 ViewsPath 登录地址</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Controller</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> authService: AuthService,</span><br><span class="hljs-params">    </span>) &#123;&#125;<br>    ....<br>        <span class="hljs-comment">/** 登录模板 */</span><br>    <span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>    <span class="hljs-meta">@Render</span>(<span class="hljs-title class_">ViewsPath</span>.<span class="hljs-property">Login</span>)<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">loginView</span>(<span class="hljs-params"><span class="hljs-meta">@Req</span>() req: TRequest</span>) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-attr">error</span>: <span class="hljs-built_in">string</span> = req.<span class="hljs-title function_">flash</span>(<span class="hljs-string">&#x27;loginError&#x27;</span>)[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">pageTitle</span>: <span class="hljs-string">&#x27;登录&#x27;</span>, error&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>和正常注册模板控制器一样，这里多了一项<code>req.flash(&#39;loginError&#39;)[0]</code>，其实它是<code>connect-flash</code>中间件。其实我们自己写一个也完全没有问题，本身就没有几行代码，既然有轮子就用呗，它是做什么，就是帮我们去<code>session</code>记录消息，然后去获取，绑定在<code>Request</code>上。你需要安装它<code>npm install connect-flash -S</code>。</p><p>模板直接拷贝<code>cnode</code>的登录模板，改了一下请求地址。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ts"> <span class="hljs-comment">/** 本地登录提交 */</span><br><span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br><span class="hljs-meta">@UseGuards</span>(<span class="hljs-title class_">AuthGuard</span>(<span class="hljs-string">&#x27;local&#x27;</span>))<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">passportLocal</span>(<span class="hljs-params"><span class="hljs-meta">@Req</span>() req: TRequest, <span class="hljs-meta">@Res</span>() res: TResponse</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">logger</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(req.<span class="hljs-property">user</span>));<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">verifyLogin</span>(req, res, req.<span class="hljs-property">user</span>);<br>&#125;<br><span class="hljs-comment">/** 验证登录 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">verifyLogin</span>(<span class="hljs-params"><span class="hljs-meta">@Req</span>() req, <span class="hljs-meta">@Res</span>() res, user: User</span>) &#123;<br>    <span class="hljs-comment">// id 存入 Cookie, 用于验证过期.</span><br>    <span class="hljs-keyword">const</span> auth_token = user.<span class="hljs-property">_id</span> + <span class="hljs-string">&#x27;$$$$&#x27;</span>; <span class="hljs-comment">// 以后可能会存储更多信息，用 $$$$ 来分隔</span><br>    <span class="hljs-comment">// 配置 Cookie</span><br>    <span class="hljs-keyword">const</span> opts = &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        <span class="hljs-attr">maxAge</span>: <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span>,<br>        <span class="hljs-attr">signed</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,<br>    &#125;;<br>    res.<span class="hljs-title function_">cookie</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;AUTH_COOKIE_NAME&#x27;</span>), auth_token, opts); <span class="hljs-comment">// cookie 有效期30天</span><br>    <span class="hljs-comment">// 调用 passport 的 login方法 传递 user信息</span><br>    req.<span class="hljs-title function_">login</span>(user, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 重定向首页</span><br>        res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用守卫，<code>AuthGuard</code>首页是<code>@nestjs/passport</code>。verifyLogin 是登录以后操作。为什么封装一个方法，等下 github 登录成功也是一样的操作。<code>login</code>方法是<code>passport</code>的方法，<code>user</code>就是我们拿到的用户信息。</p><p><strong>注意</strong>：这里的<code>passport-local</code>是网上的栗子实现有差别，网上栗子都可以配置，重定向的功能，</p><p>这是<a href="http://www.passportjs.org/docs/authenticate/">passport</a>文档里面的栗子。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>,<br>  passport.<span class="hljs-title function_">authenticate</span>(<span class="hljs-string">&#x27;local&#x27;</span>,<br>   &#123;<br>       <span class="hljs-attr">successRedirect</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">failureRedirect</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>   &#125;),t<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>这个坑我也捣鼓很久，无论成功还是失败重定向都需要手动去处理它。成功就是上面我那个<code>login</code>。</p><p>我们需要新增一个<code>passport</code>文件夹，里面放 passport 相关的业务。</p><p>新建一个<code>local.strategy.ts</code>，处理<code>passport-local</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PassportStrategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/passport&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Strategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;passport-local&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../auth.service&#x27;</span><br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PassportStrategy</span>(<span class="hljs-title class_">Strategy</span>, <span class="hljs-string">&#x27;local&#x27;</span>) &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> authService: AuthService</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(&#123;<br>      <span class="hljs-attr">usernameField</span>: <span class="hljs-string">&#x27;name&#x27;</span>,<br>      <span class="hljs-attr">passwordField</span>: <span class="hljs-string">&#x27;pass&#x27;</span>,<br>      <span class="hljs-attr">passReqToCallback</span>: <span class="hljs-literal">false</span>,<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-comment">// tslint:disable-next-line:ban-types</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">username: <span class="hljs-built_in">string</span>, password: <span class="hljs-built_in">string</span>, done: <span class="hljs-built_in">Function</span></span>) &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span><br>      .<span class="hljs-title function_">local</span>(username, password)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">user</span> =&gt;</span> <span class="hljs-title function_">done</span>(<span class="hljs-literal">null</span>, user))<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-title function_">done</span>(err, <span class="hljs-literal">false</span>))<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就比较简单，就这么几行代码，自定义一个本地策略，去继承<code>@nestjs/passport</code>一个父类，super 需要传递是<code>new LocalStrategy(&#39;配置对象&#39;)</code>，<code>validate</code>是一个抽象方法，我们必须要去实现的，因为<code>@nestjs/passport</code>也不知道我们是怎么样查询用户是否存在，这个验证方法暴露给我们的去实现。<code>done</code>就相当于是<code>callback</code>，标准 nodejs 回调函数参数，第一个是表示错误，第二个是用户信息。</p><p>放到<code>AuthModule</code>里面去做服务申明。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">SharedModule</span>],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">AuthService</span>, <span class="hljs-title class_">AuthSerializer</span>, <span class="hljs-title class_">LocalStrategy</span>],<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">AuthController</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>AuthSerializer 也是和<code>passport</code>相关的，它里面需要实现 2 个方法<code>serializeUser</code>,<code>deserializeUser</code>。</p><ul><li>serializeUser：将用户信息序列化后存进 session 里面，一般需要精简，只保存个别字段</li><li>deserializeUser：反序列化后把用户信息从 session 中取出来，反查数据库拿到完整信息</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PassportSerializer</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/passport&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthSerializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PassportSerializer</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 序列化用户</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">user</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">done</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">serializeUser</span>(<span class="hljs-params">user: <span class="hljs-built_in">any</span>, done: (error: <span class="hljs-literal">null</span>, user: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">any</span></span>) &#123;<br>    <span class="hljs-title function_">done</span>(<span class="hljs-literal">null</span>, user)<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 反序列化用户</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">payload</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">done</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">deserializeUser</span>(<span class="hljs-params">payload: <span class="hljs-built_in">any</span>, done: (error: <span class="hljs-literal">null</span>, payload: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">any</span></span>) &#123;<br>    <span class="hljs-title function_">done</span>(<span class="hljs-literal">null</span>, payload)<br>  &#125;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们这里先简单粗暴把所有信息全部存到<code>session</code>，先实现功能，其他后面再优化。</p><p>接下来去服务实现<code>local</code>方法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// Validation methods</span><br><span class="hljs-keyword">const</span> validator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Validator</span>();<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthService</span> &#123;<br>    ...<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">local</span>(<span class="hljs-params">username: <span class="hljs-built_in">string</span>, password: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-comment">// 处理用户名和密码前后空格，用户名全部小写 保证和注册一致</span><br>        username = username.<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">toLowerCase</span>();<br>        password = password.<span class="hljs-title function_">trim</span>();<br>        <span class="hljs-comment">// 验证用户名</span><br>        <span class="hljs-comment">// 可以用户名登录 /^[a-zA-Z0-9\-_]\w&#123;4,20&#125;$/</span><br>        <span class="hljs-comment">// 可以邮箱登录 标准邮箱格式</span><br>        <span class="hljs-comment">// 做一个验证用户名适配器</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-title function_">verifyUsername</span> = (<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>            <span class="hljs-comment">// 如果输入账号里面有@，表示是邮箱</span><br>            <span class="hljs-keyword">if</span> (name.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;@&#x27;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> validator.<span class="hljs-title function_">isEmail</span>(name);<br>            &#125;<br>            <span class="hljs-keyword">return</span> validator.<span class="hljs-title function_">matches</span>(name, <span class="hljs-regexp">/^[a-zA-Z0-9\-_]\w&#123;4,20&#125;$/</span>);<br>        &#125;;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">verifyUsername</span>(username)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnauthorizedException</span>(<span class="hljs-string">&#x27;用户名格式不正确。&#x27;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 验证密码 密码长度是6-18位</span><br>        <span class="hljs-keyword">if</span> (!validator.<span class="hljs-title function_">isByteLength</span>(password, <span class="hljs-number">6</span>, <span class="hljs-number">18</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnauthorizedException</span>(<span class="hljs-string">&#x27;密码长度不是6-18位。&#x27;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 做一个获取用户适配器</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-title function_">getUser</span> = (<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>            <span class="hljs-comment">// 如果输入账号里面有@，表示是邮箱</span><br>            <span class="hljs-keyword">if</span> (name.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;@&#x27;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">getUserByMail</span>(name);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">getUserByLoginName</span>(name);<br>        &#125;;<br>        <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getUser</span>(username);<br>        <span class="hljs-comment">// 检查用户是否存在</span><br>        <span class="hljs-keyword">if</span> (!user) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnauthorizedException</span>(<span class="hljs-string">&#x27;用户不存在。&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">const</span> equal = <span class="hljs-title function_">compareSync</span>(password, user.<span class="hljs-property">pass</span>);<br>        <span class="hljs-comment">// 密码不匹配</span><br>        <span class="hljs-keyword">if</span> (!equal) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnauthorizedException</span>(<span class="hljs-string">&#x27;用户密码不匹配。&#x27;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 用户未激活</span><br>        <span class="hljs-keyword">if</span> (!user.<span class="hljs-property">active</span>) &#123;<br>            <span class="hljs-comment">// 发送激活邮件</span><br>            <span class="hljs-keyword">const</span> token = utility.<span class="hljs-title function_">md5</span>(user.<span class="hljs-property">email</span> + user.<span class="hljs-property">pass</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;SESSION_SECRET&#x27;</span>));<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">mailService</span>.<span class="hljs-title function_">sendActiveMail</span>(user.<span class="hljs-property">email</span>, token, user.<span class="hljs-property">loginname</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnauthorizedException</span>(<span class="hljs-string">&#x27;此帐号还没有被激活，激活链接已发送到 &#x27;</span> + user.<span class="hljs-property">email</span> + <span class="hljs-string">&#x27; 邮箱，请查收。&#x27;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 验证通过</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面都有注释，这里说明一下为什么需要在这里去验证字段信息，这也是使用<code>@nestjs/passport</code>坑。</p><p>验证使用<code>class-validator</code>提供的验证器类<code>Validator</code>，其他验证方法和我们注册保持一致。注释都已经一一说明。</p><p>错误都使用<code>throw new UnauthorizedException(&#39;错误信息&#39;);</code>这样的方式去抛出，这也是在<code>AuthGuard</code>源码里面，有个处理请求方法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">handleRequest</span>(err, user, info): <span class="hljs-title class_">TUser</span> &#123;<br>      <span class="hljs-keyword">if</span> (err || !user) &#123;<br>        <span class="hljs-keyword">throw</span> err || <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnauthorizedException</span>();<br>      &#125;<br>      <span class="hljs-keyword">return</span> user;<br>    &#125;<br></code></pre></td></tr></table></figure><p>只要有错误，就回去走错误，这个错误就被<code>ExceptionFilter</code>捕获，我们有自定义的<code>HttpExceptionFilter</code>，等下就来讲它。<br>只有没有错误，成功才会返回 user，这时候去走，<code>serializeUser</code>, <code>deserializeUser</code>, <code>passportLocal</code>最后重定向到首页。</p><p><strong>注意</strong>：抛出异常一定要用<code>throw</code>，不用使用<code>return</code>。用<code>return</code>就直接走<code>serializeUser</code>，然后报错了。</p><p>错误处理，因为这个身份认证只要出错返回都是 401，那么我们需要去捕获处理一下，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts">...<br>            <span class="hljs-keyword">case</span> <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">UNAUTHORIZED</span>: <span class="hljs-comment">// 如果错误码 401</span><br>                request.<span class="hljs-title function_">flash</span>(<span class="hljs-string">&#x27;loginError&#x27;</span>, exception.<span class="hljs-property">message</span>.<span class="hljs-property">message</span> || <span class="hljs-string">&#x27;信息不全。&#x27;</span>);<br>                response.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/login&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br> ...<br></code></pre></td></tr></table></figure><p>默认<code>handleRequest</code>返回是一个空的，<code>exception.message.message</code>是<code>undefined</code>，这是<code>passport</code>返回，只要用户名或者密码没有填，都会返回这个错误信息，对应我们来捕获错误也是一脸懵逼，我看<code>cndoe</code>是直接返回<code>信息不全。</code>，这里就一样简单粗暴处理了。</p><blockquote><p>说多了都是眼泪，这个地方卡了我很久。这篇文章卡壳，它需要付 50%责任，因为网上没有关于<code>@nestjs/passport</code>的<code>passport-local</code>的栗子。大多数都是<code>jwt</code>栗子，比较折腾，试过各种方法方式。</p></blockquote><h3 id="github-登录"><a href="#github-登录" class="headerlink" title="github 登录"></a>github 登录</h3><p>这个玩意就本地登录简单多了。先说下流程：</p><p>我们网站叫<code>nest-cnode</code></p><ol><li>nest-cnode 网站让用户跳转到 GitHub。</li><li>GitHub 要求用户登录，然后询问”nest-cnode 网站要求获得 xx 权限，你是否同意？”</li><li>用户同意，GitHub 就会重定向回 nest-cnode 网站，同时发回一个授权码。</li><li>nest-cnode 网站使用授权码，向 GitHub 请求令牌。</li><li>GitHub 返回令牌.</li><li>nest-cnode 网站使用令牌，向 GitHub 请求用户数据。</li></ol><p>接下来我们就去实现一下：</p><p>先 github 申请一个认证，应用登记。</p><p>一个应用要求 OAuth 授权，必须先到对方网站登记，让对方知道是谁在请求。</p><p>所以，我们要先去 GitHub 登记一下。这是免费的。</p><p>访问这个<a href="https://github.com/settings/applications/new">网址</a>，填写登记表。</p><p><a href="https://user-images.githubusercontent.com/6111778/56720050-78ad4780-6774-11e9-8503-e494f8bc79b9.png"><img src="https://user-images.githubusercontent.com/6111778/56720050-78ad4780-6774-11e9-8503-e494f8bc79b9.png" alt="%V}9$D4LD_4YLFKXRTVJ7QP"></a></p><p>应用的名称随便填，主页 URL 填写<code>http://localhost:3000</code>，跳转网址填写 <code>http://localhost:3000/github/callback</code>。</p><p>提交表单以后，GitHub 应该会返回客户端 ID（client ID）和客户端密钥（client secret），这就是应用的身份识别码。</p><p>我们创建一个<code>github.strategy.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GithubStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PassportStrategy</span>(<span class="hljs-title class_">Strategy</span>) &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> config: ConfigService</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(&#123;<br>      <span class="hljs-attr">clientID</span>: config.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;GITHUB_CLIENT_ID&#x27;</span>),<br>      <span class="hljs-attr">clientSecret</span>: config.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;GITHUB_CLIENT_SECRET&#x27;</span>),<br>      <span class="hljs-attr">callbackURL</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;config.get(<span class="hljs-string">&#x27;HOST&#x27;</span>)&#125;</span>:<span class="hljs-subst">$&#123;config.get(<span class="hljs-string">&#x27;PORT&#x27;</span>)&#125;</span>/github/callback`</span>,<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-comment">// tslint:disable-next-line:ban-types</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">accessToken, refreshToken, profile: GitHubProfile, done: <span class="hljs-built_in">Function</span></span>) &#123;<br>    profile.<span class="hljs-property">accessToken</span> = accessToken<br>    <span class="hljs-title function_">done</span>(<span class="hljs-literal">null</span>, profile)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要配置<code>clientID</code>, <code>clientSecret</code>, <code>callbackURL</code>, 这 3 个东西，我们上面图里面都有。把它申明到模块里面去。</p><p>github2 个必备的路由：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/** github登录提交 */</span><br><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;/github&#x27;</span>)<br><span class="hljs-meta">@UseGuards</span>(<span class="hljs-title class_">AuthGuard</span>(<span class="hljs-string">&#x27;github&#x27;</span>))<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">github</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;/github/callback&#x27;</span>)<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">githubCallback</span>(<span class="hljs-params"><span class="hljs-meta">@Req</span>() req: TRequest, <span class="hljs-meta">@Res</span>() res: TResponse</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">logger</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(req.<span class="hljs-property">user</span>));<br>    <span class="hljs-keyword">const</span> existUser = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">github</span>(req.<span class="hljs-property">user</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">verifyLogin</span>(req, res, existUser);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要 github 登录时候就去请求<code>/github</code>路由，使用守卫，告诉守卫使用<code>github</code>策略。这个方法随便写，返回都会重定向到<a href="https://github.com/">github.com</a>，填完登录信息，就会自动跳转到<code>githubCallback</code>方法里面，<code>req.user</code>返回就是 github 给我们提供的所有信息。我们需要去和我们用户系统做关联。</p><p>服务 github 方法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">async</span> <span class="hljs-title function_">github</span>(<span class="hljs-params">profile: GitHubProfile</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!profile) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnauthorizedException</span>(<span class="hljs-string">&#x27;您 GitHub 账号的 认证失败&#x27;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 获取用户的邮箱</span><br>        <span class="hljs-keyword">const</span> email = profile.<span class="hljs-property">emails</span> &amp;&amp; profile.<span class="hljs-property">emails</span>[<span class="hljs-number">0</span>] &amp;&amp; profile.<span class="hljs-property">emails</span>[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>;<br>        <span class="hljs-comment">// 根据 githubId 查找用户</span><br>        <span class="hljs-keyword">let</span> existUser = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">getUserByGithubId</span>(profile.<span class="hljs-property">id</span>);<br><br>        <span class="hljs-comment">// 用户不存在则创建</span><br>        <span class="hljs-keyword">if</span> (!existUser) &#123;<br>            existUser = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">getMode</span>();<br>            existUser.<span class="hljs-property">githubId</span> = profile.<span class="hljs-property">id</span>;<br>            existUser.<span class="hljs-property">active</span> = <span class="hljs-literal">true</span>;<br>            existUser.<span class="hljs-property">accessToken</span> = profile.<span class="hljs-property">accessToken</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 用户存在，更新字段</span><br>        existUser.<span class="hljs-property">loginname</span> = profile.<span class="hljs-property">username</span>;<br>        existUser.<span class="hljs-property">email</span> = email || existUser.<span class="hljs-property">email</span>;<br>        existUser.<span class="hljs-property">avatar</span> = profile.<span class="hljs-property">_json</span>.<span class="hljs-property">avatar_url</span>;<br>        existUser.<span class="hljs-property">githubUsername</span> = profile.<span class="hljs-property">username</span>;<br>        existUser.<span class="hljs-property">githubAccessToken</span> = profile.<span class="hljs-property">accessToken</span>;<br><br>        <span class="hljs-comment">// 保存用户到数据库</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">await</span> existUser.<span class="hljs-title function_">save</span>();<br>            <span class="hljs-comment">// 返回用户</span><br>            <span class="hljs-keyword">return</span> existUser;<br>        &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>            <span class="hljs-comment">// 获取MongoError错误信息</span><br>            <span class="hljs-keyword">const</span> errmsg = error.<span class="hljs-property">errmsg</span> || <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-comment">// 处理邮箱和用户名重复问题</span><br>            <span class="hljs-keyword">if</span> (errmsg.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;duplicate key error&#x27;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (errmsg.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;email&#x27;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnauthorizedException</span>(<span class="hljs-string">&#x27;您 GitHub 账号的 Email 与之前在 CNodejs 注册的 Email 重复了&#x27;</span>);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (errmsg.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;loginname&#x27;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnauthorizedException</span>(<span class="hljs-string">&#x27;您 GitHub 账号的用户名与之前在 CNodejs 注册的用户名重复了&#x27;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalServerErrorException</span>(error);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：<code>profile</code>返回信息可能是个<code>undefined</code>，因为认证可能会失败，需要去处理一下，不然后面代码全挂了。O(∩_∩)O 哈哈~。</p><p>登录功能基本完成了，需要判断用户登录。</p><p>我们需要写一个中间件，<code>current_user.middleware.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">NestMiddleware</span>, <span class="hljs-title class_">MiddlewareFunction</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CurrentUserMiddleware</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestMiddleware</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  <span class="hljs-title function_">resolve</span>(...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>[]): <span class="hljs-title class_">MiddlewareFunction</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>      res.<span class="hljs-property">locals</span>.<span class="hljs-property">current_user</span> = <span class="hljs-literal">null</span><br>      <span class="hljs-keyword">const</span> &#123; user &#125; = req<br>      <span class="hljs-keyword">if</span> (!user) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>()<br>      &#125;<br>      res.<span class="hljs-property">locals</span>.<span class="hljs-property">current_user</span> = user<br>      <span class="hljs-title function_">next</span>()<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为<code>passport</code>登录成功以后，会自动给<code>req</code>添加一个属性<code>user</code>，我们只需要去判断它就可以了。</p><p><strong>注意</strong>：<code>nestjs</code>中间件和<code>express</code>中间件有区别：</p><p>express 定义的中间件，如果全局可以直接通过<code>express.use(中间件)</code>去申明使用。</p><p>nestjs 定义的中间件不能这么玩，需要在模块里面去申明使用。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;<br>  <span class="hljs-title function_">configure</span>(<span class="hljs-params">consumer: MiddlewareConsumer</span>) &#123;<br>    consumer.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">CurrentUserMiddleware</span>).<span class="hljs-title function_">forRoutes</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-attr">method</span>: <span class="hljs-title class_">RequestMethod</span>.<span class="hljs-property">ALL</span> &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们把全局的中间件都丢到<code>AppModule</code>，里面去申明使用。</p><p>修改一下<code>AppController</code>首页：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Get</span>()<br>  <span class="hljs-meta">@Render</span>(<span class="hljs-string">&#x27;index&#x27;</span>)<br>  <span class="hljs-title function_">root</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br></code></pre></td></tr></table></figure><p>登录前：</p><p><a href="https://user-images.githubusercontent.com/6111778/56723079-dc3a7380-677a-11e9-8429-d562ae754c3c.png">![KZWPT O)_GKL`$6 RAISBOX](https://user-images.githubusercontent.com/6111778/56723079-dc3a7380-677a-11e9-8429-d562ae754c3c.png)</a></p><p>登录后：</p><p><a href="https://user-images.githubusercontent.com/6111778/56723112-eb212600-677a-11e9-82da-c7a0b24700ec.png">![0SJTB2VL`C)C7P6F34KT6V5](https://user-images.githubusercontent.com/6111778/56723112-eb212600-677a-11e9-82da-c7a0b24700ec.png)</a></p><p>在弄个退出就完美了：它就更简单了:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Controller</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;<br>  <span class="hljs-comment">/** 登出 */</span><br>  <span class="hljs-meta">@All</span>(<span class="hljs-string">&#x27;/logout&#x27;</span>)<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">logout</span>(<span class="hljs-params"><span class="hljs-meta">@Req</span>() req: TRequest, <span class="hljs-meta">@Res</span>() res: TResponse</span>) &#123;<br>    <span class="hljs-comment">// 销毁 session</span><br>    req.<span class="hljs-property">session</span>.<span class="hljs-title function_">destroy</span>()<br>    <span class="hljs-comment">// 清除 cookie</span><br>    res.<span class="hljs-title function_">clearCookie</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;AUTH_COOKIE_NAME&#x27;</span>), &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span> &#125;)<br>    <span class="hljs-comment">// 调用 passport 的 logout方法</span><br>    req.<span class="hljs-title function_">logout</span>()<br>    <span class="hljs-comment">// 重定向到首页</span><br>    res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>就是一波清空操作，调用<code>passport</code>的<code>logout</code>方法。</p><p>代码已更新，<a href="https://github.com/jiayisheji/nest-cnode">传送门</a>。</p><p>欲知后事如何，请听下回分解。</p><blockquote><p>中篇就到此为止了，最后感谢大家暴力吹更，让我坚持不懈的把它写完。后面就比较容易了。<a href="https://github.com/typeorm/typeorm">Typeorm</a>比较火，等我把全部业面写完了，会更新<code>typeorm</code>版操作<code>MongoDB</code>。回馈大家不离不弃的关注，再次感谢大家阅读。</p></blockquote><p><a href="https://github.com/jiayisheji/blog/issues/18">本文来自 https://github.com/jiayisheji/blog/issues/19</a></p>]]></content>
    
    
    <categories>
      
      <category>node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>nest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nest.js学习（一）</title>
    <link href="/blog/2021/01/28/node/nest_1/"/>
    <url>/blog/2021/01/28/node/nest_1/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是-Nest"><a href="#什么是-Nest" class="headerlink" title="什么是 Nest"></a>什么是 Nest</h2><p><a href="https://user-images.githubusercontent.com/6111778/44448923-46fd4300-a61f-11e8-86ba-f7ba68f708fc.png"><img src="https://user-images.githubusercontent.com/6111778/44448923-46fd4300-a61f-11e8-86ba-f7ba68f708fc.png" alt="nest_logo"></a></p><p><code>Nest</code>是一个强大的<code>Node web</code>框架。它可以帮助您轻松地构建高效、可伸缩的应用程序。它使用现代<code>JavaScript</code>，用<code>TypeScript</code>构建，结合了<code>OOP</code>(面向对象编程)和<code>FP</code>(函数式编程)的最佳概念。</p><p>它不仅仅是另一个框架。你不需要等待一个大的社区，因为<code>Nest</code>是用非常棒的、流行的知名库——<code>Express</code>和<code>socket.io</code>构建的!这意味着，您可以快速开始使用框架，而不必担心第三方插件。</p><p>作者<a href="http://kamilmysliwiec.com/">Kamil Myśliwiec</a>初衷：</p><blockquote><p>JavaScript is awesome. Node.js gave us a possibility to use this language also on the server side. There are a lot of amazing libraries, helpers and tools on this platform, but non of them do not solve the main problem – the architecture. This is why I decided to create Nest framework.</p></blockquote><blockquote><p><strong>重要</strong>：<code>Nest</code> 受到 <code>Java Spring</code> 和 <code>Angular</code> 的启发。如果你用过 <code>Java Spring</code> 或 <code>Angular</code> 就会学起来非常容易，我本人一直使用 <code>Angular</code>。</p></blockquote><h2 id="Nest-核心概念"><a href="#Nest-核心概念" class="headerlink" title="Nest 核心概念"></a>Nest 核心概念</h2><p>Nest 的核心概念是提供一种体系结构，它帮助开发人员实现层的最大分离，并在应用程序中增加抽象。</p><h3 id="架构概览"><a href="#架构概览" class="headerlink" title="架构概览"></a>架构概览</h3><p><code>Nest</code>采用了<code>ES6</code>和<code>ES7</code>的特性(<code>decorator</code>, <code>async/await</code>)。如果想使用它们，需要用到<code>Babel</code>或<code>TypeScript</code>进行转换成 <code>es5</code>。</p><p><code>Nest</code>默认使用的是<a href="http://www.typescriptlang.org/">TypeScript</a>，也可以直接使用<code>JavaScript</code>，不过那样就没什么意义了。</p><blockquote><p>如果你使用过<a href="https://angular.cn/">Angular</a>，你来看这篇文章会觉得非常熟悉的感觉，因为它们大部分写法类似。如果你没有用过也没有关系，我将带领你一起学习它们。</p></blockquote><h3 id="模块-Module"><a href="#模块-Module" class="headerlink" title="模块 Module"></a>模块 Module</h3><p>使用<code>Nest</code>，您可以很自然地将代码拆分为独立的和可重用的模块。<code>Nest</code>模块是一个带有<code>@Module()</code>装饰器的类。这个装饰器提供元数据，框架使用元数据来组织应用程序结构。</p><p>每个 <code>Nest</code> 应用都有一个根模块，通常命名为 <code>AppModule</code>。根模块提供了用来启动应用的引导机制。 一个应用通常会包含很多功能模块。</p><p>像 <code>JavaScript</code> 模块一样，<code>@Module</code> 也可以从其它 <code>@Module</code> 中导入功能，并允许导出它们自己的功能供其它 <code>@Module</code> 使用。 比如，要在你的应用中使用<code>nest</code>提供的<code>mongoose</code>操作功能，就需要导入<code>MongooseModule</code>。</p><p>把你的代码组织成一些清晰的功能模块，可以帮助管理复杂应用的开发工作并实现可复用性设计。 另外，这项技术还能让你使用动态加载，<code>MongooseModule</code>就是使用这项技术。</p><p><code>@Module</code> 装饰器接受一个对象，该对象的属性描述了模块:</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>providers</code></td><td>由<code>Nest</code>注入器实例化的服务，可以在这个模块之间共享。</td></tr><tr><td><code>controllers</code></td><td>存放创建的一组控制器。</td></tr><tr><td><code>imports</code></td><td>导入此模块中所需的提供程序的模块列表。</td></tr><tr><td><code>exports</code></td><td>导出这个模块可以其他模块享用<code>providers</code>里的服务。</td></tr></tbody></table><p><code>@Module</code> 为一个控制器集声明了编译的上下文环境，它专注于某个应用领域、某个工作流或一组紧密相关的能力。 <code>@Module</code> 可以将其控制器和一组相关代码（如服务）关联起来，形成功能单元。</p><p>怎么组织一个模块结构图</p><p>AppModule 根模块</p><ul><li>CoreModule 核心模块（注册中间件，过滤器，管道，守卫，拦截器，装饰器等）</li><li>SharedModule 共享模块（注册服务，mongodb，redis 等）</li><li>ConfigModule 配置模块（系统配置）</li><li>FeatureModule 特性模块（业务模块，如用户模块，产品模块等）</li></ul><p>在<code>Nest</code>中，模块默认是单例的，因此可以在多个模块之间共享任何提供者的同一个实例。共享模块毫不费力。</p><p>整体看起来比较干净清爽，这也是我在<code>Angular</code>项目中一直使用的模块划分。</p><p>如果你有更好建议，欢迎和我一起交流改进。</p><h3 id="控制器-Controller"><a href="#控制器-Controller" class="headerlink" title="控制器 Controller"></a>控制器 Controller</h3><p>控制器负责处理客户端传入的请求参数并向客户端返回响应数据，说的通俗点就是路由<code>Router</code>。</p><p>为了创建一个基本的控制器，我们使用<code>@Controller</code>装饰器。它们将类与基本的元数据相关联，因此<code>Nest</code>知道如何将控制器映射到相应的路由。</p><p><code>@Controller</code>它是定义基本控制器所必需的。<code>@Controller(&#39;Router Prefix&#39;)</code>是类中注册的每个路由的可选前缀。使用前缀可以避免在所有路由共享一个公共前缀时重复使用自己。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;user&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>  <span class="hljs-meta">@Get</span>()<br>  <span class="hljs-title function_">findAll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> []<br>  &#125;<br><br>  <span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;/admin&#x27;</span>)<br>  <span class="hljs-title function_">admin</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;&#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">//  findAll访问就是  xxx/user</span><br><span class="hljs-comment">//  admin访问就是    xxx/user/admin</span><br></code></pre></td></tr></table></figure><p>控制器是一个比较核心功能，所有的业务都是围绕它来开展。<code>Nest</code>也提供很多相关的装饰器，接下来一一介绍他们，这里只是简单说明，后面实战会介绍他们的使用。</p><p>请求对象表示 HTTP 请求，并具有请求查询字符串、参数、HTTP 标头等属性，但在大多数情况下，不需要手动获取它们。我们可以使用专用的<code>decorator</code>，例如<code>@Body()</code>或<code>@Query()</code>，它们是开箱即用的。下面是<code>decorator</code>与普通<code>Express</code>对象的比较。</p><p>先说方法参数装饰器：</p><table><thead><tr><th>装饰器名称</th><th>描述</th></tr></thead><tbody><tr><td><code>@Request()</code></td><td>对应<code>Express</code>的<code>req</code>，也可以简写<code>@req</code></td></tr><tr><td><code>@Response()</code></td><td>对应<code>Express</code>的<code>res</code>，也可以简写<code>@res</code></td></tr><tr><td><code>@Next()</code></td><td>对应<code>Express</code>的<code>next</code></td></tr><tr><td><code>@Session()</code></td><td>对应<code>Express</code>的<code>req.session</code></td></tr><tr><td><code>@Param(param?: string)</code></td><td>对应<code>Express</code>的<code>req.params</code></td></tr><tr><td><code>@Body(param?: string)</code></td><td>对应<code>Express</code>的<code>req.body</code></td></tr><tr><td><code>@Query(param?: string)</code></td><td>对应<code>Express</code>的<code>req.query</code></td></tr><tr><td><code>@Headers(param?: string)</code></td><td>对应<code>Express</code>的<code>req.headers</code></td></tr></tbody></table><p>先说方法装饰器：</p><table><thead><tr><th>装饰器名称</th><th>描述</th></tr></thead><tbody><tr><td><code>@Post()</code></td><td>对应<code>Express</code>的<code>Post</code>方法</td></tr><tr><td><code>@Get()</code></td><td>对应<code>Express</code>的<code>Get</code>方法</td></tr><tr><td><code>@Put()</code></td><td>对应<code>Express</code>的<code>Put</code>方法</td></tr><tr><td><code>@Delete()</code></td><td>对应<code>Express</code>的<code>Delete</code>方法</td></tr><tr><td><code>@All()</code></td><td>对应<code>Express</code>的<code>All</code>方法</td></tr><tr><td><code>@Patch()</code></td><td>对应<code>Express</code>的<code>Patch</code>方法</td></tr><tr><td><code>@Options()</code></td><td>对应<code>Express</code>的<code>Options</code>方法</td></tr><tr><td><code>@Head()</code></td><td>对应<code>Express</code>的<code>Head</code>方法</td></tr><tr><td><code>@Render()</code></td><td>对应<code>Express</code>的<code>res.render</code>方法</td></tr><tr><td><code>@Header()</code></td><td>对应<code>Express</code>的<code>res.header</code>方法</td></tr><tr><td><code>@HttpCode()</code></td><td>对应<code>Express</code>的<code>res.status</code>方法，可以配合<code>HttpStatus</code>枚举</td></tr></tbody></table><p>以上基本都是控制器装饰器，一些常用的 HTTP 请求参数需要使用对应的方法装饰器和参数来配合使用。</p><p>关于返回响应数据，<code>Nest</code>也提供 2 种解决方案：</p><ol><li>直接返回一个<code>JavaScript</code>对象或数组时，它将被自动解析为<code>JSON</code>。当我们返回一个字符串时，<code>Nest</code>只发送一个字符串，而不尝试解析它。默认情况下，响应的状态代码总是<code>200</code>,<br>但<code>POST</code>请求除外，它使用<code>201</code>。可以使用<code>@HttpCode(HttpStatus.xxxx)</code>装饰器可以很容易地改变这种行为。</li><li>我们可以使用库特定的响应对象，我们这里可以使用<a href="https://github.com/res">@res</a>()修饰符在函数签名中注入该对象，<br><code>res.status(HttpStatus.CREATED).send()</code>或者<code>res.status(HttpStatus.OK).json([])</code>等<code>Express</code>的<code>res</code>方法。</li></ol><p><strong>注意</strong>：禁止同时使用这两种方法，如果 2 个都使用，那么会出现这个路由不工作的情况。如果你在使用时候发现路由不响应，请检查有没有出现混用的情况，如果是正常情况下，推荐第一种方式返回。</p><blockquote><p>控制器必须注册到该模块元数据的<code>controllers</code>里才能正常工作。</p></blockquote><p>关于控制器异常处理，在后面过滤器讲解。</p><h3 id="服务与依赖注入-Provider-Dependency-injection"><a href="#服务与依赖注入-Provider-Dependency-injection" class="headerlink" title="服务与依赖注入 Provider Dependency injection"></a>服务与依赖注入 Provider Dependency injection</h3><p>服务是一个广义的概念，它包括应用所需的任何值、函数或特性。狭义的服务是一个明确定义了用途的类。它应该做一些具体的事，并做好。</p><p><code>Nest</code> 把控制器和服务区分开，以提高模块性和复用性。</p><p>通过把控制器中和逻辑有关的功能与其他类型的处理分离开，你可以让控制器类更加精简、高效。 理想情况下，控制器的工作只管申明装饰器和响应数据，而不用顾及其它。 它应该提供请求和响应桥梁，以便作为视图（由模板渲染）和应用逻辑（通常包含一些模型的概念）的中介者。</p><p>控制器不需要定义任何诸如从客户端获取数据、验证用户输入或直接往控制台中写日志等工作。 而要把这些任务委托给各种服务。通过把各种处理任务定义到可注入的服务类中，你可以让它可以被任何控制器使用。 通过在不同的环境中注入同一种服务的不同提供商，你还可以让你的应用更具适应性。</p><p><code>Nest</code> 不会强制遵循这些原则。它只会通过依赖注入让你能更容易地将应用逻辑分解为服务，并让这些服务可用于各个控制器中。</p><p>控制器是服务的消费者，也就是说，你可以把一个服务注入到控制器中，让控制器类得以访问该服务类。</p><p>那么服务就是提供者，基本上，几乎所有事情都可以看作是提供者—服务、存储库、工厂、助手等等。它们都可以通过构造函数注入依赖关系，这意味着它们可以彼此创建各种关系。</p><p>在 <code>Nest</code> 中，要把一个类定义为服务，就要用 <code>@Injectable</code> 装饰器来提供元数据，以便让 <code>Nest</code> 可以把它作为依赖注入到控制器中。</p><p>同样，也要使用 <code>@Injectable</code> 装饰器来表明一个控制器或其它类（比如另一个服务、模块等）拥有一个依赖。 依赖并不必然是服务，它也可能是函数或值等等。</p><p>依赖注入（通常简称 DI）被引入到 <code>Nest</code> 框架中，并且到处使用它，来为新建的控制器提供所需的服务或其它东西。</p><p>注入器是主要的机制。你不用自己创建 <code>Nest</code> 注入器。<code>Nest</code> 会在启动过程中为你创建全应用级注入器。</p><p>该注入器维护一个包含它已创建的依赖实例的容器，并尽可能复用它们。</p><p>提供者是创建依赖项的配方。对于服务来说，它通常就是这个服务类本身。你在应用中要用到的任何类都必须使用该应用的注入器注册一个提供商，以便注入器可以使用它来创建新实例。</p><p>关于依赖注入，前端框架<code>Angular</code>应该是最出名的，可以看<a href="https://angular.cn/guide/dependency-injection-pattern">这里</a>介绍。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 用户服务</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">User</span> &#123;&#125;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-attr">user</span>: <span class="hljs-title class_">User</span>[] = []<br><br>  <span class="hljs-title function_">create</span>(<span class="hljs-params">cat: User</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">User</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">findAll</span>(): <span class="hljs-title class_">User</span>[] &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 用户控制器</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Get</span>, <span class="hljs-title class_">Post</span>, <span class="hljs-title class_">Body</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.service&#x27;</span><br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;user&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> userService: UserService</span>) &#123;&#125;<br><br>  <span class="hljs-meta">@Post</span>()<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() createUserDto: CreateUserDto</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">create</span>(createUserDto)<br>  &#125;<br><br>  <span class="hljs-meta">@Get</span>()<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">findAll</span>(): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">User</span>[]&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">findAll</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义服务</p><p>我们不光可以使用<code>@Injectable()</code>来定义服务，还可以使用其他三种方式：<code>value</code>、<code>class</code>、<code>factory</code>。<br>这个和 Angular 一样，默认<code>@Injectable()</code>来定义服务就是<code>class</code>。</p><p>使用<code>value</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> customObject = &#123;&#125;;<br><span class="hljs-meta">@Module</span>(&#123;<br>    <span class="hljs-attr">controllers</span>: [ <span class="hljs-title class_">UsersController</span> ],<br>    <span class="hljs-attr">components</span>: [<br>        &#123; <span class="hljs-attr">provide</span>: <span class="hljs-title class_">UsersService</span>, <span class="hljs-attr">useValue</span>: customObject &#125;<br>    ],<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<code>useValue</code>可以是任何值，在这个模块中，<code>Nest</code>将把<code>customObject</code>与<code>UsersService</code>相关联，你还可以使用做测试替身(单元测试)。</p></blockquote><p>使用<code>class</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.service&#x27;</span>;<br><span class="hljs-keyword">const</span> customObject = &#123;&#125;;<br><span class="hljs-meta">@Module</span>(&#123;<br>    <span class="hljs-attr">controllers</span>: [ <span class="hljs-title class_">UsersController</span> ],<br>    <span class="hljs-attr">components</span>: [<br>        &#123; <span class="hljs-attr">provide</span>: <span class="hljs-title class_">UsersService</span>, <span class="hljs-attr">useClass</span>: <span class="hljs-title class_">UserService</span> &#125;<br>        <span class="hljs-variable constant_">OR</span><br>        <span class="hljs-title class_">UserService</span><br>    ],<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：只需要在本模块中使用选定的、更具体的类，<code>useClass</code>可以是和<code>provide</code>一样，如果不一样就相当于<code>useClass</code>替换<code>provide</code>。简单理解换方法，不换方法名，常用处理不同环境依赖注入。</p></blockquote><p>使用<code>factory</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Module</span>(&#123;<br>    <span class="hljs-attr">controllers</span>: [ <span class="hljs-title class_">UsersController</span> ],<br>    <span class="hljs-attr">components</span>: [<br>        <span class="hljs-title class_">ChatService</span>,<br>        &#123;<br>            <span class="hljs-attr">provide</span>: <span class="hljs-title class_">UsersService</span>,<br>            <span class="hljs-attr">useFactory</span>: <span class="hljs-function">(<span class="hljs-params">chatService</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&#x27;customValue&#x27;</span>);<br>            &#125;,<br>            <span class="hljs-attr">inject</span>: [ <span class="hljs-title class_">ChatService</span> ]<br>        &#125;<br>    ],<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：希望提供一个值，该值必须使用其他组件(或自定义包特性)计算，希望提供异步值(只返回可观察的或承诺的值)，例如数据库连接。<code>inject</code>依赖服务，<code>provide</code>注册名，<code>useFactory</code>处理方式，<code>useFactory</code>参数和<code>inject</code>注入数组顺序一样。</p></blockquote><p>如果我们<code>provide</code>注册名不是一个服务怎么办，是一个字符串<code>key</code>，也是很常用的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Module</span>(&#123;<br>    <span class="hljs-attr">controllers</span>: [ <span class="hljs-title class_">UsersController</span> ],<br>    <span class="hljs-attr">components</span>: [<br>        &#123; <span class="hljs-attr">provide</span>: <span class="hljs-string">&#x27;isProductionMode&#x27;</span>, <span class="hljs-attr">useValue</span>: <span class="hljs-literal">false</span> &#125;<br>    ],<br>&#125;)<br></code></pre></td></tr></table></figure><p>要用选择的自定义字符串<code>key</code>，您必须告诉 Nest，需要用到<code>@Inject()</code>装饰器，就像这样:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">Inject</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nest.js&#x27;</span><br><br><span class="hljs-meta">@Component</span>()<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SampleComponent</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-meta">@Inject</span>(<span class="hljs-string">&#x27;isProductionMode&#x27;</span>) <span class="hljs-keyword">private</span> isProductionMode: <span class="hljs-built_in">boolean</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(isProductionMode) <span class="hljs-comment">// false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还有一个循环依赖的坑，后面实战会介绍怎么避免和解决这个坑。</p><blockquote><p>服务必须注册到该模块元数据的<code>providers</code>里才能正常工作。如果需要给其他模块使用，需要添加到<code>exports</code>中。</p></blockquote><h3 id="中间件-Middleware"><a href="#中间件-Middleware" class="headerlink" title="中间件 Middleware"></a>中间件 Middleware</h3><p>中间件是在路由处理程序之前调用的函数。中间件功能可以访问请求和响应对象，以及应用程序请求-响应周期中的下一个中间件功能。下一个中间件函数通常由一个名为<code>next</code>的变量表示。在<code>Express</code>中的中间件是非常出名的。</p><p>默认情况下，<code>Nest</code>中间件相当于表示<code>Express</code>中间件。和<code>Express</code>中间件功能类似，中间件功能可以执行以下任务</p><ul><li>执行任何代码。</li><li>对请求和响应对象进行更改。</li><li>请求-响应周期结束。</li><li>调用堆栈中的下一个中间件函数。</li><li>如果当前中间件函数没有结束请求-响应周期，它必须调用<code>next()</code>将控制权传递给下一个中间件函数。否则，请求将被挂起。</li></ul><p>简单理解<code>Nest</code>中间件就是把<code>Express</code>中间件进行了包装。那么好处就是只要你想用中间件，可以立马搜索<code>Express</code>中间件，拿来即可使用。是不是很方便。</p><p><code>Nest</code>中间件要么是一个函数，要么是一个带有<code>@Injectable()</code>装饰器的类。类应该实现<code>NestMiddleware</code>接口，而函数却没有任何特殊要求。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 实现一个带有`@Injectable()`装饰器的类打印中间件</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">NestMiddleware</span>, <span class="hljs-title class_">MiddlewareFunction</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggerMiddleware</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestMiddleware</span> &#123;<br>  <span class="hljs-title function_">resolve</span>(...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>[]): <span class="hljs-title class_">MiddlewareFunction</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Request...&#x27;</span>)<br>      <span class="hljs-title function_">next</span>()<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>怎么使用，有两种方式：</p><ol><li>中间件可以全局注册</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 创建Nest.js实例</span><br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>, application, &#123;<br>    <span class="hljs-attr">bodyParser</span>: <span class="hljs-literal">true</span>,<br>  &#125;)<br>  <span class="hljs-comment">// 注册中间件</span><br>  app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">LoggerMiddleware</span>())<br>  <span class="hljs-comment">// 监听3000端口</span><br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>)<br>&#125;<br><span class="hljs-title function_">bootstrap</span>()<br></code></pre></td></tr></table></figure><ol><li>中间件可以模块里局部注册</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CnodeModule</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestModule</span> &#123;<br>  <span class="hljs-title function_">configure</span>(<span class="hljs-params">consumer: MiddlewareConsumer</span>) &#123;<br>    consumer<br>      .<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">LoggerMiddleware</span>)<br>      .<span class="hljs-title function_">with</span>(<span class="hljs-string">&#x27;ApplicationModule&#x27;</span>)<br>      .<span class="hljs-title function_">exclude</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">method</span>: <span class="hljs-title class_">RequestMethod</span>.<span class="hljs-property">GET</span> &#125;, &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">method</span>: <span class="hljs-title class_">RequestMethod</span>.<span class="hljs-property">POST</span> &#125;)<br>      .<span class="hljs-title function_">forRoutes</span>(<span class="hljs-title class_">UserController</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// or</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CnodeModule</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestModule</span> &#123;<br>  <span class="hljs-title function_">configure</span>(<span class="hljs-params">consumer: MiddlewareConsumer</span>) &#123;<br>    consumer.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">LoggerMiddleware</span>).<span class="hljs-title function_">forRoutes</span>(<span class="hljs-string">&#x27;*&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 1. with是提供数据，resolve里可以获取，exclude指定的路由，forRoutes注册路由，</span><br><span class="hljs-comment">// 2. forRoutes传递&#x27;*&#x27;表示作用全部路由</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：他们注册地方不一样，影响的路由也不一样，全局注册影响全部路由，局部注册只是影响当前路由下的路由。</p></blockquote><h3 id="过滤器-Exception-filter"><a href="#过滤器-Exception-filter" class="headerlink" title="过滤器 Exception filter"></a>过滤器 Exception filter</h3><p>异常过滤器层负责在整个应用程序中处理所有抛出的异常。当发现未处理的异常时，最终用户将收到适当的用户友好响应。</p><p>默认显示响应<code>JSON</code>信息</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts">&#123;<br>  <span class="hljs-string">&quot;statusCode&quot;</span>: <span class="hljs-number">500</span>,<br>  <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Internal server error&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用底层过滤器</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Post</span>()<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() createCatDto: CreateCatDto</span>) &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpException</span>(<span class="hljs-string">&#x27;Forbidden&#x27;</span>, <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">FORBIDDEN</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>HttpException 接受 2 个参数：</p><ul><li>消息内容，可以是字符串错误消息或者对象<code>&#123;status: 状态码，error：错误消息&#125;</code></li><li>状态码</li></ul><p>每次写这么多很麻烦，那么过滤器也支持扩展和定制快捷过滤器对象。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForbiddenException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">HttpException</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>(<span class="hljs-string">&#x27;Forbidden&#x27;</span>, <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">FORBIDDEN</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>就可以直接使用了：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Post</span>()<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() createCatDto: CreateCatDto</span>) &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForbiddenException</span>(<span class="hljs-string">&#x27;Forbidden&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>是不是，方便很多了。</p><p><code>Nest</code>给我们提供很多这样快捷常用的 HTTP 状态错误：</p><ul><li>BadRequestException 400</li><li>UnauthorizedException 401</li><li>ForbiddenException 403</li><li>NotFoundException 404</li><li>NotAcceptableException 406</li><li>RequestTimeoutException 408</li><li>ConflictException 409</li><li>GoneException 410</li><li>PayloadTooLargeException 413</li><li>UnsupportedMediaTypeException 415</li><li>UnprocessableEntityException 422</li><li>InternalServerErrorException 500</li><li>NotImplementedException 501</li><li>BadGatewayException 502</li><li>ServiceUnavailableException 503</li><li>GatewayTimeoutException 504</li></ul><p>异常处理程序基础很好,但有时你可能想要完全控制异常层,例如,添加一些日志记录或使用一个不同的<code>JSON</code>模式基于一些选择的因素。前面说了，<code>Nest</code>给我们内置返回响应模板，这个不能接受的，我们要自定义怎么办了，<code>Nest</code>给我们扩展空间。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ExceptionFilter</span>, <span class="hljs-title class_">Catch</span>, <span class="hljs-title class_">ArgumentsHost</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HttpException</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><br><span class="hljs-meta">@Catch</span>(<span class="hljs-title class_">HttpException</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpExceptionFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ExceptionFilter</span> &#123;<br>  <span class="hljs-keyword">catch</span>(<span class="hljs-attr">exception</span>: <span class="hljs-title class_">HttpException</span>, <span class="hljs-attr">host</span>: <span class="hljs-title class_">ArgumentsHost</span>) &#123;<br>    <span class="hljs-keyword">const</span> ctx = host.<span class="hljs-title function_">switchToHttp</span>()<br>    <span class="hljs-keyword">const</span> response = ctx.<span class="hljs-title function_">getResponse</span>()<br>    <span class="hljs-keyword">const</span> request = ctx.<span class="hljs-title function_">getRequest</span>()<br>    <span class="hljs-keyword">const</span> status = exception.<span class="hljs-title function_">getStatus</span>()<br><br>    response.<span class="hljs-title function_">status</span>(status).<span class="hljs-title function_">json</span>(&#123;<br>      <span class="hljs-attr">statusCode</span>: status,<br>      <span class="hljs-attr">timestamp</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toISOString</span>(),<br>      <span class="hljs-attr">path</span>: request.<span class="hljs-property">url</span>,<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>它返回是一个<code>Express</code>的方法<code>response</code>，来定制自己的响应异常格式。</p><p>怎么使用，有四种方式：</p><ol><li>直接<code>@UseFilters()</code>装饰器里面使用，作用当前这条路由的响应结果</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Post</span>()<br><span class="hljs-meta">@UseFilters</span>(<span class="hljs-title class_">HttpExceptionFilter</span> | <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpExceptionFilter</span>())<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() createCatDto: CreateCatDto</span>) &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForbiddenException</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>直接<code>@UseFilters()</code>装饰器里面使用，作用当前控制器路由所有的响应结果</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@UseFilters</span>(<span class="hljs-title class_">HttpExceptionFilter</span> | <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpExceptionFilter</span>())<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CatsController</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ol><li>在全局注册使用内置实例方法<code>useGlobalFilters</code>，作用整个项目。过滤器这种比较通用推荐全局注册。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">ApplicationModule</span>)<br>  app.<span class="hljs-title function_">useGlobalFilters</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpExceptionFilter</span>())<br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>)<br>&#125;<br><span class="hljs-title function_">bootstrap</span>()<br></code></pre></td></tr></table></figure><h3 id="管道-Pipe"><a href="#管道-Pipe" class="headerlink" title="管道 Pipe"></a>管道 Pipe</h3><p>管道可以把你的请求参数根据特定条件验证类型、对象结构或映射数据。管道是一个纯函数，不应该从数据库中选择或调用任何服务操作。</p><p>定义一个简单管道：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PipeTransform</span>, <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">ArgumentMetadata</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidationPipe</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PipeTransform</span> &#123;<br>  <span class="hljs-title function_">transform</span>(<span class="hljs-params">value: <span class="hljs-built_in">any</span>, metadata: ArgumentMetadata</span>) &#123;<br>    <span class="hljs-keyword">return</span> value<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>管道是用<code>@Injectable()</code>装饰器注释的类。应该实现<code>PipeTransform</code>接口，具体代码在<code>transform</code>实现，这个和<code>Angular</code>很像。</p><p><code>Nest</code>处理请求数据验证，在数据不正确时可以抛出异常，使用过滤器来捕获。</p><p><code>Nest</code>为我们内置了 2 个通用的管道，一个数据验证<code>ValidationPipe</code>，一个数据转换<code>ParseIntPipe</code>。</p><p>使用<code>ValidationPipe</code>需要配合<code>class-validator class-transformer</code>，如果你不安装它们 ，你使用<code>ValidationPipe</code>会报错的。</p><blockquote><p><strong>提示</strong>：<code>ValidationPipe</code>不光可以验证请求数据也做数据类型转换，这个可以看官网。</p></blockquote><p>怎么使用，有四种方式</p><ol><li>直接<code>@Body()</code>装饰器里面使用，只作用当前 body 这个参数</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 用户控制器</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Get</span>, <span class="hljs-title class_">Post</span>, <span class="hljs-title class_">Body</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.service&#x27;</span><br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;user&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> userService: UserService</span>) &#123;&#125;<br>  <span class="hljs-meta">@Post</span>()<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>(ValidationPipe | <span class="hljs-keyword">new</span> ValidationPipe()) createUserDto: CreateUserDto</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">create</span>(createUserDto)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>在<code>@UsePipes()</code>装饰器里面使用，作用当前这条路由所有的请求参数</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 用户控制器</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Get</span>, <span class="hljs-title class_">Post</span>, <span class="hljs-title class_">Body</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.service&#x27;</span><br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;user&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> userService: UserService</span>) &#123;&#125;<br>  <span class="hljs-meta">@Post</span>()<br>  <span class="hljs-meta">@UsePipes</span>(<span class="hljs-title class_">ValidationPipe</span> | <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidationPipe</span>())<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() createUserDto: CreateUserDto</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">create</span>(createUserDto)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>在<code>@UsePipes()</code>装饰器里面使用，作用当前控制器路由所有的请求参数</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 用户控制器</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Get</span>, <span class="hljs-title class_">Post</span>, <span class="hljs-title class_">Body</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.service&#x27;</span><br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;user&#x27;</span>)<br><span class="hljs-meta">@UsePipes</span>(<span class="hljs-title class_">ValidationPipe</span> | <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidationPipe</span>())<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> userService: UserService</span>) &#123;&#125;<br>  <span class="hljs-meta">@Post</span>()<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() createUserDto: CreateUserDto</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">create</span>(createUserDto)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>在全局注册使用内置实例方法<code>useGlobalPipes</code>，作用整个项目。这个管道比较通用推荐全局注册。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">ApplicationModule</span>)<br>  app.<span class="hljs-title function_">useGlobalPipes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidationPipe</span>())<br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>)<br>&#125;<br><span class="hljs-title function_">bootstrap</span>()<br></code></pre></td></tr></table></figure><p>那么<code>createUserDto</code>怎么玩了，后面实战教程会讲解，这里不展开。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;:id&#x27;</span>)<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">findOne</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;id&#x27;</span>, ParseIntPipe | <span class="hljs-keyword">new</span> ParseIntPipe()) id</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">catsService</span>.<span class="hljs-title function_">findOne</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ParseIntPipe</code>使用也很简单，就是把一个字符串转换成数字。也是比较常用的，特别是你的 id 是字符串数字的时候，用<code>get</code>，<code>put</code>，<code>patch</code>，<code>delete</code>等请求，有 id 时候特别好用了。<br>还可以做分页处理，后面实战中用到，具体在讲解。</p><h3 id="守卫-Guard"><a href="#守卫-Guard" class="headerlink" title="守卫 Guard"></a>守卫 Guard</h3><p>守卫可以做权限认证，如果你没有权限可以拒绝你访问这个路由，默认返回<code>403</code>错误。</p><p>定义一个简单管道：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">CanActivate</span>, <span class="hljs-title class_">ExecutionContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Observable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span><br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthGuard</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CanActivate</span> &#123;<br>  <span class="hljs-title function_">canActivate</span>(<span class="hljs-attr">context</span>: <span class="hljs-title class_">ExecutionContext</span>): <span class="hljs-built_in">boolean</span> | <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">boolean</span>&gt; | <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-built_in">boolean</span>&gt; &#123;<br>    <span class="hljs-keyword">const</span> request = context.<span class="hljs-title function_">switchToHttp</span>().<span class="hljs-title function_">getRequest</span>()<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">validateRequest</span>(request)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>守卫是用<code>@Injectable()</code>装饰器注释的类。应该实现<code>CanActivate</code>接口，具体代码在<code>canActivate</code>方法实现，返回一个布尔值，true 就表示有权限，false 抛出异常 403 错误。这个写法和<code>Angular</code>很像。</p><p>怎么使用，有两种方式</p><ol><li>直接<code>@UseGuards()</code>装饰器里面使用，作用当前控制器路由所有的请求参数</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;cats&#x27;</span>)<br><span class="hljs-meta">@UseGuards</span>(<span class="hljs-title class_">RolesGuard</span> | <span class="hljs-keyword">new</span> <span class="hljs-title class_">RolesGuard</span>())<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CatsController</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ol><li>在全局注册使用内置实例方法<code>useGlobalGuards</code>，作用整个项目。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">ApplicationModule</span>)<br>app.<span class="hljs-title function_">useGlobalGuards</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RolesGuard</span>())<br></code></pre></td></tr></table></figure><p>如果你不做权限管理相关的身份验证操作，基本用不上这个功能。不过还是很有用抽象功能。我们这个实战项目也会用到这个功能。</p><h3 id="拦截器-Interceptor"><a href="#拦截器-Interceptor" class="headerlink" title="拦截器 Interceptor"></a>拦截器 Interceptor</h3><p>拦截器是一个比较特殊强大功能，类似于 AOP 面向切面编程，前端编程中也尝尝使用这样的技术，比如各种 http 请求库都提供类似功能。有名的框架<code>Angular</code>框架 HTTP 模块。有名的库有老牌的<code>jquery</code>和新潮的<code>axios</code>等。</p><p>定义一个简单拦截器：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">NestInterceptor</span>, <span class="hljs-title class_">ExecutionContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Observable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span><br><span class="hljs-keyword">import</span> &#123; tap &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/operators&#x27;</span><br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggingInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestInterceptor</span> &#123;<br>  <span class="hljs-title function_">intercept</span>(<span class="hljs-attr">context</span>: <span class="hljs-title class_">ExecutionContext</span>, <span class="hljs-attr">call$</span>: <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-built_in">any</span>&gt;): <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-built_in">any</span>&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Before...&#x27;</span>)<br>    <span class="hljs-keyword">const</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>    <span class="hljs-keyword">return</span> call$.<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">tap</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`After... <span class="hljs-subst">$&#123;<span class="hljs-built_in">Date</span>.now() - now&#125;</span>ms`</span>)))<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拦截器是用<code>@Injectable()</code>装饰器注释的类。应该实现<code>NestInterceptor</code>接口，具体代码在<code>intercept</code>方法实现，返回一个<code>Observable</code>，这个写法和<code>Angular</code>很像。</p><p>拦截器可以做什么：</p><ul><li>在方法执行之前/之后绑定额外的逻辑</li><li>转换从函数返回的结果</li><li>转换从函数抛出的异常</li><li>扩展基本的函数行为</li><li>完全覆盖一个函数取决于所选择的条件(例如缓存)</li></ul><p>怎么使用，有三种方式</p><ol><li>直接<code>@UseInterceptors()</code>装饰器里面使用，作用当前路由，还可以传参数，需要特殊处理，写成高阶函数，也可以使用依赖注入。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;upload&#x27;</span>)<br><span class="hljs-meta">@UseInterceptors</span>(<span class="hljs-title class_">FileFieldsInterceptor</span> | <span class="hljs-title class_">FileFieldsInterceptor</span>([<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;avatar&#x27;</span>, <span class="hljs-attr">maxCount</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-attr">maxCount</span>: <span class="hljs-number">1</span> &#125;,<br>]))<br><span class="hljs-title function_">uploadFile</span>(<span class="hljs-params"><span class="hljs-meta">@UploadedFiles</span>() files</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(files);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>直接<code>@UseInterceptors()</code>装饰器里面使用，作用当前控制器路由，这个不能传参数，可以使用依赖注入</li></ol><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">@UseInterceptors(LoggingInterceptor | <span class="hljs-keyword">new</span> LoggingInterceptor())<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CatsController</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ol><li>在全局注册使用内置实例方法<code>useGlobalInterceptors</code>，作用整个项目。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">ApplicationModule</span>)<br>app.<span class="hljs-title function_">useGlobalInterceptors</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingInterceptor</span>())<br></code></pre></td></tr></table></figure><p>拦截器可以做很多功能，比如缓存处理，响应数据转换，异常捕获转换，响应超时跑错，打印请求响应日志。我们这个实战项目也会用到这个功能。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>模块是按业务逻辑划分基本单元，包含控制器和服务。控制器是处理请求和响应数据的部件，服务处理实际业务逻辑的部件。</p><p>中间件是路由处理 Handler 前的数据处理层，只能在模块或者全局注册，可以做日志处理中间件、用户认证中间件等处理，中间件和 express 的中间件一样，所以可以访问整个 request、response 的上下文，模块作用域可以依赖注入服务。全局注册只能是一个纯函数或者一个高阶函数。</p><p>管道是数据流处理，在中间件后路由处理前做数据处理，可以控制器中的类、方法、方法参数、全局注册使用，只能是一个纯函数。可以做数据验证，数据转换等数据处理。</p><p>守卫是决定请求是否可以到达对应的路由处理器，能够知道当前路由的执行上下文，可以控制器中的类、方法、全局注册使用，可以做角色守卫。</p><p>拦截器是进入控制器之前和之后处理相关逻辑，能够知道当前路由的执行上下文，可以控制器中的类、方法、全局注册使用，可以做日志、事务处理、异常处理、响应数据格式等。</p><p>过滤器是捕获错误信息，返回响应给客户端。可以控制器中的类、方法、全局注册使用，可以做自定义响应异常格式。</p><p>中间件、过滤器、管道、守卫、拦截器，这是几个比较容易混淆的东西。他们有个共同点都是和控制器挂钩的中间抽象处理层，但是他们的职责却不一样。</p><p>全局管道、守卫、过滤器和拦截器和任何模块松散耦合。他们不能依赖注入任何服务，因为他们不属于任何模块。<br>可以使用控制器作用域、方法作用域或辅助作用域仅由管道支持，其他除了中间件是模块作用域，都是控制器作用域和方法作用域。</p><blockquote><p><strong>重点</strong>：在示例给出了它们的写法，注意全局管道、守卫、过滤器和拦截器，只能 new，全局中间件是纯函数，全局管道、守卫、过滤器和拦截器，中间件都不能依赖注入。中间件模块注册也不能用 new，可以依赖注入。管道、守卫、过滤器和拦截器局部注册可以使用 new 和类名，除了管道以为其他都可以依赖注入。拦截器和守卫可以写成高阶方法来传参，达到定制目的。</p></blockquote><p>管道、过滤器、拦截器守卫都有各自的具体职责。拦截器和守卫与模块结合在一起，而管道和过滤器则运行在模块区域之外。管道任务是根据特定条件验证类型、对象结构或映射数据。过滤器任务是捕获各种错误返回给客户端。管道不是从数据库中选择或调用任何服务的适当位置。另一方面来说，拦截器不应该验证对象模式或修饰数据。如果需要重写，则必须由数据库调用服务引起。守卫决定了哪些路由可以访问，它接管你的验证责任。</p><p>那你肯定最关心他们执行顺序是什么：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">客户端请求 ---&gt; 中间件 ---&gt; 守卫 ---&gt; 拦截器之前 ---&gt; 管道 ---&gt; 控制器处理并响应 ---&gt; 拦截器之后 ---&gt; 过滤器<br></code></pre></td></tr></table></figure><p>我们来看 2 张图，</p><p>请求返回响应结果：</p><p><a href="https://user-images.githubusercontent.com/6111778/44449059-a3f8f900-a61f-11e8-9414-15ae4fe6f312.png"><img src="https://user-images.githubusercontent.com/6111778/44449059-a3f8f900-a61f-11e8-9414-15ae4fe6f312.png" alt="hdvo ug9_58 g 9o_n n 7o"></a></p><p>请求返回响应异常：</p><p><a href="https://user-images.githubusercontent.com/6111778/44449066-a9eeda00-a61f-11e8-92c4-8aca90649f53.png"><img src="https://user-images.githubusercontent.com/6111778/44449066-a9eeda00-a61f-11e8-92c4-8aca90649f53.png" alt="nmzgsgsc5ynm_ghfsxzl5jh"></a></p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>学习一门语言一门技术都是从 <code>Hello World</code> 开始，我们也是从零到<code>Hello World</code>开启学习<code>Nest</code>之旅</p><h3 id="准备必备开发环境和工具"><a href="#准备必备开发环境和工具" class="headerlink" title="准备必备开发环境和工具"></a>准备必备开发环境和工具</h3><p>推荐<code>nvm</code>来管理<code>nodejs</code>版本，根据自己电脑下载对应版本吧。</p><ol><li><p>准备环境: <a href="https://nodejs.org/en/">Nodejs</a> v8+ (目前版本 v10+, 必须 8 以上，对 es2015 支持率很高)</p></li><li><p>准备数据库：<a href="https://www.mongodb.com/">mongodb</a> v3+ (目前版本 v4+)</p></li><li><p>准备数据库：<a href="https://redis.io/">redis</a> v3+ (目前版本 v3+)</p></li><li><p>准备编辑器: <a href="https://code.visualstudio.com/">vs code</a> 最新版即可(本机 windows v1.26)</p></li><li><pre><code class="bash">vs code&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs markdown&quot;&gt;&lt;br&gt;   推荐插件：(其他插件自己随意)&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;   -&lt;/span&gt; Debugger for Chrome -- 调试&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;   -&lt;/span&gt; ejs -- ejs 文件高亮&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;   -&lt;/span&gt; Beautify -- 代码格式化&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;   -&lt;/span&gt; DotENV -- .env 文件高亮&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;   -&lt;/span&gt; Jest -- nest 默认测试框架支持&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;   -&lt;/span&gt; TSLint -- ts 语法检查&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;   -&lt;/span&gt; TypeScript Hero -- ts 提示&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;   -&lt;/span&gt; vscode-icons -- icons&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;6.&lt;/span&gt; 推荐几个好用的工具：&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;   -&lt;/span&gt; Postmen -- API 测试神器&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;   -&lt;/span&gt; Robomongo -- mongodb 图形化工具&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;   -&lt;/span&gt; Redis Desktop Manager -- Redis 图形化工具&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;   -&lt;/span&gt; Cmder -- Windows 命令行神器&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-section&quot;&gt;### Nest 相关资源&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;1.&lt;/span&gt; 官网：[&lt;span class=&quot;hljs-string&quot;&gt;https://nestjs.com&lt;/span&gt;](&lt;span class=&quot;hljs-link&quot;&gt;https://nestjs.com/&lt;/span&gt;)&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;2.&lt;/span&gt; 文档：[&lt;span class=&quot;hljs-string&quot;&gt;https://docs.nestjs.com&lt;/span&gt;](&lt;span class=&quot;hljs-link&quot;&gt;https://docs.nestjs.com/&lt;/span&gt;)&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;3.&lt;/span&gt; 中文文档：[&lt;span class=&quot;hljs-string&quot;&gt;https://docs.nestjs.cn&lt;/span&gt;](&lt;span class=&quot;hljs-link&quot;&gt;https://docs.nestjs.cn/&lt;/span&gt;)&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;4.&lt;/span&gt; Github：&lt;span class=&quot;language-xml&quot;&gt;&amp;lt;https://github.com/nestjs/nest&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;5.&lt;/span&gt; 版本：目前稳定版 v5.1.0&lt;br&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;6.&lt;/span&gt; CLI：&lt;span class=&quot;language-xml&quot;&gt;&amp;lt;https://github.com/nestjs/nest-cli&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-section&quot;&gt;### nest-cli&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-code&quot;&gt;`nest-cli`&lt;/span&gt; 是一个 &lt;span class=&quot;hljs-code&quot;&gt;`nest`&lt;/span&gt; 项目脚手架。为我们提供一个初始化模块，可以让我们快速完成&lt;span class=&quot;hljs-code&quot;&gt;`Hello World`&lt;/span&gt;功能。&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-section&quot;&gt;#### 安装&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-code&quot;&gt;```bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-code&quot;&gt;npm i -g @nestjs/cli&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ol><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="new-简写：n-构建新项目"><a href="#new-简写：n-构建新项目" class="headerlink" title="new(简写：n) 构建新项目"></a>new(简写：n) 构建新项目</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest new my-awesome-app<br>OR<br>$ nest n my-awesome-app<br></code></pre></td></tr></table></figure><h5 id="generate-简写：g-生成文件"><a href="#generate-简写：g-生成文件" class="headerlink" title="generate(简写：g) 生成文件"></a>generate(简写：g) 生成文件</h5><ul><li>class (简写: cl) 类</li><li>controller (简写: co) 控制器</li><li>decorator (简写: d) 装饰器</li><li>exception (简写: e) 异常捕获</li><li>filter (简写: f) 过滤器</li><li>gateway (简写: ga) 网关</li><li>guard (简写: gu) 守卫</li><li>interceptor (简写: i) 拦截器</li><li>middleware (简写: mi) 中间件</li><li>module (简写: mo) 模块</li><li>pipe (简写: pi) 管道</li><li>provider (简写: pr) 供应商</li><li>service (简写: s) 服务</li></ul><p>创建一个 users 服务文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nest generate service <span class="hljs-built_in">users</span><br>OR<br>$ nest g s <span class="hljs-built_in">users</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p></blockquote><ol><li><code>必须</code>在项目<code>根目录</code>下创建，（默认创建在 src/）。（不能在当前文件夹里面创建，不然会自动生成 xxx/src/xxx。吐槽：这个没有 Angular-cli 智能）</li><li>需要<code>优先</code>新建模块，不然创建的非模块以外的服务，控制器等就会自动注入更新到上级的模块里面</li></ol><h5 id="info-简写：i-打印版本信息"><a href="#info-简写：i-打印版本信息" class="headerlink" title="info(简写：i) 打印版本信息"></a>info(简写：i) 打印版本信息</h5><p>打印当前系统，使用 nest 核心模块版本，供你去官方提交<a href="https://github.com/nestjs/nest/issues">issues</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">| \ | |           | |    |_  |/  ___|/  __ \| |   |_   _|<br>|  \| |  ___  ___ | |_     | |\ `--. | /  \/| |     | |<br>| . ` | / _ \/ __|| __|    | | `--. \| |    | |     | |<br>| |\  ||  __/\__ \| |_ /\__/ //\__/ /| \__/\| |_____| |_<br>\_| \_/ \___||___/ \__|\____/ \____/  \____/\_____/\___/<br><br><br>[System Information]<br>OS Version     : Windows 10<br>NodeJS Version : v8.11.1<br>NPM Version    : 5.6.0<br>[Nest Information]<br>microservices version : 5.1.0<br>websockets version    : 5.1.0<br>testing version       : 5.1.0<br>common version        : 5.1.0<br>core version          : 5.1.0<br></code></pre></td></tr></table></figure><blockquote><p>最后，整体功能和<code>Angular-cli</code>类似，比较简单实用功能。构建项目，生成文件，打印版本信息。</p></blockquote><h3 id="nest-内置功能"><a href="#nest-内置功能" class="headerlink" title="nest 内置功能"></a>nest 内置功能</h3><p>目前<code>Nest.js</code>支持 <code>express</code> 和 <code>fastify</code>, 对 <code>fastify</code> 不熟，本文选择<code>express</code>。</p><h4 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h4><ul><li>@nestjs/common 提供很多装饰器，log 服务等</li><li>@nestjs/core 核心模块处理底层框架兼容</li><li>@nestjs/microservices 微服务支持</li><li>@nestjs/testing 测试套件</li><li>@nestjs/websockets websocket 支持</li></ul><h4 id="可选模块"><a href="#可选模块" class="headerlink" title="可选模块"></a>可选模块</h4><ul><li>@nestjs/typeorm 还没玩过</li><li>@nestjs/graphql 还没玩过</li><li>@nestjs/cqrs 还没玩过</li><li>@nestjs/passport 身份验证（v5 版支持，不向下兼容）</li><li>@nestjs/swagger swagger UI API</li><li>@nestjs/mongoose mongoose 模块</li></ul><blockquote><p><strong>注意</strong>: 其他中间件模块，只要支持<code>express</code>和都可以使用。</p></blockquote><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><ol><li>创建项目<code>nest-cnode</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nest new nest-cnode<br></code></pre></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/6111778/44448993-7318c400-a61f-11e8-9201-0d099d6f5d24.png"><img src="https://user-images.githubusercontent.com/6111778/44448993-7318c400-a61f-11e8-9201-0d099d6f5d24.png" alt="nest_cli"></a></p><p>其中提交的你的<code>description</code>, 初始化版本<code>version</code>, 作者<code>author</code>, 以及一个<code>package manager</code>选择<code>node_modules</code>安装方式 <code>npm</code> 或者 <code>yarn</code>。</p><ol><li>项目启动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> nest-cnode<br><br>// 启动命令<br><br>npm run start  // 预览<br>npm run start:dev // 开发<br>npm run prestart:prod  // 编译成js<br>npm run start:prod  // 生产<br><br>// 测试命令<br><br>npm run <span class="hljs-built_in">test</span>  // 单元测试<br>npm run <span class="hljs-built_in">test</span>:cov  // 单元测试+覆盖率生成<br>npm run <span class="hljs-built_in">test</span>:e2e  // E2E测试<br></code></pre></td></tr></table></figure><ol><li>项目文件介绍</li></ol><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td>node_modules</td><td>npm 包</td></tr><tr><td>src</td><td>源码</td></tr><tr><td>logs</td><td>日志</td></tr><tr><td>test</td><td>E2E 测试</td></tr><tr><td>views</td><td>模板</td></tr><tr><td>public</td><td>静态资源</td></tr><tr><td>nodemon.json</td><td>nodemon 配置（npm run start:dev 启动）</td></tr><tr><td>package.json</td><td>npm 包管理</td></tr><tr><td>README.md</td><td>说明文件</td></tr><tr><td>tsconfig.json</td><td>Typescript 配置文件（Typescript 必备）</td></tr><tr><td>tslint.json</td><td>Typescript 风格检查文件（Typescript 必备）</td></tr><tr><td>webpack.config.js</td><td>热更新（npm run start:hmr 启动）</td></tr><tr><td>.env</td><td>配置文件</td></tr></tbody></table><blockquote><p>开发代码都在<code>src</code>里，生成代码在<code>dist</code> (打包自动编译)，<code>typescript</code>打包只会编译<code>ts</code>到<code>dist</code> 下，静态文件<code>public</code>和模板<code>views</code>不会移动，所以需要放到根目录下。</p></blockquote><p><a href="https://user-images.githubusercontent.com/6111778/44449023-8b88de80-a61f-11e8-8f5e-ae3760859942.png"><img src="https://user-images.githubusercontent.com/6111778/44449023-8b88de80-a61f-11e8-8f5e-ae3760859942.png" alt="nest_start"></a></p><p>我们打开浏览器，访问<code>http://localhost:3000</code>，您应该看到一个页面，上面显示<code>Hello World</code>文字。</p><p><a href="https://user-images.githubusercontent.com/6111778/44449034-92afec80-a61f-11e8-9dc8-3e8a0160b978.png"><img src="https://user-images.githubusercontent.com/6111778/44449034-92afec80-a61f-11e8-9dc8-3e8a0160b978.png" alt="j _ 2k2q0pqpjt 03o t16u"></a></p><p><a href="https://github.com/jiayisheji/blog/issues/18">本文来自 https://github.com/jiayisheji/blog/issues/18</a></p>]]></content>
    
    
    <categories>
      
      <category>node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>nest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6——箭头函数与普通函数的区别</title>
    <link href="/blog/2021/01/09/JS/arrowFun/"/>
    <url>/blog/2021/01/09/JS/arrowFun/</url>
    
    <content type="html"><![CDATA[<p>ES6 标准新增了一种新的函数：<code>Arrow Function</code>（箭头函数）。</p><p>为什么叫<code>Arrow Function</code>？因为它的定义用的就是一个箭头：</p><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1、没有形参的时候</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">fun</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是箭头函数&#x27;</span>)<br><span class="hljs-title function_">fun</span>()<br><span class="hljs-comment">//2、只有一个形参的时候()可以省略</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">fun2</span> = a =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br><span class="hljs-title function_">fun2</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>)<br><br><span class="hljs-comment">//3、俩个及俩个以上的形参的时候</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">fun3</span> = (<span class="hljs-params">x, y</span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x, y) <span class="hljs-comment">//函数体只包含一个表达式则省略return 默认返回</span><br><span class="hljs-title function_">fun3</span>(<span class="hljs-number">24</span>, <span class="hljs-number">44</span>)<br><br><span class="hljs-comment">//4、俩个形参以及函数体多条语句表达式</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">fun4</span> = (<span class="hljs-params">x, y</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x, y)<br>  <span class="hljs-keyword">return</span> x + y <span class="hljs-comment">//必须加return才有返回值</span><br>&#125; <span class="hljs-comment">//5、如果要返回对象时需要用小括号包起来，因为大括号被占用解释为代码块了，正确写法let fun5 = ()=&gt;(&#123; foo: x &#125;)   //如果x =&gt; &#123; foo: x &#125;  //则语法出错</span><br></code></pre></td></tr></table></figure><p>那么箭头函数有哪些特点？</p><ul><li>更简洁的语法</li><li>没有 this</li><li>不能使用 new 构造函数</li><li>不绑定 arguments，用 rest 参数…解决</li><li>使用 call()和 apply()调用</li><li>捕获其所在上下文的 this 值，作为自己的 this 值</li><li>箭头函数没有原型属性</li><li>不能简单返回对象字面量</li><li>箭头函数不能当做 Generator 函数,不能使用 yield 关键字</li><li>箭头函数不能换行</li></ul><h2 id="相比普通函数更简洁的语法"><a href="#相比普通函数更简洁的语法" class="headerlink" title="相比普通函数更简洁的语法"></a>相比普通函数更简洁的语法</h2><p>箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title function_">a</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>相当于普通函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="没有-this"><a href="#没有-this" class="headerlink" title="没有 this"></a>没有 this</h2><p>在箭头函数出现之前，每个新定义的函数都有其自己的 <code>this</code> 值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myObject = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">getValue</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>  &#125;,<br>  <span class="hljs-attr">double</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">//this指向double函数内不存在的value</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> * <span class="hljs-number">2</span>))<br>    &#125;<br>  &#125;,<br>&#125;<br><span class="hljs-comment">/*希望value乘以2*/</span><br>myObject.<span class="hljs-title function_">double</span>()() <span class="hljs-comment">//NaN</span><br>myObject.<span class="hljs-title function_">getValue</span>() <span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><p>使用箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myObject = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">getValue</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>  &#125;,<br>  <span class="hljs-attr">double</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> * <span class="hljs-number">2</span>))<br>    &#125;<br>  &#125;,<br>&#125;<br><span class="hljs-comment">/*希望value乘以2*/</span><br>myObject.<span class="hljs-title function_">double</span>()() <span class="hljs-comment">//2</span><br>myObject.<span class="hljs-title function_">getValue</span>() <span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><h2 id="不能使用-new"><a href="#不能使用-new" class="headerlink" title="不能使用 new"></a>不能使用 new</h2><p>箭头函数作为匿名函数,是不能作为构造函数的,不能使用<code>new</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title function_">B</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">B</span>() <span class="hljs-comment">//TypeError: B is not a constructor</span><br></code></pre></td></tr></table></figure><h2 id="不绑定-arguments，用-rest-参数…解决"><a href="#不绑定-arguments，用-rest-参数…解决" class="headerlink" title="不绑定 arguments，用 rest 参数…解决"></a>不绑定 arguments，用 rest 参数…解决</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*常规函数使用arguments*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params">a</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>) <span class="hljs-comment">//1</span><br>&#125;<br><span class="hljs-comment">/*箭头函数不能使用arguments*/</span><br><span class="hljs-keyword">var</span> <span class="hljs-title function_">test2</span> = a =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>)<br>&#125; <span class="hljs-comment">//ReferenceError: arguments is not defined</span><br><span class="hljs-comment">/*箭头函数使用reset参数...解决*/</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">test3</span> = (<span class="hljs-params">...a</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a[<span class="hljs-number">1</span>])<br>&#125; <span class="hljs-comment">//22</span><br><br><span class="hljs-title function_">test1</span>(<span class="hljs-number">1</span>)<br><span class="hljs-title function_">test2</span>(<span class="hljs-number">2</span>)<br><span class="hljs-title function_">test3</span>(<span class="hljs-number">33</span>, <span class="hljs-number">22</span>, <span class="hljs-number">44</span>)<br></code></pre></td></tr></table></figure><h2 id="使用-call-和-apply-调用"><a href="#使用-call-和-apply-调用" class="headerlink" title="使用 call()和 apply()调用"></a>使用 call()和 apply()调用</h2><p>由于 this 已经在词法层面完成了绑定，通过 call() 或 apply() 方法调用一个函数时，只是传入了参数而已，对 this 并没有什么影响：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title function_">f</span> = v =&gt; v + <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> <span class="hljs-comment">//a==v,3+1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">f</span>(a)<br>  &#125;,<br>  <span class="hljs-attr">addThruCall</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title function_">f</span> = v =&gt; v + <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> <span class="hljs-comment">//此this指向obj.value</span><br>    <span class="hljs-keyword">var</span> b = &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> &#125;<br>    <span class="hljs-keyword">return</span> f.<span class="hljs-title function_">call</span>(b, a) <span class="hljs-comment">//f函数并非指向b,只是传入了a参数而已</span><br>  &#125;,<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-title function_">add</span>(<span class="hljs-number">3</span>)) <span class="hljs-comment">//4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-title function_">addThruCall</span>(<span class="hljs-number">4</span>)) <span class="hljs-comment">//5</span><br></code></pre></td></tr></table></figure><h2 id="捕获其所在上下文的-this-值，作为自己的-this-值"><a href="#捕获其所在上下文的-this-值，作为自己的-this-值" class="headerlink" title="捕获其所在上下文的 this 值，作为自己的 this 值"></a>捕获其所在上下文的 this 值，作为自己的 this 值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>) <span class="hljs-comment">//10</span><br>  &#125;,<br>  <span class="hljs-attr">c</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>) <span class="hljs-comment">//10</span><br>    &#125;<br>  &#125;,<br>&#125;<br>obj.<span class="hljs-title function_">b</span>()<br>obj.<span class="hljs-title function_">c</span>()()<br></code></pre></td></tr></table></figure><h2 id="箭头函数没有原型属性"><a href="#箭头函数没有原型属性" class="headerlink" title="箭头函数没有原型属性"></a>箭头函数没有原型属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title function_">a</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-comment">//undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-comment">//object&#123;...&#125;</span><br></code></pre></td></tr></table></figure><h2 id="不能简单返回对象字面量"><a href="#不能简单返回对象字面量" class="headerlink" title="不能简单返回对象字面量"></a>不能简单返回对象字面量</h2><p>如果要返回对象时需要用小括号包起来，因为大括号被占用解释为代码块了，正确写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title function_">fun5</span> = (<span class="hljs-params"></span>) =&gt; (&#123; <span class="hljs-attr">foo</span>: x &#125;) <span class="hljs-comment">//如果x =&gt; &#123; foo: x &#125;  //则语法出错</span><br></code></pre></td></tr></table></figure><h2 id="箭头函数不能当做-Generator-函数-不能使用-yield-关键字"><a href="#箭头函数不能当做-Generator-函数-不能使用-yield-关键字" class="headerlink" title="箭头函数不能当做 Generator 函数,不能使用 yield 关键字"></a>箭头函数不能当做 Generator 函数,不能使用 yield 关键字</h2><h2 id="箭头函数不能换行"><a href="#箭头函数不能换行" class="headerlink" title="箭头函数不能换行"></a>箭头函数不能换行</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title function_">a</span> = (<span class="hljs-params"></span>)<br>          =&gt;<span class="hljs-number">1</span>; <span class="hljs-comment">//SyntaxError: Unexpected token =&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uniApp公众号登录和支付公用封装方法</title>
    <link href="/blog/2021/01/05/uniApp/uni_wx_login/"/>
    <url>/blog/2021/01/05/uniApp/uni_wx_login/</url>
    
    <content type="html"><![CDATA[<p>最近在开发公众号的时候碰上了这个问题，记录一下,以后有用到再来看</p><a id="more"></a><h2 id="uniApp-公众号登录公用封装方法"><a href="#uniApp-公众号登录公用封装方法" class="headerlink" title="uniApp 公众号登录公用封装方法"></a>uniApp 公众号登录公用封装方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 微信工具类</span><br><span class="hljs-keyword">var</span> wxUtil = &#123;<br>  <span class="hljs-comment">// 获取jscode</span><br>  <span class="hljs-attr">getJscode</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">url, success</span>) &#123;<br>    <span class="hljs-comment">// 一些配置参数</span><br>    <span class="hljs-keyword">var</span> option = &#123;<br>      <span class="hljs-attr">appid</span>: <span class="hljs-string">&#x27;wxf3d0029f0ef462b1&#x27;</span>, <span class="hljs-comment">// 替换成你的appid</span><br>      <span class="hljs-attr">scope</span>: <span class="hljs-string">&#x27;snsapi_userinfo&#x27;</span>, <span class="hljs-comment">// 非静默授权，可以获取用户信息</span><br>      <span class="hljs-comment">// scope: &#x27;snsapi_base&#x27;, // 静默授权，仅可获取openid</span><br>      <span class="hljs-attr">success</span>: success, <span class="hljs-comment">// 成功的回调</span><br>      <span class="hljs-attr">url</span>: url,<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">start_get</span>(option)<br>  &#125;,<br>  <span class="hljs-comment">// 开始获取jscode码</span><br>  <span class="hljs-attr">start_get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">option</span>) &#123;<br>    <span class="hljs-comment">// 如果url中有值，直接从url中取值</span><br>    <span class="hljs-keyword">let</span> jscode = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">p</span>(<span class="hljs-string">&#x27;code&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (jscode) &#123;<br>      <span class="hljs-keyword">return</span> option.<span class="hljs-title function_">success</span>(jscode, option)<br>    &#125;<br>    <span class="hljs-comment">// 如果非微信环境，则不允许此操作</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">is_weixn_qq</span>() != <span class="hljs-string">&#x27;微信&#x27;</span>) &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;当前环境非微信内置浏览器&#x27;</span>)<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// 向微信官方请求获取</span><br>    <span class="hljs-keyword">let</span> appid = option.<span class="hljs-property">appid</span> <span class="hljs-comment">// appid</span><br>    <span class="hljs-keyword">let</span> uri = <span class="hljs-built_in">encodeURIComponent</span>(option.<span class="hljs-property">url</span>) <span class="hljs-comment">// 这里务必编码</span><br>    <span class="hljs-keyword">let</span> scope = option.<span class="hljs-property">scope</span> <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// let scope = &#x27;snsapi_userinfo&#x27;; //</span><br>    <span class="hljs-comment">// let scope = &#x27;snsapi_base&#x27;; //</span><br>    <span class="hljs-keyword">let</span> url =<br>      <span class="hljs-string">&#x27;https://open.weixin.qq.com/connect/oauth2/authorize&#x27;</span> +<br>      <span class="hljs-string">&#x27;?appid=&#x27;</span> +<br>      appid +<br>      <span class="hljs-string">&#x27;&amp;redirect_uri=&#x27;</span> +<br>      uri +<br>      <span class="hljs-string">&#x27;&amp;response_type=code&#x27;</span> +<br>      <span class="hljs-string">&#x27;&amp;scope=&#x27;</span> +<br>      scope +<br>      <span class="hljs-string">&#x27;&amp;state=123&#x27;</span> +<br>      <span class="hljs-string">&#x27;#wechat_redirect&#x27;</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = url<br>  &#125;,<br>  <span class="hljs-comment">// 获取接口上指定参数值</span><br>  <span class="hljs-attr">p</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">name, defaultValue</span>) &#123;<br>    <span class="hljs-keyword">var</span> query = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">var</span> vars = query.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; vars.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">var</span> pair = vars[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>)<br>      <span class="hljs-keyword">if</span> (pair[<span class="hljs-number">0</span>] == name) &#123;<br>        <span class="hljs-keyword">return</span> pair[<span class="hljs-number">1</span>]<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> defaultValue == <span class="hljs-literal">undefined</span> ? <span class="hljs-literal">null</span> : defaultValue<br>  &#125;,<br>  <span class="hljs-comment">// 判断当前环境</span><br>  <span class="hljs-attr">is_weixn_qq</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> ua = navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">toLowerCase</span>()<br>    <span class="hljs-keyword">if</span> (ua.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/MicroMessenger/i</span>) == <span class="hljs-string">&#x27;micromessenger&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;微信&#x27;</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ua.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/QQ/i</span>) == <span class="hljs-string">&#x27;qq&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;QQ&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;,<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = wxUtil<br></code></pre></td></tr></table></figure><p>调用</p><ul><li>注意:需要在公众号后台配置授权回调地址</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br> <span class="hljs-keyword">const</span> wxPayUtil = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./common/uni-wx-util.js&#x27;</span>)<br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">globalData</span>: &#123;<br>   <span class="hljs-attr">baseUrl</span>: <span class="hljs-string">&#x27;http://xy.myym.top/xy-server&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">onLaunch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;App Launch&#x27;</span>)<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">$u</span>.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/SysUser/getByCurr&#x27;</span>, &#123;&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    wxPayUtil.<span class="hljs-title function_">getJscode</span>(<span class="hljs-string">&#x27;http://xy.myym.top/shop/#/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">code, option</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(code, option)<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">$u</span>.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/SysUserAcc/doWeChat&#x27;</span>,&#123;<br>      code<br>     &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>      uni.<span class="hljs-title function_">setStorageSync</span>(<span class="hljs-string">&#x27;satoken&#x27;</span>,res.<span class="hljs-property">data</span>.<span class="hljs-property">tokenInfo</span>.<span class="hljs-property">tokenValue</span>)<br>     &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>    &#125;)<br>     &#125;)<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-attr">onShow</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;App Show&#x27;</span>)<br>  &#125;,<br>  <span class="hljs-attr">onHide</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;App Hide&#x27;</span>)<br>  &#125;<br> &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="uniApp-公众号支付公用封装方法"><a href="#uniApp-公众号支付公用封装方法" class="headerlink" title="uniApp 公众号支付公用封装方法"></a>uniApp 公众号支付公用封装方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 微信支付相关</span><br><span class="hljs-keyword">let</span> wxPayUtil = &#123;<br>  <span class="hljs-comment">// 开始调起支付</span><br>  <span class="hljs-comment">// 订单信息、成功回调、失败回调</span><br>  <span class="hljs-attr">jsapi_pay</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">info, successFn, failFn</span>) &#123;<br>    <span class="hljs-comment">// alert(JSON.stringify(info))</span><br>    <span class="hljs-title class_">WeixinJSBridge</span>.<span class="hljs-title function_">invoke</span>(<br>      <span class="hljs-string">&#x27;getBrandWCPayRequest&#x27;</span>,<br>      &#123;<br>        <span class="hljs-attr">appId</span>: info.<span class="hljs-property">appId</span>, <span class="hljs-comment">//公众号名称，由商户传入</span><br>        <span class="hljs-attr">timeStamp</span>: info.<span class="hljs-property">timeStamp</span>, <span class="hljs-comment">//时间戳，自1970年以来的秒数</span><br>        <span class="hljs-attr">nonceStr</span>: info.<span class="hljs-property">nonceStr</span>, <span class="hljs-comment">//随机串</span><br>        <span class="hljs-attr">package</span>: info[<span class="hljs-string">&#x27;package&#x27;</span>],<br>        <span class="hljs-attr">signType</span>: info.<span class="hljs-property">signType</span>, <span class="hljs-comment">//微信签名方式：</span><br>        <span class="hljs-attr">paySign</span>: info.<span class="hljs-property">paySign</span>, <span class="hljs-comment">//微信签名</span><br>      &#125;,<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-keyword">if</span> (res.<span class="hljs-property">err_msg</span> == <span class="hljs-string">&#x27;get_brand_wcpay_request:ok&#x27;</span>) &#123;<br>          <span class="hljs-comment">// 使用以上方式判断前端返回,微信团队郑重提示：</span><br>          <span class="hljs-comment">// res.err_msg将在用户支付成功后返回ok，但并不保证它绝对可靠。</span><br>          <span class="hljs-keyword">if</span> (successFn) &#123;<br>            <span class="hljs-title function_">successFn</span>()<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">if</span> (failFn) &#123;<br>            <span class="hljs-title function_">failFn</span>()<br>          &#125;<br>        &#125;<br>      &#125;<br>    )<br>  &#125;,<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = wxPayUtil<br></code></pre></td></tr></table></figure><p>调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> wxPayUtil = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../../common/uni-wx-pay-util.js&#x27;</span>)<br><br><span class="hljs-comment">//确认支付</span><br><span class="hljs-title function_">pay</span>(<span class="hljs-params"></span>) &#123;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">payShow</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">payShow</span><br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$u</span>.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/SmOrderPay/getPayInfoByWxAppPay&#x27;</span>,&#123;<br>  <span class="hljs-attr">pay_id</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">pay_id</span><br> &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>  wxPayUtil.<span class="hljs-title function_">jsapi_pay</span>(res.<span class="hljs-property">data</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">$all</span>.<span class="hljs-title function_">toast</span>(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;支付成功&#x27;</span>)<br>   <span class="hljs-comment">//获取订单列表</span><br>   <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getOrder</span>()<br>  &#125;,<span class="hljs-function">()=&gt;</span>&#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">$u</span>.<span class="hljs-title function_">toast</span>(<span class="hljs-string">&#x27;支付失败&#x27;</span>)<br>  &#125;,)<br> &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br> &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><p><strong>注意:以上方法需要在公众号使用才会有效果</strong></p>]]></content>
    
    
    <categories>
      
      <category>uniApp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>utils</tag>
      
      <tag>uniApp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReactHooks</title>
    <link href="/blog/2021/01/04/react/react_hooks/"/>
    <url>/blog/2021/01/04/react/react_hooks/</url>
    
    <content type="html"><![CDATA[<h1 id="react-hooks"><a href="#react-hooks" class="headerlink" title="react-hooks"></a>react-hooks</h1><p><code>Hook</code> 是 React16.8 的新特性，<code>Hook</code> 使你在无需修改组件结构的情况下复用状态逻辑。</p><p>弥补了 functin Component 没有实例没有生命周期的问题，<code>react</code> 项目基本上可以全部用 function Component 去实现了。</p><h2 id="hook-总览"><a href="#hook-总览" class="headerlink" title="hook 总览"></a>hook 总览</h2><p>常用的官方的 <code>hook</code> 主要是下面几个：</p><ul><li>useState()</li><li>useReducer()</li><li>useContext()</li><li>useRef()</li><li>useImperative()</li><li>useEffect()</li><li>useLayoutEffect()</li><li>useMemo()</li><li>useCallback()</li></ul><h2 id="hook-基础"><a href="#hook-基础" class="headerlink" title="hook 基础"></a>hook 基础</h2><p>hook 使用规则：</p><ul><li>不要在循环，条件，或者嵌套函数中调用 hook，在最顶层使用 hook</li><li>不能在普通函数中调用 hook</li></ul><p>下面主要记录每个 hook 基础的用法，</p><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p>存取数据的一种方式，对于简单的 state 适用，复杂的更新逻辑的 state 考虑使用 useReducer</p><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [state, setState] = <span class="hljs-title function_">useState</span>(initState)<br></code></pre></td></tr></table></figure><p>更新：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setState</span>(newState)<br><span class="hljs-title function_">setState</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> newState) <span class="hljs-comment">// 函数式更新</span><br></code></pre></td></tr></table></figure><p>setState 是稳定的，所以在一些 hook 依赖中可以省略</p><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><p>useState 的一种代替方案，当 state 的处理逻辑比较复杂的时候，有多个子值得时候，可以考虑用 useReducer</p><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> initialState = &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">state, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;increment&#x27;</span>:<br>      <span class="hljs-keyword">return</span> &#123; ...state, <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> + <span class="hljs-number">1</span> &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;decrement&#x27;</span>:<br>      <span class="hljs-keyword">return</span> &#123; ...state, <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> - <span class="hljs-number">1</span> &#125;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>()<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, initialState)<br></code></pre></td></tr></table></figure><p>如果有第三个参数，则第三个参数为一个函数，接受第二个参数的值作为参数，返回初始值。</p><p>dispatch 是稳定的，所以在一些 hook 依赖中可以省略</p><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> value = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">MyContext</span>)<br></code></pre></td></tr></table></figure><p>接受一个 context 对象，并返回该 context 对象的当前值，配合 context 使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> themes = &#123;<br>  <span class="hljs-attr">light</span>: &#123;<br>    <span class="hljs-attr">foreground</span>: <span class="hljs-string">&#x27;#000000&#x27;</span>,<br>    <span class="hljs-attr">background</span>: <span class="hljs-string">&#x27;#eeeeee&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">dark</span>: &#123;<br>    <span class="hljs-attr">foreground</span>: <span class="hljs-string">&#x27;#ffffff&#x27;</span>,<br>    <span class="hljs-attr">background</span>: <span class="hljs-string">&#x27;#222222&#x27;</span>,<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ThemeContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>(themes.<span class="hljs-property">light</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;themes.dark&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Toolbar</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Toolbar</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ThemedButton</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ThemedButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ThemeContext</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> <span class="hljs-attr">theme.background</span>, <span class="hljs-attr">color:</span> <span class="hljs-attr">theme.foreground</span> &#125;&#125;&gt;</span>I am styled by theme context!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> refContainer = <span class="hljs-title function_">useRef</span>(initValue)<br></code></pre></td></tr></table></figure><p>返回一个可变的 ref 对象，其 .current 属性被初始化为传入的参数（initialValue）。返回的 ref 对象在组件的整个生命周期内持续存在。</p><ul><li>访问 dom 的一个方式</li><li>可以将其作为一个值来使用，在每次渲染时都返回同一个 ref 对象</li><li>改变其 ref 的值，不会引起组件的重新渲染</li></ul><p>例子 1，访问 dom 的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">TextInputWithFocusButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> inputEl = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">onButtonClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-comment">// `current` 指向已挂载到 DOM 上的文本输入元素</span><br>    inputEl.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>()<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputEl&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onButtonClick&#125;</span>&gt;</span>Focus the input<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>例子 2，作为一个对象来保存值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useEffect, useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-comment">// 记录定时器，方便可以随时停止计时器</span><br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    timer.<span class="hljs-property">current</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>      <span class="hljs-title function_">setCount</span>(<span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> count + <span class="hljs-number">1</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">clearInterval</span>(timer.<span class="hljs-property">current</span>)<br>      timer.<span class="hljs-property">current</span> = <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">stop</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (timer.<span class="hljs-property">current</span>) &#123;<br>      <span class="hljs-built_in">clearInterval</span>(timer.<span class="hljs-property">current</span>)<br>      timer.<span class="hljs-property">current</span> = <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;stop&#125;</span>&gt;</span>stop<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><h3 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h3><p><code>useImperativeHandle</code> 可以让你在使用 ref 时自定义暴露给父组件的实例值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useImperativeHandle</span>(ref, createHandle, [deps])<br></code></pre></td></tr></table></figure><ul><li>ref：需要被赋值的 ref 对象</li><li>createHandle：的返回值作为 ref.current 的值。</li><li>[deps]：依赖数组，依赖发生变化重新执行 createHandle 函数</li></ul><p>使用例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>()<br>  <span class="hljs-title function_">useImperativeHandle</span>(ref, <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">focus</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>()<br>    &#125;,<br>  &#125;))<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br>&#125;)<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// App.js</span><br>;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">cRef</span>=<span class="hljs-string">&#123;this.myRef&#125;</span> /&gt;</span></span><br><br><span class="hljs-comment">// Child.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child</span> = props =&gt; &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>()<br>  <span class="hljs-keyword">const</span> &#123; cRef &#125; = props<br>  <span class="hljs-title function_">useImperativeHandle</span>(cRef, <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">focus</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>()<br>    &#125;,<br>  &#125;))<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>引入副作用，销毁函数和回调函数在 commit 阶段异步调度，在 layout 阶段完成后异步执行，不会阻塞 ui 得渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//...副作用</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// ...清除副作用</span><br>  &#125;<br>&#125;, [deps])<br></code></pre></td></tr></table></figure><ul><li>副作用在 commit 阶段异步执行，清除副作用的销毁函数会在下一阶段的的 commit 阶段执行，</li><li>[deps]：依赖数组，依赖发生变化重新执行</li></ul><h3 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h3><p>引入副作用的，用法和 <code>useEffect</code> 一样，但 <code>useLayoutEffect</code> 会阻塞 <code>dom</code> 的渲染，同步执行，上一次更新的销毁函数在 commit 的 mutation 阶段执行，回调函数在在 layout 阶段执行，和 componentDidxxxx 是等价的。</p><h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><p>返回一个<code>memo</code> 值，作为一种性能优化的手段，只有当依赖项的依赖改变才会重新渲染值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> memoizedValue = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">computeExpensiveValue</span>(a, b), [a, b])<br></code></pre></td></tr></table></figure><h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><p>返回一个 <code>memoized</code> 回调函数，作为一种性能优化的手段，只有当依赖项的依赖改变才会重新构建该函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> memoizedCallback = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">doSomething</span>(a, b)<br>&#125;, [a, b])<br></code></pre></td></tr></table></figure><h3 id="useDebugValue"><a href="#useDebugValue" class="headerlink" title="useDebugValue"></a>useDebugValue</h3><p><code>useDebugValue</code> 可用于在 React 开发者工具中显示自定义 hook 的标签, 浏览器装有 react 开发工具调试代码的时候才有用。</p><h3 id="useTransition"><a href="#useTransition" class="headerlink" title="useTransition"></a>useTransition</h3><p>返回一个状态值表示过渡任务的等待状态，以及一个启动该过渡任务的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [isPending, startTransition] = <span class="hljs-title function_">useTransition</span>()<br></code></pre></td></tr></table></figure><ul><li>isPending: 指示过渡任务何时活跃以显示一个等待状态，为 true 时表示过渡任务还没更新完。</li><li>startTransition: 允许你通过标记更新将提供的回调函数作为一个过渡任务，变为过渡任务则说明更新往后放，先更新其他更紧急的任务。</li></ul><p>例子：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect, useState, useTransition &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">SearchResult</span> = props =&gt; &#123;<br>  <span class="hljs-keyword">const</span> resultList = props.<span class="hljs-property">query</span><br>    ? <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">50000</span> &#125;, <span class="hljs-function">(<span class="hljs-params">_, index</span>) =&gt;</span> (&#123;<br>        <span class="hljs-attr">id</span>: index,<br>        <span class="hljs-attr">keyword</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;props.query&#125;</span> -- 搜索结果<span class="hljs-subst">$&#123;index&#125;</span>`</span>,<br>      &#125;))<br>    : []<br>  <span class="hljs-keyword">return</span> resultList.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">&#123; id, keyword &#125;</span>) =&gt;</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;id&#125;</span>&gt;</span>&#123;keyword&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [isTrans, setIstrans] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>  <span class="hljs-keyword">const</span> [searchVal, setSearchVal] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>  <span class="hljs-keyword">const</span> [loading, startTransition] = <span class="hljs-title function_">useTransition</span>(&#123; <span class="hljs-attr">timeoutMs</span>: <span class="hljs-number">2000</span> &#125;)<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 监听搜索值改变</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;对搜索值更新的响应++++++&#x27;</span> + searchVal + <span class="hljs-string">&#x27;+++++++++++&#x27;</span>)<br>  &#125;, [searchVal])<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 监听输入框值改变</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;对输入框值更新的响应-----&#x27;</span> + value + <span class="hljs-string">&#x27;-------------&#x27;</span>)<br>  &#125;, [value])<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (isTrans) &#123;<br>      <span class="hljs-title function_">startTransition</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">setSearchVal</span>(value)<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">setSearchVal</span>(value)<br>    &#125;<br>  &#125;, [value])<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>StartTransition<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setValue(e.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIstrans(!isTrans)&#125;&gt;&#123;isTrans ? &#x27;transiton&#x27; : &#x27;normal&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;loading &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>数据加载中，请稍候...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">SearchResult</span> <span class="hljs-attr">query</span>=<span class="hljs-string">&#123;searchVal&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">SearchResult</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="useDeferredValue"><a href="#useDeferredValue" class="headerlink" title="useDeferredValue"></a>useDeferredValue</h3><p><code>useDeferredValue</code> 接受一个值，并返回该值的新副本，该副本将推迟到更紧急地更新之后。如果当前渲染是一个紧急更新的结果，比如用户输入，React 将返回之前的值，然后在紧急渲染完成后渲染新的值。本，该副本将推迟到更紧急地更新之后</p><h2 id="react-router-v6-hooks"><a href="#react-router-v6-hooks" class="headerlink" title="react-router v6 hooks"></a>react-router v6 hooks</h2><h3 id="useHref"><a href="#useHref" class="headerlink" title="useHref"></a>useHref</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useHref</span>(<span class="hljs-params">to: To</span>): <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p><code>useHref</code>钩子返回一个 URL，可以用来链接到给定的 to 位置，甚至在 React router 之外。</p><p><code>useHref</code>传入一个字符串或<code>To</code>对象，返回一个 URL 的绝对路径。可以在参数中传入一个相对路径、绝对路径、To 对象。<br><code>react hooks v6</code>中的<code>Link</code>组件内部使用<code>useHref</code>获取它的 href 值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Path</span> &#123;<br>  <span class="hljs-attr">pathname</span>: <span class="hljs-title class_">Pathname</span><br>  <span class="hljs-attr">search</span>: <span class="hljs-title class_">Search</span><br>  <span class="hljs-attr">hash</span>: <span class="hljs-title class_">Hash</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">To</span> = <span class="hljs-built_in">string</span> | <span class="hljs-title class_">Partial</span>&lt;<span class="hljs-title class_">Path</span>&gt;<br></code></pre></td></tr></table></figure><p>例子：</p><p>当前路由：/page1/page2</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useHref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Page2</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">useHref</span>(<span class="hljs-string">&#x27;../&#x27;</span>)) <span class="hljs-comment">// 输出 &#x27;/page1/&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">useHref</span>(<span class="hljs-string">&#x27;../../&#x27;</span>)) <span class="hljs-comment">// 输出 &#x27;/&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">useHref</span>(<span class="hljs-string">&#x27;/page1&#x27;</span>)) <span class="hljs-comment">// 输出 &#x27;/page&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">useHref</span>(<span class="hljs-string">&#x27;/pageabc&#x27;</span>)) <span class="hljs-comment">// 输出 &#x27;/pageabc&#x27; 可见路径与当前路由无关</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">useHref</span>(&#123; <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;/page1&#x27;</span>, <span class="hljs-attr">search</span>: <span class="hljs-string">&#x27;name=123&#x27;</span>, <span class="hljs-attr">hash</span>: <span class="hljs-string">&#x27;test&#x27;</span> &#125;)) <span class="hljs-comment">// 输出 &#x27;/page1?name=123#test&#x27;</span><br>  &#125;, [])<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Page2</span><br></code></pre></td></tr></table></figure><h3 id="useInRouterContext"><a href="#useInRouterContext" class="headerlink" title="useInRouterContext"></a>useInRouterContext</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useInRouterContext</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">boolean</span><br></code></pre></td></tr></table></figure><p>如果组件在<code>Router</code>组件中的上下文中渲染，<code>useInRouterContext</code>将返回 true，否则返回 false。这对于一些需要知道是否在<code>react router</code>的上下文中渲染的第三方扩展非常有用。</p><p>判断当前组件是否在由<code>Router</code>组件创建的<code>Context</code>中</p><h3 id="useLocation"><a href="#useLocation" class="headerlink" title="useLocation"></a>useLocation</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useLocation</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Location</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Location</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Path</span> &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-built_in">unknown</span><br>  <span class="hljs-attr">key</span>: <span class="hljs-title class_">Key</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个<code>hook</code>返回当前路由的<code>location</code>对象。</p><h3 id="useMatch"><a href="#useMatch" class="headerlink" title="useMatch"></a>useMatch</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> useMatch&lt;<span class="hljs-title class_">ParamKey</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span> = <span class="hljs-built_in">string</span>&gt;(<span class="hljs-attr">pattern</span>: <span class="hljs-title class_">PathPattern</span> | <span class="hljs-built_in">string</span>): <span class="hljs-title class_">PathMatch</span>&lt;<span class="hljs-title class_">ParamKey</span>&gt; | <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>返回给定路径上相对于当前位置的路由的匹配数据。</p><p><code>react router v5</code>中的<code>useRouteMatch</code>在 v6 版本中更名为<code>useMatch</code>。内部示例调用了<code>matchPath</code>方法根据 URL 路径名匹配路由路径模式，并返回有关匹配的信息。如果模式与给定路径名不匹配，则返回<code>null</code>。</p><h3 id="useNavigate"><a href="#useNavigate" class="headerlink" title="useNavigate"></a>useNavigate</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useNavigate</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">NavigateFunction</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">NavigateFunction</span> &#123;<br>  (<span class="hljs-attr">to</span>: <span class="hljs-title class_">To</span>, options?: &#123; replace?: <span class="hljs-built_in">boolean</span>; state?: <span class="hljs-built_in">any</span> &#125;): <span class="hljs-built_in">void</span><br>  (<span class="hljs-attr">delta</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">void</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>useNavigate</code>钩子返回一个函数，该函数允许您以编程方式进行导航，例如在提交表单之后。</p><p><code>react router v5</code>中组件获取到的<code>useHistory</code>在 v6 版本更名为<code>useNavigate</code>。在用法上作出了较大改变</p><p>例子：</p><p>当前路由：/user/page2<br>其他路由：/user/page1</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Page2</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">let</span> navigate = <span class="hljs-title function_">useNavigate</span>()<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;/user/page1&#x27;</span>) <span class="hljs-comment">// 导航到&#x27;/user/page1&#x27;</span><br>    <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;../&#x27;</span>) <span class="hljs-comment">// 导航到&#x27;/user&#x27;</span><br>    <span class="hljs-title function_">navigate</span>(-<span class="hljs-number">1</span>) <span class="hljs-comment">// 导航到/user/page1 相当于v5中history.go(-1) history.goBack()</span><br>    <span class="hljs-title function_">navigate</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">//导航到/user 相当于v5中history.go(1) history.goForward()</span><br>    <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;/user/page2/&#x27;</span>,&#123; <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">name</span>:<span class="hljs-number">123</span> &#125;&#125; <span class="hljs-comment">// 相当于v5中history.replace()，并同时传入state</span><br>  &#125;,[])<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Page2</span><br></code></pre></td></tr></table></figure><h3 id="useNavigationType"><a href="#useNavigationType" class="headerlink" title="useNavigationType"></a>useNavigationType</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useNavigationType</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">NavigationType</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">NavigationType</span> = <span class="hljs-string">&#x27;POP&#x27;</span> | <span class="hljs-string">&#x27;PUSH&#x27;</span> | <span class="hljs-string">&#x27;REPLACE&#x27;</span><br></code></pre></td></tr></table></figure><p>这个钩子返回当前的导航类型或用户如何到达当前页面；通过历史堆栈上的<code>pop</code>、<code>push</code>或<code>replace</code>操作。</p><p>这个<code>hooks</code>类似<code>react router v5</code>中组件传入参数中的<code>history</code>对象的<code>action</code>属性，返回触发当前<code>navigate</code>的是何种操作</p><h3 id="useOutlet"><a href="#useOutlet" class="headerlink" title="useOutlet"></a>useOutlet</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useOutlet</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">React</span>.<span class="hljs-property">ReactElement</span> | <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>返回路由当前路由的子路由的元素。这个<code>hook</code>被<code>Outlet</code>组件在内部使用用于渲染子路由。</p><h3 id="useParams"><a href="#useParams" class="headerlink" title="useParams"></a>useParams</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> useParams&lt;K <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span> = <span class="hljs-built_in">string</span>&gt;(): <span class="hljs-title class_">Readonly</span>&lt;<span class="hljs-title class_">Params</span>&lt;K&gt;&gt;<br></code></pre></td></tr></table></figure><p><code>useParams</code>返回 URL 参数的键/值对的对象。使用它来访问当前<code>Route</code>的<code>match.params</code>。子路由从其父路由继承所有参数。</p><h3 id="useSearchParams"><a href="#useSearchParams" class="headerlink" title="useSearchParams"></a>useSearchParams</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useSearchParams</span>(<span class="hljs-params"></span><br><span class="hljs-params">  defaultInit?: URLSearchParamsInit</span><br><span class="hljs-params"></span>): [<span class="hljs-title class_">URLSearchParams</span>, <span class="hljs-title class_">SetURLSearchParams</span>];<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">ParamKeyValuePair</span> = [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>];<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">URLSearchParamsInit</span> =<br>  | <span class="hljs-built_in">string</span><br>  | <span class="hljs-title class_">ParamKeyValuePair</span>[]<br>  | <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span> | <span class="hljs-built_in">string</span>[]&gt;<br>  | <span class="hljs-title class_">URLSearchParams</span>;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">SetURLSearchParams</span> = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  nextInit?: URLSearchParamsInit,</span></span><br><span class="hljs-params"><span class="hljs-function">  navigateOpts?: : &#123; replace?: <span class="hljs-built_in">boolean</span>; state?: <span class="hljs-built_in">any</span> &#125;</span></span><br><span class="hljs-params"><span class="hljs-function"></span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br></code></pre></td></tr></table></figure><p><code>useSearchParams</code>用于读取和修改 URL 中当前位置的查询字符串。与<code>useState</code>一样，<code>useSearchParams</code>返回一个包含两个值的数组：<code>当前位置的搜索参数</code>和<code>一个可用于更新它们的函数</code>。</p><p><code>useSearchParams</code>的工作原理与<code>navigate</code>类似，但仅适用于 URL 的<code>search</code>部分。</p><div class="note note-warning">            <p>setSearchParams 的第二个参数要与 navigate 的第二个参数的类型相同</p>          </div><h3 id="useResolvedPath"><a href="#useResolvedPath" class="headerlink" title="useResolvedPath"></a>useResolvedPath</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useResolvedPath</span>(<span class="hljs-params">to: To</span>): <span class="hljs-title class_">Path</span><br></code></pre></td></tr></table></figure><p>这个<code>hook</code>解析给定<code>to</code>对象中的<code>pathname</code>与当前位置的路径名，并返回一个<code>Path</code>对象</p><h3 id="useRoutes"><a href="#useRoutes" class="headerlink" title="useRoutes"></a>useRoutes</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useRoutes</span>(<span class="hljs-params"></span><br><span class="hljs-params">  routes: RouteObject[],</span><br><span class="hljs-params">  location?: Partial&lt;Location&gt; | <span class="hljs-built_in">string</span>;</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">React</span>.<span class="hljs-property">ReactElement</span> | <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p><code>useRoutes</code>钩子与<code>Route</code>组件是功能相等的，但它使用 JavaScript 对象而不是<code>Route</code>元素取定义你的路由。该对象与<code>Route</code>元素具有相同的属性，但是它们不需要 JSX</p><div class="note note-warning">            <p>useRoutes 的返回值要么是一个可以让你用于渲染路由树的 React Element，要么是 null（路由不匹配时）</p>          </div><h2 id="react-redux-hooks"><a href="#react-redux-hooks" class="headerlink" title="react-redux hooks"></a>react-redux hooks</h2><p>首先看一个实际应用中使用<code>connect</code>的例子</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = props=&gt;&#123;<br>    <span class="hljs-comment">// 获取数据</span><br>    <span class="hljs-keyword">const</span> &#123; user, loading, dispatch &#125; = props<br><br>    <span class="hljs-comment">// 发起请求</span><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-title function_">dispatch</span>(&#123;<br>            <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;user/fetchUser&#x27;</span>,<span class="hljs-attr">payload</span>:&#123;&#125;<br>        &#125;)<br>    &#125;, [])<br><br>    <span class="hljs-comment">// 渲染页面</span><br>    <span class="hljs-keyword">if</span>(loading) <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;&#123;user.<span class="hljs-property">name</span>&#125;&lt;div&gt;<br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(<span class="hljs-function">(<span class="hljs-params">&#123; loading, user &#125;</span>)=&gt;</span>(&#123;<br>    <span class="hljs-attr">loading</span>:loading.<span class="hljs-property">effects</span>[<span class="hljs-string">&#x27;user/fetchUser&#x27;</span>],<br>    <span class="hljs-attr">user</span>:user.<span class="hljs-property">userInfo</span><br>&#125;))(<span class="hljs-title class_">Home</span>)<br></code></pre></td></tr></table></figure><p>现在使用<code>useDispatch</code> <code>useSelector</code>改造一下上面的代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = props =&gt; &#123;<br><br>    <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>()<br><br>    <span class="hljs-keyword">const</span> loadingEffect = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span>state.<span class="hljs-property">loading</span>);<br>    <span class="hljs-keyword">const</span> loading = loadingEffect.<span class="hljs-property">effects</span>[<span class="hljs-string">&#x27;user/fetchUser&#x27;</span>];<br>    <span class="hljs-keyword">const</span> user = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span>=&gt;</span>state.<span class="hljs-property">user</span>.<span class="hljs-property">userInfo</span>)<br><br>    <span class="hljs-comment">// 发起请求</span><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-title function_">dispatch</span>(&#123;<br>            <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;user/fetchUser&#x27;</span>,<span class="hljs-attr">payload</span>:&#123;&#125;<br>        &#125;)<br>    &#125;,[])<br><br>    <span class="hljs-comment">// 渲染页面</span><br>    <span class="hljs-keyword">if</span>(loading) <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;&#123;user.<span class="hljs-property">name</span>&#125;&lt;div&gt;<br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span><br></code></pre></td></tr></table></figure><p>再来说说<code>hooks</code>，它是<code>React-Redux</code>提供用来替代<code>connect()</code>高阶组件。这些<code>hooks</code> API 允许不使用<code>connect()</code>包裹组件的情况下订阅<code>store</code>和分发<code>actions</code>。</p><p>hooks 需要在函数组件中使用，不能在 React 类中使用<code>hooks</code>。</p><p>使用<code>hooks</code>和<code>connect</code>()一样，需要将应用包裹在<code>&lt;Provider/&gt;</code>中。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(rootReducer)<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="useSelector"><a href="#useSelector" class="headerlink" title="useSelector"></a>useSelector</h3><p>作用：从<code>redux</code>的<code>store</code>对象中提取数据(<code>state</code>)。</p><p>注意：<code>selector</code>函数应该是个纯函数，因为可能在任何时候执行多次。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useSelector &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">CounterComponent</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> counter = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">counter</span>)<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;counter&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>selector</code>函数被调用时将会被传入<code>Redux store</code>的整个<code>state</code>，作为唯一的参数。每次函数组件渲染时，<code>selector</code>函数都会被调用。<code>useSelector()</code>同样会订阅<code>Redux</code>的<code>store</code>，并且在分发<code>action</code>时，都会被执行一次。</p><p><code>selector</code>和<code>connect</code>的<code>mapStateToProps</code>的差异：</p><ul><li><code>selector</code>函数的返回值会被用作调用 useSelector() <code>hook</code>时的返回值，可以是任意类型的值。</li><li>当分发<code>action</code>时，useSelector 会将上次调用的结果与当前调用的结果进行引用（<code>===</code>）比较，不一样会进行重新渲染。</li><li><code>useSelector()</code>默认使用严格比较<code>===</code>来比较引用，而非浅比较。</li><li><code>selector</code>函数不会接收<code>ownProps</code>参数，但是<code>props</code>可以通过闭包获取使用或者通过使用柯里化的<code>selector</code>函数。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useSelector &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">TodoListItem</span> = props =&gt; &#123;<br>  <span class="hljs-keyword">const</span> todo = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">todos</span>[props.<span class="hljs-property">id</span>])<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;todo.text&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>action</code>被分发后，<code>useSelector()</code>对<code>selector</code>函数的返回值进行引用比较<code>===</code>，在<code>selector</code>的值改变时会触发 re-render。与<code>connect</code>不同，<code>useSelector()</code>不会阻止父组件重渲染导致的子组件重渲染的行为，即使组件的<code>props</code>没有发生改变。</p><p>如果想要进一步的性能优化，可以在<code>React.memo()</code>中包装函数组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">CounterComponent</span> = (<span class="hljs-params">&#123; name &#125;</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> counter = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">counter</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;name&#125;: &#123;counter&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">MemoizedCounterComponent</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">memo</span>(<span class="hljs-title class_">CounterComponent</span>)<br></code></pre></td></tr></table></figure><h3 id="useDispatch"><a href="#useDispatch" class="headerlink" title="useDispatch"></a>useDispatch</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>()<br></code></pre></td></tr></table></figure><p>作用：返回<code>Redux store</code>中对<code>dispatch</code>函数的引用。</p><p>当使用<code>dispatch</code>函数将回调传递给子组件时，建议使用<code>useCallback</code>函数将回调函数记忆化，防止因为回调函数引用的变化导致不必要的渲染。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useCallback, memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">MyIncrementButton</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">&#123; onIncrement &#125;</span>) =&gt;</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onIncrement&#125;</span>&gt;</span>Increment counter<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Counter</span> = (<span class="hljs-params">&#123; value &#125;</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>()<br>  <span class="hljs-keyword">const</span> incrementCounter = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;increment-counter&#x27;</span> &#125;), [dispatch])<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyIncrementButton</span> <span class="hljs-attr">onIncrement</span>=<span class="hljs-string">&#123;incrementCounter&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="useStore"><a href="#useStore" class="headerlink" title="useStore()"></a>useStore()</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>()<br></code></pre></td></tr></table></figure><p>作用：返回传递给组件的 <code>Redux store</code> 的引用。</p><p>注意：应该将<code>useSelector()</code>作为首选，只有在个别场景下才会需要使用它，比如替换 <code>store</code> 的 <code>reducers</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Counter</span> = (<span class="hljs-params">&#123; value &#125;</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>()<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;store.getState()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="hook-进阶"><a href="#hook-进阶" class="headerlink" title="hook 进阶"></a>hook 进阶</h2><p>react hook 工作当中也用了一段时间了，中间踩过一些坑，针对不同 <code>hook</code> 的特点，进行总结。</p><ul><li>两个 <code>state</code> 是关联或者需要一起发生改变，可以放在同一个 <code>state</code>，但不要太多</li><li>当 <code>state</code> 的更新逻辑比较复杂的时候则可以考虑使用 <code>useReducer</code> 代替</li><li><code>useEffect</code>、<code>useLayoutEffect</code>、<code>useMemo</code>、<code>useCallback</code>、<code>useImperativeHandle</code> 中依赖数组依赖项最好不要太多，太多则考虑拆分一下，感觉不超 3 到 4 个会比较合适。</li><li>去掉不必要的依赖项</li><li>合并相关的 <code>state</code> 为一个</li><li>通过 <code>setState</code> 回到函数方式去更新 <code>state</code></li><li>按照不同维度这个 hook 还能不能拆分的更细</li><li><code>useMemo</code> 多用于对 <code>React</code> 元素做 <code>memorize</code> 处理或者需要复杂计算得出的值，对于简单纯 js 计算就不要进行 <code>useMemo</code> 处理了。</li><li>useCallback 要配合<code>memo</code>使用</li></ul>]]></content>
    
    
    <categories>
      
      <category>react</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mixins的基本使用</title>
    <link href="/blog/2020/12/26/vue/mixins/"/>
    <url>/blog/2020/12/26/vue/mixins/</url>
    
    <content type="html"><![CDATA[<h2 id="一、来自官网的描述"><a href="#一、来自官网的描述" class="headerlink" title="一、来自官网的描述"></a>一、来自官网的描述</h2><p><code>混入 (mixins)： 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项</code>。</p><h2 id="二、如何创建-Mixins？"><a href="#二、如何创建-Mixins？" class="headerlink" title="二、如何创建 Mixins？"></a>二、如何创建 Mixins？</h2><p>在<code>src</code>目录下创建一个<code>mixins</code>文件夹，文件夹下新建一个<code>index.js</code>文件。前面我们说了<code>mixins</code>是一个<code>js</code>对象，所以应该以对象的形式来定义<code>index</code>，在对象中我们可以和<code>vue</code>组件一样来定义我们的<code>data</code>、<code>components</code>、<code>methods</code>、<code>created</code>、<code>computed</code>等属性，并通过<code>export</code>导出该对象</p><p><code>mixins/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-string">&#x27;测试&#x27;</span>,<br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">test</span>()<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">test</span>)<br>    &#125;,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p><code>main.js</code></p><ul><li><p>全局引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> mixins <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mixins/index.js&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixmn</span>(mixins)<br></code></pre></td></tr></table></figure></li><li><p>局部引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> mixins <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mixins/index.js&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">mixins</span>: [mixins], <span class="hljs-comment">//混入 mixins</span><br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;&#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="三、项目中如何使用混入"><a href="#三、项目中如何使用混入" class="headerlink" title="三、项目中如何使用混入"></a>三、项目中如何使用混入</h2><p>在 vue 组件内，如果想将一些公共功能，如组件、方法、钩子函数等复用，混入是一个很好的选择。下面简单介绍一下混入的方式及特点。<br>你可以将一个对象作为混入的选项，在组件中复用。因为 vue 实例也是对象，所以你可以将<code>vue</code>实例作为混入选项传递进去。<br>我们可以创建一个目录<code>mixins</code>，在创建一个<code>comment.js</code>文件如图：<br><img src="https://img-blog.csdnimg.cn/20200922202240508.png#pic_center" alt="在这里插入图片描述"></p><ol><li>定义混入对象<br><code>common.js</code>就是我们要混入其它组件的内容：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;erwerwe&#x27;</span>,<br>      <span class="hljs-attr">form</span>: &#123;<br>        <span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>,<br>      &#125;,<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">filters</span>: &#123;<br>    <span class="hljs-comment">//过滤器</span><br>    <span class="hljs-title function_">numToString</span>(<span class="hljs-params">value</span>) &#123;<br>      <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">toString</span>()<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//钩子函数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是混入的组件&#x27;</span>)<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">//计算属性</span><br>    <span class="hljs-title function_">ids</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> !<span class="hljs-variable language_">this</span>.<span class="hljs-property">loading</span><br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">exm</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是混入的exm方法&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-title function_">clickFn</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>)<br>    &#125;,<br><br>    <span class="hljs-comment">// 其它属性方法......</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>定义使用混入的组件<br><code>test.vue</code>组件用<code>mixins</code>把<code>common.js</code>内容混入当前组件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; form.a &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;buttonClick&quot;</span>&gt;</span>current<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//导入js文件</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> fun <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mixins/common.js&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">mixins</span>:[fun],  <span class="hljs-comment">//混入 fnu对象</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是当前组件&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;组件的msg&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">buttonClick</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">form</span>.<span class="hljs-property">a</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">clickFn</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">exm</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">exm</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是组件的exm方法&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>3.存在的问题：</p><p>混入的对象中的<code>msg</code>属性，和组件的<code>msg</code>属性冲突，以<code>组件的值优先。</code>组件中没有的属性，混入对象中的生效。</p><p>同名钩子函数将会合并成一个数组，<code>都会调用</code>，<code>混入函数先调用</code></p><p>值为对象的选项，如<code>methods</code>，<code>components</code>，<code>directives</code>等，将会合并为一个新对象，如果键名冲突，<code>组件的值优先</code></p><h2 id="四、与-vuex-的区别"><a href="#四、与-vuex-的区别" class="headerlink" title="四、与 vuex 的区别"></a>四、与 vuex 的区别</h2><ul><li><p><code>vuex</code>：用来做状态管理的，里面定义的变量在每个组件中均可以使用和修改，在任一组件中修改此变量的值之后，其他组件中此变量的值也会随之修改。</p></li><li><p><code>Mixins</code>：可以定义共用的变量，在每个组件中使用，引入组件中之后，各个变量是相互独立的，值的修改在组件中不会相互影响。</p></li></ul><h2 id="五、与公共组件的区别"><a href="#五、与公共组件的区别" class="headerlink" title="五、与公共组件的区别"></a>五、与公共组件的区别</h2><blockquote><p>组件：在父组件中引入组件，相当于在父组件中给出一片独立的空间供子组件使用，然后根据<code>props</code>来传值，但本质上两者是相对独立的。</p><p><code>Mixins</code>：则是在引入组件之后与组件中的对象和方法进行合并，相当于扩展了父组件的对象与方法，可以理解为形成了一个新的组件</p></blockquote><h2 id="六、与-vux-一起使用"><a href="#六、与-vux-一起使用" class="headerlink" title="六、与 vux 一起使用"></a>六、与 vux 一起使用</h2><p>有时候需要全局使用<code>store</code>里面的公用属性，每个页面单独引入比较麻烦，这个时候可以使用<code>mixins</code>来全局混入</p><p><code>store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;123&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">SET_Name</span>(<span class="hljs-params">state, data</span>) &#123;<br>      state.<span class="hljs-property">name</span> = data<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;&#125;,<br>  <span class="hljs-attr">modules</span>: &#123;&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>mixins/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;&#125;<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;name&#x27;</span>]),<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>然后全局混入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> mixins <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mixins/index.js&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixmn</span>(mixins)<br></code></pre></td></tr></table></figure><p>此时所有页面都能使用<code>name</code>拿到<code>123</code>这个值</p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node express基本使用</title>
    <link href="/blog/2020/12/23/node/express1/"/>
    <url>/blog/2020/12/23/node/express1/</url>
    
    <content type="html"><![CDATA[<h1 id="node-express-基本使用"><a href="#node-express-基本使用" class="headerlink" title="node express 基本使用"></a>node express 基本使用</h1><p>这里 用的<code>express 5</code> 请注意</p><h2 id="1-创建一个新的路由器对象"><a href="#1-创建一个新的路由器对象" class="headerlink" title="1.创建一个新的路由器对象"></a>1.创建一个新的<a href="http://expressjs.com/en/5x/api.html#router">路由器</a>对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>([options])<br>mergeParams  <span class="hljs-comment">// 保留来自父路由器的req.params值。如果父对象和子对象具有冲突的参数名，则以子对象的值为准。</span><br>caseSensitive <span class="hljs-comment">//     启用区分大小写。 默认情况下禁用，将“ / Foo”和“ / foo”视为相同。</span><br>strict <span class="hljs-comment">// 启用严格路由。 默认情况下禁用，路由器将“ / foo”和“ / foo /”视为相同。</span><br><br>路由规则是app.<span class="hljs-title function_">use</span>(path,router)定义的，router代表一个由express.<span class="hljs-title class_">Router</span>()创建的对象，在路由对象中可定义多个路由规则。可是如果我们的路由只有一条规则时，可直接接一个回调作为简写，也可直接使用app.<span class="hljs-property">get</span>或app.<span class="hljs-property">post</span>方法。即<br>当一个路径有多个匹配规则时，使用app.<span class="hljs-property">use</span>（）<br><br><span class="hljs-comment">// 很麻烦这样写</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/home&quot;</span>,callback)<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/home/one&quot;</span>,callback)<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/home/second&quot;</span>,callback)<br><br><span class="hljs-comment">// 可以创建一个router.js 专门用来一个路由匹配多个子路由</span><br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>()<br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;/&quot;</span>)<br>&#125;)<br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/one&quot;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;one&quot;</span>)<br>&#125;)<br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/second&quot;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;second&quot;</span>)<br>&#125;)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br><br><span class="hljs-comment">// 在app.js中导入router.js</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./router&quot;</span>)<br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>()<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/home&#x27;</span>,router) <span class="hljs-comment">//router路由对象中的路由都会匹配到&quot;/home&quot;路由后面</span><br></code></pre></td></tr></table></figure><h2 id="2-app-use-用法"><a href="#2-app-use-用法" class="headerlink" title="2.app.use 用法"></a>2.app.use 用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(path,callback)中的callback既可以是router对象又可以是函数<br>app.<span class="hljs-title function_">get</span>(path,callback)中的callback只能是函数<br><br><span class="hljs-comment">// 中间件也可以使用多级 callback   anth()中要调用next（） 否则不会往下走</span><br><span class="hljs-comment">// callback中定义的const let 在下一个callback中是无法访问的 要挂载到 req 或者 res 中</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/admin/api/rest/:resourse&#x27;</span>, <span class="hljs-title function_">anth</span>(), <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MODEL_NAME</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;inflection&#x27;</span>).<span class="hljs-title function_">classify</span>(req.<span class="hljs-property">params</span>.<span class="hljs-property">resourse</span>)<br>  <span class="hljs-comment">// const model = require(`../../models/$&#123;MODEL_NAME&#125;`);</span><br>  <span class="hljs-comment">// 为什么不使用 const   router 会访问不到model 所以挂载到req上</span><br>  req.<span class="hljs-property">model</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">`../../models/<span class="hljs-subst">$&#123;MODEL_NAME&#125;</span>`</span>);<br>  <span class="hljs-title function_">next</span>()<br>&#125;, router)<br></code></pre></td></tr></table></figure><h2 id="3-加载静态资源"><a href="#3-加载静态资源" class="headerlink" title="3.加载静态资源"></a>3.加载静态资源</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/uploads&#x27;</span>, express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;uploads&#x27;</span>)))<br><br><span class="hljs-comment">// 为了提供对静态资源文件（图片，css，js文件）的服务，请使用Express内置的中间函数express.static</span><br>uploads文件中静态资源通过 <span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:3000/uploads/6abe1df86915ae97a3ee28537a5f8cfa 来访问</span><br><br><span class="hljs-comment">// 为了给静态资源文件创建一个虚拟的文件前缀（文件系统中不存在），可以使用express.static函数指定一个虚拟的静态目录</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/static&#x27;</span>, express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;public&#x27;</span>))<br><span class="hljs-comment">// 使用‘/static’作为前缀来加载public文件夹下的文件了</span><br></code></pre></td></tr></table></figure><h2 id="4-不同模块的接口分模块开发"><a href="#4-不同模块的接口分模块开发" class="headerlink" title="4.不同模块的接口分模块开发"></a>4.不同模块的接口分模块开发</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br>  <span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>(&#123;<br>    <span class="hljs-attr">mergeParams</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 保留来自父路由器的req.params值。如果父对象和子对象具有冲突的参数名，则以子对象的值为准。</span><br>  &#125;) <span class="hljs-comment">// 创建express 的子路由, 分模块存储接口</span><br>  router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> items = <span class="hljs-keyword">await</span> req.<span class="hljs-property">model</span>.<span class="hljs-title function_">find</span>().<span class="hljs-title function_">limit</span>(<span class="hljs-number">10</span>) <span class="hljs-comment">// find 相当于select 进行查询操作</span><br>    res.<span class="hljs-title function_">send</span>(items)<br>  &#125;)<br>  app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/admin/api/rest/:resourse&#x27;</span>, router)<br>&#125; <span class="hljs-comment">// 在这个文件里你可以拿到app</span><br><br><span class="hljs-comment">// 在 index.js 中引入</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./routes/admin&#x27;</span>)(app)<br></code></pre></td></tr></table></figure><h2 id="5-使用-CRUD-公共接口"><a href="#5-使用-CRUD-公共接口" class="headerlink" title="5.使用 CRUD 公共接口"></a>5.使用 CRUD 公共接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 共享接口 CRUD</span><br><span class="hljs-comment"> * 假如 有两个模板 功能都是增删改查 接口都是相似的操作 就可以使用共享接口</span><br><span class="hljs-comment"> * app.use(&#x27;/admin/api/rest/:resourse&#x27;, router)</span><br><span class="hljs-comment"> * 需要自己加一个 rest 防止接口冲突</span><br><span class="hljs-comment"> * 后面是动态的参数  也就是自己的模型名 数据库表名 == 接口名</span><br><span class="hljs-comment"> * req.params.resourse  可以拿到动态参数 也就是表名  resourse 是自己定义的 也可以是别的</span><br><span class="hljs-comment"> * 然后 在接口里面 引入参数对应的模型名  </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br>  <span class="hljs-keyword">const</span> anth = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../../utils/auth&#x27;</span>)<br>  <span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>(&#123;<br>    <span class="hljs-attr">mergeParams</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 保留来自父路由器的req.params值。如果父对象和子对象具有冲突的参数名，则以子对象的值为准。</span><br>  &#125;) <span class="hljs-comment">// 创建express 的子路由, 分模块存储接口</span><br>  router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> model = <span class="hljs-keyword">await</span> req.<span class="hljs-property">model</span>.<span class="hljs-title function_">create</span>(req.<span class="hljs-property">body</span>) <span class="hljs-comment">// 往mongoodb添加数据</span><br>    res.<span class="hljs-title function_">send</span>(model)<br>  &#125;)<br>  router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>    <span class="hljs-comment">// populate 方法 返回关联对象id 转换成 对象</span><br>    <span class="hljs-keyword">const</span> queryOption = &#123;&#125;<br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">model</span>.<span class="hljs-property">modelName</span> == <span class="hljs-string">&#x27;Category&#x27;</span>) &#123;<br>      queryOption.<span class="hljs-property">populate</span> = <span class="hljs-string">&#x27;parent&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">model</span>.<span class="hljs-property">modelName</span> == <span class="hljs-string">&#x27;Article&#x27;</span>) &#123;<br>      queryOption.<span class="hljs-property">populate</span> = <span class="hljs-string">&#x27;categories&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> items = <span class="hljs-keyword">await</span> req.<span class="hljs-property">model</span>.<span class="hljs-title function_">find</span>().<span class="hljs-title function_">setOptions</span>(queryOption).<span class="hljs-title function_">limit</span>(<span class="hljs-number">10</span>) <span class="hljs-comment">// find 相当于select  进行查询操作 populate 查找绑定对象</span><br>    res.<span class="hljs-title function_">send</span>(items)<br>  &#125;)<br>  router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/:id&#x27;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> model = <span class="hljs-keyword">await</span> req.<span class="hljs-property">model</span>.<span class="hljs-title function_">findById</span>(req.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>) <span class="hljs-comment">// find 相当于select  进行查询操作</span><br>    res.<span class="hljs-title function_">send</span>(model)<br>  &#125;)<br>  router.<span class="hljs-title function_">put</span>(<span class="hljs-string">&#x27;/:id&#x27;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> model = <span class="hljs-keyword">await</span> req.<span class="hljs-property">model</span>.<span class="hljs-title function_">findByIdAndUpdate</span>(req.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>, req.<span class="hljs-property">body</span>) <span class="hljs-comment">// find 相当于select  进行查询操作</span><br>    res.<span class="hljs-title function_">send</span>(&#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;修改成功&#x27;</span> &#125;)<br>  &#125;)<br>  router.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;/:id&#x27;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>    <span class="hljs-keyword">await</span> req.<span class="hljs-property">model</span>.<span class="hljs-title function_">findByIdAndDelete</span>(req.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>) <span class="hljs-comment">// find 相当于select  进行查询操作</span><br>    res.<span class="hljs-title function_">send</span>(&#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;删除成功&#x27;</span> &#125;)<br>  &#125;)<br><br>  <span class="hljs-comment">//  使用 rest 防止接口冲突 加上私有前缀</span><br>  <span class="hljs-comment">//  /admin/api/rest/:resourse 中 /:resourse 绑定动态名称  resourse 是自己定义的 也可以是别的</span><br>  <span class="hljs-comment">//  前台传得 http://localhost:3000/admin/api/rest/items</span><br>  <span class="hljs-comment">//  req.params.resourse  可以拿到动态参数 也就是表名 也就是前台接口中items</span><br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-string">&#x27;/admin/api/rest/:resourse&#x27;</span>,<br>    <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// *inflection插件   inflection.classify( &#x27;message_bus_properties&#x27; );//=== &#x27;MessageBusProperty&#x27;  会把单词 复数 转换成 单数 因为mongoose中表名是单数  而接口中都是复数  转一下子</span><br>      <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MODEL_NAME</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;inflection&#x27;</span>).<span class="hljs-title function_">classify</span>(req.<span class="hljs-property">params</span>.<span class="hljs-property">resourse</span>)<br><br>      <span class="hljs-comment">// const model = require(`../../models/$&#123;MODEL_NAME&#125;`);</span><br>      <span class="hljs-comment">// 为什么不使用 const   router 会访问不到 model 所以挂载到req上</span><br>      req.<span class="hljs-property">model</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">`../../models/<span class="hljs-subst">$&#123;MODEL_NAME&#125;</span>`</span>)<br>      <span class="hljs-title function_">next</span>()<br>    &#125;,<br>    router<br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-图片文件上传-中间件-multer"><a href="#6-图片文件上传-中间件-multer" class="headerlink" title="6.图片文件上传 中间件 multer"></a>6.图片文件上传 中间件 multer</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>)<br><span class="hljs-comment">// dest 目标地址  文件存放在哪里</span><br><span class="hljs-keyword">const</span> upload = <span class="hljs-title function_">multer</span>(&#123; <span class="hljs-attr">dest</span>: __dirname + <span class="hljs-string">&#x27;/../../uploads&#x27;</span> &#125;)<br><span class="hljs-comment">// upload.single() 接受名称为的单个文件fieldname。单个文件将存储在中req.file。</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/admin/api/upload&#x27;</span>, upload.<span class="hljs-title function_">single</span>(<span class="hljs-string">&#x27;file&#x27;</span>), <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> file = req.<span class="hljs-property">file</span><br>  <span class="hljs-comment">// 如果想让前台查看上传图片要拼接文件路径返给前台 file.filename就是存储的文件名 uploads是存储的文件夹</span><br>  file.<span class="hljs-property">url</span> = <span class="hljs-string">`http://localhost:3000/uploads/<span class="hljs-subst">$&#123;file.filename&#125;</span>`</span><br>  res.<span class="hljs-title function_">send</span>(file)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="7-对存储用户密码进行加密解密操作-bcryptjs"><a href="#7-对存储用户密码进行加密解密操作-bcryptjs" class="headerlink" title="7. 对存储用户密码进行加密解密操作 bcryptjs"></a>7. 对存储用户密码进行加密解密操作 bcryptjs</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> bcryptjs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;bcryptjs&#x27;</span>)<br><span class="hljs-comment">// val 要加密的数据 也就是密码   10 就要加密的等级 最好是10-12之间 12以后加密跟解密性能慢 但是安全度高</span><br><span class="hljs-keyword">var</span> pwd = bcryptjs<span class="hljs-string">&#x27;.hashSync(val, 10)</span><br><span class="hljs-string">// 然后存到数据库表中</span><br><span class="hljs-string"></span><br><span class="hljs-string">// 登陆的时候 先根据前台传的 name 去数据库中那条数据   name 一般是唯一的 然后在取出密码</span><br><span class="hljs-string">// 密码校验的操作  password 是用户传来的密码  user.password 是数据库存储的加密的密码</span><br><span class="hljs-string">var flag = bcryptjs.compareSync(password, user.password) // 返回 true 和 false</span><br><span class="hljs-string">// true 返回正确 false 返回错误</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react-router-config的使用</title>
    <link href="/blog/2020/12/21/react/react-router-config/"/>
    <url>/blog/2020/12/21/react/react-router-config/</url>
    
    <content type="html"><![CDATA[<blockquote><p>随着项目的增大，路由会越来越多，这就需要我们进行集中管理，我们可以自己写脚本，也可以使用<code>react-router-config</code>这个第三方库，这个库简化了配置<code>React-Router</code>，并且对路由实现集中管理，还能实现嵌套路由，下面我们看一下如何使用<code>react-router-config</code>。</p></blockquote><p><code>react-router-config</code>的使用包含如下三个步骤：</p><ol><li>按照规则配置静态路由文件，示例代码如下：</li></ol><p>在<code>routes/index.jsx</code>中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//eslint-disable-next-line</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Layout</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/layouts&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ServerError</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/500&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NotFound</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/404&#x27;</span><br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,<br>    <span class="hljs-attr">routes</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/pages/blog&#x27;</span>)),<br>        <span class="hljs-attr">exact</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/pages/about&#x27;</span>)),<br>        <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/blog/:id&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/pages/blog/show&#x27;</span>)),<br>        <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;blog-show&#x27;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/tag&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/pages/tag&#x27;</span>)),<br>        <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;tag&#x27;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/category&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/pages/category&#x27;</span>)),<br>        <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/archive&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/pages/archive&#x27;</span>)),<br>        <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;archive&#x27;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/error&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">ServerError</span>,<br>        <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;server-error&#x27;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">NotFound</span>,<br>        <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;not-found&#x27;</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>]<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> routes<br></code></pre></td></tr></table></figure><p>仔细阅读代码，我们发现配置文件本质就是一个数组，数组的每一项都有如下属性：<code>path</code>、<code>component</code>、<code>routes</code>、<code>render</code>，（注意：<code>render</code>和<code>component</code>只能使用一个）</p><p>这是最简单的配置。</p><p>如果你的路由存在嵌套路由，比方说<code>/admin</code>下面有<code>/admin/control</code>，那么就必须在有嵌套的路由下追加<code>routes</code>属性，<code>routes</code>也是一个数组，数组的每一项也是一个对象，对象具有<code>path</code>属性和<code>component</code>属性。有时根据需求需要跳转，可以配置<code>render</code>属性，<code>render</code>为一个函数，函数内返回一个重定向组件。</p><ol start="2"><li><p>从<code>react-router-config</code>中导入<code>renderRoutes</code>方法，将上面配置的数据传入此方法。</p></li><li><p>将第二步的计算结果放到<code>Router</code>组件内部，代码如下：</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; renderRoutes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-config&#x27;</span><br><br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./routes/&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">renderRoutes</span>(routes)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><ol start="4"><li>这里需要注意，如果使用了嵌套路由，就需要这一步，如果没有嵌套路由，则忽略这一步。那就是在使用了嵌套路由的组件中设置占位符，本质是按照<code>react-router</code>的规则配置路由，我们在<code>Layout</code>组件中使用了嵌套路由<code>Layout</code>的代码如下：</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Suspense</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Spin</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; renderRoutes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-config&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/header&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Footer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/footer&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Loading</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> &#x27;<span class="hljs-attr">100</span>%&#x27;, <span class="hljs-attr">textAlign:</span> &#x27;<span class="hljs-attr">center</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Spin</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">BlogLayout</span> = props =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;blogs-body&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Loading</span> /&gt;</span>&#125;&gt;&#123;renderRoutes(props.route.routes)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">BlogLayout</span><br></code></pre></td></tr></table></figure><p>以上便是<code>react-router-config</code>的使用步骤，希望对你有所帮助。</p>]]></content>
    
    
    <categories>
      
      <category>react</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这一次，彻底弄懂 JavaScript 执行机制</title>
    <link href="/blog/2020/12/18/JS/eventLoop/"/>
    <url>/blog/2020/12/18/JS/eventLoop/</url>
    
    <content type="html"><![CDATA[<p>本文的目的就是要保证你彻底弄懂<code>javascript</code>的执行机制，如果读完本文还不懂，可以揍我。</p><p>不论你是<code>javascript</code>新手还是老鸟，不论是面试求职，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。因为<code>javascript</code>是一门单线程语言，所以我们可以得出结论：</p><ul><li>javascript 是按照语句出现的顺序执行的</li></ul><p>看到这里读者要打人了：我难道不知道<code>js</code>是一行一行执行的？还用你说？稍安勿躁，正因为<code>js</code>是一行一行执行的，所以我们以为<code>js</code>都是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br><br><span class="hljs-keyword">let</span> b = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b)<br></code></pre></td></tr></table></figure><p>然而实际上<code>js</code>是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;定时器开始啦&#x27;</span>)<br>&#125;)<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;马上执行for循环啦&#x27;</span>)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>    i == <span class="hljs-number">99</span> &amp;&amp; <span class="hljs-title function_">resolve</span>()<br>  &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行then函数啦&#x27;</span>)<br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;代码执行结束&#x27;</span>)<br></code></pre></td></tr></table></figure><p>依照<strong>js 是按照语句出现的顺序执行</strong>这个理念，我自信的写下输出结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//&quot;定时器开始啦&quot;</span><br><span class="hljs-comment">//&quot;马上执行for循环啦&quot;</span><br><span class="hljs-comment">//&quot;执行then函数啦&quot;</span><br><span class="hljs-comment">//&quot;代码执行结束&quot;</span><br></code></pre></td></tr></table></figure><p>去<code>chrome</code>上验证下，结果完全不对，瞬间懵了，说好的一行一行执行的呢？</p><p>我们真的要彻底弄明白<code>javascript</code>的执行机制了。</p><p>总结</p><ul><li>同步代码优先级高于异步代码优先级；</li><li><code>new Promise(fn)</code>中的<code>fn</code>是同步执行；</li><li>微任务优先级高于宏任务优先级；<ul><li>微任务：<code>process.nextTick()</code> &gt; <code>Promise.then()</code></li><li>宏任务：<code>setTimeout</code>、<code>setInterval</code> &gt; <code>setImmediate</code></li></ul></li></ul><h3 id="1-关于-javascript"><a href="#1-关于-javascript" class="headerlink" title="1.关于 javascript"></a>1.关于 javascript</h3><p><code>javascript</code>是一门<strong>单线程</strong>语言，在最新的 HTML5 中提出了<code>Web-Worker</code>，但<code>javascript</code>是单线程这一核心仍未改变。所以一切<code>javascript</code>版的”多线程”都是用单线程模拟出来的，一切<code>javascript</code>多线程都是纸老虎！</p><h3 id="2-javascript-事件循环"><a href="#2-javascript-事件循环" class="headerlink" title="2.javascript 事件循环"></a>2.javascript 事件循环</h3><p>既然<code>js</code>是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理<code>js</code>任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务分为两类：</p><ul><li>同步任务</li><li>异步任务</li></ul><p>当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：</p><p>导图要表达的内容用文字来表述的话：</p><ul><li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入<code>Event Table</code>并注册函数。</li><li>当指定的事情完成时，<code>Event Table</code>会将这个函数移入<code>Event Queue</code>。</li><li>主线程内的任务执行完毕为空，会去<code>Event Queue</code>读取对应的函数，进入主线程执行。</li><li>上述过程会不断重复，也就是常说的<code>Event Loop</code>(事件循环)。</li></ul><p>我们不禁要问了，那怎么知道主线程执行栈为空啊？<code>js</code>引擎存在<code>monitoring process</code>进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去<code>Event Queue</code>那里检查是否有等待被调用的函数。</p><p>说了这么多文字，不如直接一段代码更直白：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> data = []<br>$.<span class="hljs-title function_">ajax</span>(&#123;<br>  <span class="hljs-attr">url</span>: www.<span class="hljs-property">javascript</span>.<span class="hljs-property">com</span>,<br>  <span class="hljs-attr">data</span>: data,<br>  <span class="hljs-attr">success</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;发送成功!&#x27;</span>)<br>  &#125;,<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;代码执行结束&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上面是一段简易的<code>ajax</code>请求代码：</p><ul><li>ajax 进入 Event Table，注册回调函数<code>success</code>。</li><li>执行<code>console.log(&#39;代码执行结束&#39;)</code>。</li><li>ajax 事件完成，回调函数<code>success</code>进入 Event Queue。</li><li>主线程从 Event Queue 读取回调函数<code>success</code>并执行。</li></ul><p>相信通过上面的文字和代码，你已经对<code>js</code>的执行顺序有了初步了解。接下来我们来研究进阶话题：<code>setTimeout</code>。</p><h3 id="3-又爱又恨的-setTimeout"><a href="#3-又爱又恨的-setTimeout" class="headerlink" title="3.又爱又恨的 setTimeout"></a>3.又爱又恨的 setTimeout</h3><p>大名鼎鼎的<code>setTimeout</code>无需再多言，大家对他的第一印象就是异步可以延时执行，我们经常这么实现延时 3 秒执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;延时3秒&#x27;</span>)<br>&#125;, <span class="hljs-number">3000</span>)<br></code></pre></td></tr></table></figure><p>渐渐的<code>setTimeout</code>用的地方多了，问题也出现了，有时候明明写的延时 3 秒，实际却 5，6 秒才执行函数，这又咋回事啊？</p><p>先看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">task</span>()<br>&#125;, <span class="hljs-number">3000</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行console&#x27;</span>)<br></code></pre></td></tr></table></figure><p>根据前面我们的结论，<code>setTimeout</code>是异步的，应该先执行<code>console.log</code>这个同步任务，所以我们的结论是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//执行console</span><br><span class="hljs-comment">//task()</span><br></code></pre></td></tr></table></figure><p>去验证一下，结果正确！ 然后我们修改一下前面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">task</span>()<br>&#125;, <span class="hljs-number">3000</span>)<br><br><span class="hljs-title function_">sleep</span>(<span class="hljs-number">10000000</span>)<br></code></pre></td></tr></table></figure><p>乍一看其实差不多嘛，但我们把这段代码在<code>chrome</code>执行一下，却发现控制台执行<code>task()</code>需要的时间远远超过 3 秒，说好的延时三秒，为啥现在需要这么长时间啊？</p><p>这时候我们需要重新理解<code>setTimeout</code>的定义。我们先说上述代码是怎么执行的：</p><ul><li><code>task()</code>进入<code>Event Table</code>并注册,计时开始。</li><li>执行<code>sleep</code>函数，很慢，非常慢，计时仍在继续。</li><li>3 秒到了，计时事件<code>timeout</code>完成，<code>task()</code>进入<code>Event Queue</code>，但是<code>sleep</code>也太慢了吧，还没执行完，只好等着。</li><li><code>sleep</code>终于执行完了，<code>task()</code>终于从<code>Event Queue</code>进入了主线程执行。</li></ul><p>上述的流程走完，我们知道<code>setTimeout</code>这个函数，是经过指定时间后，把要执行的任务(本例中为<code>task()</code>)加入到<code>Event Queue</code>中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于 3 秒。</p><p>我们还经常遇到<code>setTimeout(fn,0)</code>这样的代码，0 秒后执行又是什么意思呢？是不是可以立即执行呢？</p><p>答案是不会的，<code>setTimeout(fn,0)</code>的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。举例说明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//代码1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;先执行这里&#x27;</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行啦&#x27;</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-comment">//代码2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;先执行这里&#x27;</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行啦&#x27;</span>)<br>&#125;, <span class="hljs-number">3000</span>)<br></code></pre></td></tr></table></figure><p>代码 1 的输出结果是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//先执行这里</span><br><span class="hljs-comment">//执行啦</span><br>复制代码<br></code></pre></td></tr></table></figure><p>代码 2 的输出结果是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//先执行这里</span><br><span class="hljs-comment">// ... 3s later</span><br><span class="hljs-comment">// 执行啦</span><br></code></pre></td></tr></table></figure><p>关于<code>setTimeout</code>要补充的是，即便主线程为空，0 毫秒实际上也是达不到的。根据<code>HTML</code>的标准，最低是 4 毫秒。有兴趣的同学可以自行了解。</p><h3 id="4-又恨又爱的-setInterval"><a href="#4-又恨又爱的-setInterval" class="headerlink" title="4.又恨又爱的 setInterval"></a>4.又恨又爱的 setInterval</h3><p>上面说完了<code>setTimeout</code>，当然不能错过它的孪生兄弟<code>setInterval</code>。他俩差不多，只不过后者是循环的执行。对于执行顺序来说，<code>setInterval</code>会每隔指定的时间将注册的函数置入<code>Event Queue</code>，如果前面的任务耗时太久，那么同样需要等待。</p><p>唯一需要注意的一点是，对于<code>setInterval(fn,ms)</code>来说，我们已经知道不是每过<code>ms</code>秒会执行一次<code>fn</code>，而是每过<code>ms</code>秒，会有<code>fn</code>进入<code>Event Queue</code>。一旦**<code>setInterval</code>的回调函数<code>fn</code>执行时间超过了延迟时间<code>ms</code>，那么就完全看不出来有时间间隔了**。这句话请读者仔细品味。</p><h3 id="5-Promise-与-process-nextTick-callback"><a href="#5-Promise-与-process-nextTick-callback" class="headerlink" title="5.Promise 与 process.nextTick(callback)"></a>5.Promise 与 process.nextTick(callback)</h3><p>传统的定时器我们已经研究过了，接着我们探究<code>Promise</code>与<code>process.nextTick(callback)</code>的表现。</p><p><code>Promise</code>的定义和功能本文不再赘述，不了解的读者可以学习一下阮一峰老师的<a href="http://es6.ruanyifeng.com/#docs/promise">Promise</a>。而<code>process.nextTick(callback)</code>类似<code>node.js</code>版的”<code>setTimeout</code>“，在事件循环的下一次循环中调用 <code>callback</code> 回调函数。</p><p>我们进入正题，除了广义的同步任务和异步任务，我们对任务有更精细的定义：</p><ul><li><code>macro-task</code>(宏任务)：包括整体代码<code>script</code>，<code>setTimeout</code>，<code>setInterval</code></li><li><code>micro-task</code>(微任务)：<code>Promise</code>，<code>process.nextTick</code></li></ul><p>不同类型的任务会进入对应的<code>Event Queue</code>，比如<code>setTimeout</code>和<code>setInterval</code>会进入相同的<code>Event Queue</code>。</p><p>事件循环的顺序，决定<code>js</code>代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用文章最开始的一段代码说明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setTimeout&#x27;</span>)<br>&#125;)<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise&#x27;</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;then&#x27;</span>)<br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;console&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>这段代码作为宏任务，进入主线程。</li><li>先遇到<code>setTimeout</code>，那么将其回调函数注册后分发到宏任务<code>Event Queue</code>。(注册过程与上同，下文不再描述)</li><li>接下来遇到了<code>Promise</code>，<code>new Promise</code>立即执行，<code>then</code>函数分发到微任务<code>Event Queue</code>。</li><li>遇到<code>console.log()</code>，立即执行。</li><li>好啦，整体代码 script 作为第一个宏任务执行结束，看看有哪些微任务？我们发现了<code>then</code>在微任务<code>Event Queue</code>里面，执行。</li><li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务<code>Event Queue</code>开始。我们发现了宏任务<code>Event Queue</code>中<code>setTimeout</code>对应的回调函数，立即执行。</li><li>结束。</li></ul><p>我们来分析一段较复杂的代码，看看你是否真的掌握了<code>js</code>的执行机制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;2&#x27;</span>)<br>  process.<span class="hljs-title function_">nextTick</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;3&#x27;</span>)<br>  &#125;)<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;4&#x27;</span>)<br>    <span class="hljs-title function_">resolve</span>()<br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;5&#x27;</span>)<br>  &#125;)<br>&#125;)<br>process.<span class="hljs-title function_">nextTick</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;6&#x27;</span>)<br>&#125;)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;7&#x27;</span>)<br>  <span class="hljs-title function_">resolve</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;8&#x27;</span>)<br>&#125;)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;9&#x27;</span>)<br>  process.<span class="hljs-title function_">nextTick</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;10&#x27;</span>)<br>  &#125;)<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;11&#x27;</span>)<br>    <span class="hljs-title function_">resolve</span>()<br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;12&#x27;</span>)<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>第一轮事件循环流程分析如下：</p><ul><li>整体<code>script</code>作为第一个宏任务进入主线程，遇到<code>console.log</code>，输出 1。</li><li>遇到<code>setTimeout</code>，其回调函数被分发到宏任务<code>Event Queue</code>中。我们暂且记为<code>setTimeout1</code>。</li><li>遇到<code>process.nextTick()</code>，其回调函数被分发到微任务 E<code>vent Queue</code>中。我们记为<code>process1</code>。</li><li>遇到<code>Promise</code>，<code>new Promise</code>直接执行，输出 7。<code>then</code>被分发到微任务<code>Event Queue</code>中。我们记为<code>then1</code>。</li><li>又遇到了<code>setTimeout</code>，其回调函数被分发到宏任务<code>Event Queue</code>中，我们记为<code>setTimeout2</code>。</li></ul><table><thead><tr><th>宏任务<code>Event Queue</code></th><th>微任务<code>Event Queue</code></th></tr></thead><tbody><tr><td>setTimeout1</td><td>process1</td></tr><tr><td>setTimeout2</td><td>then1</td></tr></tbody></table><ul><li>上表是第一轮事件循环宏任务结束时各<code>Event Queue</code>的情况，此时已经输出了 1 和 7。</li><li>我们发现了<code>process1</code>和<code>then1</code>两个微任务。</li><li>执行<code>process1</code>,输出 6。</li><li>执行<code>then1</code>，输出 8。</li></ul><p>好了，第一轮事件循环正式结束，这一轮的结果是输出 1，7，6，8。那么第二轮时间循环从<code>setTimeout1</code>宏任务开始：</p><ul><li>首先输出 2。接下来遇到了<code>process.nextTick()</code>，同样将其分发到微任务<code>Event Queue</code>中，记为<code>process2</code>。<code>new Promise</code>立即执行输出 4，<code>then</code>也分发到微任务 Event Queue 中，记为<code>then2</code>。</li></ul><table><thead><tr><th>宏任务<code>Event Queue</code></th><th>微任务<code>Event Queue</code></th></tr></thead><tbody><tr><td>setTimeout2</td><td>process2</td></tr><tr><td></td><td>then2</td></tr></tbody></table><ul><li>第二轮事件循环宏任务结束，我们发现有<code>process2</code>和<code>then2</code>两个微任务可以执行。</li><li>输出 3。</li><li>输出 5。</li><li>第二轮事件循环结束，第二轮输出 2，4，3，5。</li><li>第三轮事件循环开始，此时只剩<code>setTimeout2</code>了，执行。</li><li>直接输出 9。</li><li>将<code>process.nextTick()</code>分发到微任务 Event Queue 中。记为<code>process3</code>。</li><li>直接执行<code>new Promise</code>，输出 11。</li><li>将<code>then</code>分发到微任务<code>Event Queue</code>中，记为<code>then3</code>。</li></ul><table><thead><tr><th>宏任务<code>Event Queue</code></th><th>微任务<code>Event Queue</code></th></tr></thead><tbody><tr><td></td><td>process3</td></tr><tr><td></td><td>then3</td></tr></tbody></table><ul><li>第三轮事件循环宏任务执行结束，执行两个微任务<code>process3</code>和<code>then3</code>。</li><li>输出 10。</li><li>输出 12。</li><li>第三轮事件循环结束，第三轮输出 9，11，10，12。</li></ul><p>整段代码，共进行了三次事件循环，完整的输出为 1，7，6，8，2，4，3，5，9，11，10，12。 (请注意，<code>node</code>环境下的事件监听依赖<code>libuv</code>与前端环境不完全相同，输出顺序可能会有误差)</p><h3 id="6-写在最后"><a href="#6-写在最后" class="headerlink" title="6.写在最后"></a>6.写在最后</h3><h4 id="1-js-的异步"><a href="#1-js-的异步" class="headerlink" title="(1)js 的异步"></a>(1)js 的异步</h4><p>我们从最开头就说<code>javascript</code>是一门单线程语言，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的，牢牢把握住单线程这点非常重要。</p><h4 id="2-事件循环-Event-Loop"><a href="#2-事件循环-Event-Loop" class="headerlink" title="(2)事件循环 Event Loop"></a>(2)事件循环 Event Loop</h4><p>事件循环是<code>js</code>实现异步的一种方法，也是<code>js</code>的执行机制。</p><h4 id="3-javascript-的执行和运行"><a href="#3-javascript-的执行和运行" class="headerlink" title="(3)javascript 的执行和运行"></a>(3)javascript 的执行和运行</h4><p>执行和运行有很大的区别，<code>javascript</code>在不同的环境下，比如<code>node</code>，浏览器，<code>Ringo</code>等等，执行方式是不同的。而运行大多指<code>javascript</code>解析引擎，是统一的。</p><h4 id="4-setImmediate"><a href="#4-setImmediate" class="headerlink" title="(4)setImmediate"></a>(4)setImmediate</h4><p>微任务和宏任务还有很多种类，比如<code>setImmediate</code>等等，执行都是有共同点的，有兴趣的同学可以自行了解。</p><h4 id="5-最后的最后"><a href="#5-最后的最后" class="headerlink" title="(5)最后的最后"></a>(5)最后的最后</h4><ul><li><code>javascript</code>是一门单线程语言</li><li><code>Event Loop</code>是<code>javascript</code>的执行机制</li></ul><p>牢牢把握两个基本点，以认真学习<code>javascript</code>为中心，早日实现成为前端高手的伟大梦想！</p><p>本文转载于 <a href="https://juejin.cn/post/6844903512845860872">这一次，彻底弄懂 JavaScript 执行机制</a></p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>嗨，你真的懂this吗？</title>
    <link href="/blog/2020/12/18/JS/this/"/>
    <url>/blog/2020/12/18/JS/this/</url>
    
    <content type="html"><![CDATA[<p><code>this</code>关键字是<code>JavaScript</code>中最复杂的机制之一，是一个特别的关键字，被自动定义在所有函数的作用域中，但是相信很多<code>JavaScript</code>开发者并不是非常清楚它究竟指向的是什么。听说你很懂<code>this</code>,是真的吗？</p><p>再看一道题，控制台打印出来的值是什么？【浏览器运行环境】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> number = <span class="hljs-number">5</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">number</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-attr">fn1</span>: (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> number<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span> *= <span class="hljs-number">2</span><br>    number = number * <span class="hljs-number">2</span><br>    number = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">var</span> num = <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span> *= <span class="hljs-number">2</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<br>      number *= <span class="hljs-number">3</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number)<br>    &#125;<br>  &#125;)(),<br>&#125;<br><span class="hljs-keyword">var</span> fn1 = obj.<span class="hljs-property">fn1</span><br>fn1.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>)<br>obj.<span class="hljs-title function_">fn1</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">number</span>)<br></code></pre></td></tr></table></figure><p>如果你思考出来的结果，与在浏览中执行结果相同，并且每一步的依据都非常清楚，那么，你可以选择继续往下阅读，或者关闭本网页，愉快得去玩耍。如果你有一部分是靠蒙的，或者对自己的答案并不那么确定，那么请继续往下阅读。</p><p>毕竟花一两个小时的时间，把<code>this</code>彻底搞明白，是一件很值得事情，不是吗？</p><p>本文将细致得讲解<code>this</code>的绑定规则，并在最后剖析前文两道题。</p><h2 id="为什么要学习-this"><a href="#为什么要学习-this" class="headerlink" title="为什么要学习 this?"></a>为什么要学习 this?</h2><p>首先，我们为什么要学习<code>this</code>？</p><ol><li><code>this</code>使用频率很高，如果我们不懂<code>this</code>，那么在看别人的代码或者是源码的时候，就会很吃力。</li><li>工作中，滥用<code>this</code>，却没明白<code>this</code>指向的是什么，而导致出现问题，但是自己却不知道哪里出问题了。【在公司，我至少帮 10 个以上的开发人员处理过这个问题】</li><li>合理的使用<code>this</code>，可以让我们写出简洁且复用性高的代码。</li><li>面试的高频问题，回答不好，抱歉，出门右拐，不送。</li></ol><p>不管出于什么目的，我们都需要把<code>this</code>这个知识点整的明明白白的。</p><p>OK，Let’s go!</p><h2 id="this-是什么？"><a href="#this-是什么？" class="headerlink" title="this 是什么？"></a>this 是什么？</h2><p>言归正传，<code>this</code>是什么？首先记住<code>this</code>不是指向自身！<code>this</code>就是一个指针，指向调用函数的对象。这句话我们都知道，但是很多时候，我们未必能够准确判断出<code>this</code>究竟指向的是什么？这就好像我们听过很多道理 却依然过不好这一生。今天咱们不探讨如何过好一生的问题，但是呢，希望阅读完下面的内容之后，你能够一眼就看出<code>this</code>指向的是什么。</p><p>为了能够一眼看出<code>this</code>指向的是什么，我们首先需要知道<code>this</code>的绑定规则有哪些？</p><ol><li>默认绑定</li><li>隐式绑定</li><li>硬绑定</li><li>new 绑定</li></ol><p>上面的名词，你也许听过，也许没听过，但是今天之后，请牢牢记住。我们将依次来进行解析。</p><h3 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h3><p>默认绑定，在不能应用其它绑定规则时使用的默认规则，通常是独立函数调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello,&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;YvetteLau&#x27;</span><br><span class="hljs-title function_">sayHi</span>()<br></code></pre></td></tr></table></figure><p>在调用<code>Hi()</code>时，应用了默认绑定，<code>this</code>指向全局对象（非严格模式下），严格模式下，<code>this</code>指向<code>undefined</code>，<code>undefined</code>上没有<code>this</code>对象，会抛出错误。</p><p>上面的代码，如果在浏览器环境中运行，那么结果就是 <code>Hello,YvetteLau</code></p><p>但是如果在<code>node</code>环境中运行，结果就是 <code>Hello,undefined</code>.这是因为<code>node</code>中<code>name</code>并不是挂在全局对象上的。</p><p>本文中，如不特殊说明，默认为浏览器环境执行结果。</p><h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><p>函数的调用是在某个对象上触发的，即调用位置上存在上下文对象。典型的形式为<code>XXX.fun()</code>.我们来看一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello,&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;YvetteLau&#x27;</span>,<br>  <span class="hljs-attr">sayHi</span>: sayHi,<br>&#125;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Wiliam&#x27;</span><br>person.<span class="hljs-title function_">sayHi</span>()<br></code></pre></td></tr></table></figure><p>打印的结果是 <code>Hello,YvetteLau.</code></p><p><code>sayHi</code>函数声明在外部，严格来说并不属于<code>person</code>，但是在调用<code>sayHi</code>时,调用位置会使用<code>person</code>的上下文来引用函数，隐式绑定会把函数调用中的<code>this</code>(即此例<code>sayHi</code>函数中的<code>this</code>)绑定到这个上下文对象（即此例中的<code>person</code>）</p><p>需要注意的是：对象属性链中只有最后一层会影响到调用位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello,&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">var</span> person2 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Christina&#x27;</span>,<br>  <span class="hljs-attr">sayHi</span>: sayHi,<br>&#125;<br><span class="hljs-keyword">var</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;YvetteLau&#x27;</span>,<br>  <span class="hljs-attr">friend</span>: person2,<br>&#125;<br>person1.<span class="hljs-property">friend</span>.<span class="hljs-title function_">sayHi</span>()<br></code></pre></td></tr></table></figure><p>结果是：<code>Hello, Christina.</code></p><p>因为只有最后一层会确定<code>this</code>指向的是什么，不管有多少层，在判断<code>this</code>的时候，我们只关注最后一层，即此处的<code>friend</code>。</p><p>隐式绑定有一个大陷阱，绑定很容易丢失(或者说容易给我们造成误导，我们以为<code>this</code>指向的是什么，但是实际上并非如此).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello,&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;YvetteLau&#x27;</span>,<br>  <span class="hljs-attr">sayHi</span>: sayHi,<br>&#125;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Wiliam&#x27;</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Hi</span> = person.<span class="hljs-property">sayHi</span><br><span class="hljs-title class_">Hi</span>()<br></code></pre></td></tr></table></figure><p>结果是: <code>Hello,Wiliam.</code></p><p>这是为什么呢，<code>Hi</code>直接指向了<code>sayHi</code>的引用，在调用的时候，跟<code>person</code>没有半毛钱的关系，针对此类问题，我建议大家只需牢牢继续这个格式:<code>XXX.fn()</code>;<code>fn()</code>前如果什么都没有，那么肯定不是隐式绑定，但是也不一定就是默认绑定，这里有点小疑问，我们后来会说到。</p><p>除了上面这种丢失之外，隐式绑定的丢失是发生在回调函数中(事件回调也是其中一种)，我们来看下面一个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello,&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">var</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;YvetteLau&#x27;</span>,<br>  <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello,&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>    &#125;)<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">var</span> person2 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Christina&#x27;</span>,<br>  <span class="hljs-attr">sayHi</span>: sayHi,<br>&#125;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Wiliam&#x27;</span><br>person1.<span class="hljs-title function_">sayHi</span>()<br><span class="hljs-built_in">setTimeout</span>(person2.<span class="hljs-property">sayHi</span>, <span class="hljs-number">100</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  person2.<span class="hljs-title function_">sayHi</span>()<br>&#125;, <span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><p>结果为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Hello</span>, <span class="hljs-title class_">Wiliam</span><br><span class="hljs-title class_">Hello</span>, <span class="hljs-title class_">Wiliam</span><br><span class="hljs-title class_">Hello</span>, <span class="hljs-title class_">Christina</span><br></code></pre></td></tr></table></figure><ul><li><p>第一条输出很容易理解，<code>setTimeout</code>的回调函数中，<code>this</code>使用的是默认绑定，非严格模式下，执行的是全局对象</p></li><li><p>第二条输出是不是有点迷惑了？说好<code>XXX.fun()</code>的时候，fun 中的<code>this</code>指向的是 XXX 呢，为什么这次却不是这样了！Why?</p><p>其实这里我们可以这样理解:<code>setTimeout(fn,delay)&#123; fn(); &#125;</code>,相当于是将<code>person2.sayHi</code>赋值给了一个变量，最后执行了变量，这个时候，<code>sayHi</code>中的<code>this</code>显然和<code>person2</code>就没有关系了。</p></li><li><p>第三条虽然也是在<code>setTimeout</code>的回调中，但是我们可以看出，这是执行的是<code>person2.sayHi()</code>使用的是隐式绑定，因此这是<code>this</code>指向的是<code>person2</code>，跟当前的作用域没有任何关系。</p></li></ul><p>读到这里，也许你已经有点疲倦了，但是答应我，别放弃，好吗？再坚持一下，就可以掌握这个知识点了。</p><h3 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h3><p>显式绑定比较好理解，就是通过<code>call</code>,<code>apply</code>,<code>bind</code>的方式，显式的指定<code>this</code>所指向的对象。(注意:《你不知道的 Javascript》中将 bind 单独作为了硬绑定讲解了)</p><p><code>call</code>,<code>apply</code>和<code>bind</code>的第一个参数，就是对应函数的<code>this</code>所指向的对象。<code>call</code>和<code>apply</code>的作用一样，只是传参方式不同。<code>call</code>和<code>apply</code>都会执行对应的函数，而<code>bind</code>方法不会。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello,&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;YvetteLau&#x27;</span>,<br>  <span class="hljs-attr">sayHi</span>: sayHi,<br>&#125;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Wiliam&#x27;</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Hi</span> = person.<span class="hljs-property">sayHi</span><br><span class="hljs-title class_">Hi</span>.<span class="hljs-title function_">call</span>(person) <span class="hljs-comment">//Hi.apply(person)</span><br></code></pre></td></tr></table></figure><p>输出的结果为: <code>Hello, YvetteLau</code>. 因为使用硬绑定明确将<code>this</code>绑定在了<code>person</code>上。</p><p>那么，使用了硬绑定，是不是意味着不会出现隐式绑定所遇到的绑定丢失呢？显然不是这样的，不信，继续往下看。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello,&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;YvetteLau&#x27;</span>,<br>  <span class="hljs-attr">sayHi</span>: sayHi,<br>&#125;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Wiliam&#x27;</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Hi</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-title function_">fn</span>()<br>&#125;<br><span class="hljs-title class_">Hi</span>.<span class="hljs-title function_">call</span>(person, person.<span class="hljs-property">sayHi</span>)<br></code></pre></td></tr></table></figure><p>输出的结果是 <code>Hello, Wiliam</code>. 原因很简单，<code>Hi.call(person, person.sayHi)</code>的确是将<code>this</code>绑定到 Hi 中的<code>this</code>了。但是在执行 fn 的时候，相当于直接调用了<code>sayHi</code>方法(记住: person.sayHi 已经被赋值给 fn 了，隐式绑定也丢了)，没有指定<code>this</code>的值，对应的是默认绑定。</p><p>现在，我们希望绑定不会丢失，要怎么做？很简单，调用 fn 的时候，也给它硬绑定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello,&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;YvetteLau&#x27;</span>,<br>  <span class="hljs-attr">sayHi</span>: sayHi,<br>&#125;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Wiliam&#x27;</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Hi</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) &#123;<br>  fn.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><span class="hljs-title class_">Hi</span>.<span class="hljs-title function_">call</span>(person, person.<span class="hljs-property">sayHi</span>)<br></code></pre></td></tr></table></figure><p>此时，输出的结果为:<code>Hello, YvetteLau</code>，因为<code>person</code>被绑定到 Hi 函数中的<code>this</code>上，fn 又将这个对象绑定给了<code>sayHi</code>的函数。这时，<code>sayHi</code>中的<code>this</code>指向的就是<code>person</code>对象。</p><p>至此，革命已经快胜利了，我们来看最后一种绑定规则: <code>new</code>绑定。</p><h3 id="new-绑定"><a href="#new-绑定" class="headerlink" title="new 绑定"></a>new 绑定</h3><p><code>javaScript</code>和<code>Ｃ＋＋</code>不一样，并没有类，在<code>javaScript</code>中，构造函数只是使用<code>new</code>操作符时被调用的函数，这些函数和普通的函数并没有什么不同，它不属于某个类，也不可能实例化出一个类。任何一个函数都可以使用<code>new</code>来调用，因此其实并不存在构造函数，而只有对于函数的“构造调用”。</p><blockquote><p>使用 new 来调用函数，会自动执行下面的操作：</p></blockquote><ol><li>创建一个新对象</li><li>将构造函数的作用域赋值给新对象，即 this 指向这个新对象</li><li>执行构造函数中的代码</li><li>返回新对象</li></ol><p>因此，我们使用<code>new</code>来调用函数的时候，就会新对象绑定到这个函数的<code>this</code>上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Hi</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-string">&#x27;Yevtte&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello,&#x27;</span>, <span class="hljs-title class_">Hi</span>.<span class="hljs-property">name</span>)<br></code></pre></td></tr></table></figure><p>输出结果为 <code>Hello, Yevtte</code>, 原因是因为在 var Hi = new sayHi(‘Yevtte’);这一步，会将 sayHi 中的 this 绑定到 Hi 对象上。</p><h3 id="绑定优先级"><a href="#绑定优先级" class="headerlink" title="绑定优先级"></a>绑定优先级</h3><p>我们知道了<code>this</code>有四种绑定规则，但是如果同时应用了多种规则，怎么办？</p><p>显然，我们需要了解哪一种绑定方式的优先级更高，这四种绑定的优先级为:</p><p>new 绑定 &gt; 显式绑定 &gt; 隐式绑定 &gt; 默认绑定</p><p>这个规则时如何得到的，大家如果有兴趣，可以自己写个<code>demo</code>去测试，或者记住上面的结论即可。</p><h3 id="绑定例外"><a href="#绑定例外" class="headerlink" title="绑定例外"></a>绑定例外</h3><p>凡事都有例外，<code>this</code>的规则也是这样。</p><p>如果我们将<code>null</code>或者是<code>undefined</code>作为<code>this</code>的绑定对象传入<code>call</code>、<code>apply</code>或者是<code>bind</code>,这些值在调用时会被忽略，实际应用的是默认绑定规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Selina&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Chirs&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br>bar.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>) <span class="hljs-comment">//Chirs</span><br></code></pre></td></tr></table></figure><p>输出的结果是 <code>Chirs</code>，因为这时实际应用的是默认绑定规则。</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数是<code>ES6</code>中新增的，它和普通函数有一些区别，箭头函数没有自己的<code>this</code>，它的 this 继承于外层代码库中的<code>this</code>。箭头函数在使用时，需要注意以下几点:</p><p>（1）函数体内的<code>this</code>对象，继承的是外层代码块的<code>this</code>。</p><p>（2）不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。</p><p>（3）不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用 <code>rest</code>参数代替。</p><p>（4）不可以使用<code>yield</code>命令，因此箭头函数不能用作 <code>Generator</code>函数。</p><p>（5）箭头函数没有自己的<code>this</code>，所以不能用 call()、apply()、bind()这些方法去改变<code>this</code>的指向.</p><p>OK，我们来看看箭头函数的<code>this</code>是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">hi</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">say</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">let</span> hi = obj.<span class="hljs-title function_">hi</span>() <span class="hljs-comment">//输出obj对象</span><br><span class="hljs-title function_">hi</span>() <span class="hljs-comment">//输出obj对象</span><br><span class="hljs-keyword">let</span> sayHi = obj.<span class="hljs-title function_">sayHi</span>()<br><span class="hljs-keyword">let</span> fun1 = <span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">//输出window</span><br><span class="hljs-title function_">fun1</span>() <span class="hljs-comment">//输出window</span><br>obj.<span class="hljs-title function_">say</span>() <span class="hljs-comment">//输出window</span><br></code></pre></td></tr></table></figure><p>那么这是为什么呢？如果大家说箭头函数中的<code>this</code>是定义时所在的对象，这样的结果显示不是大家预期的，按照这个定义，<code>say</code>中的<code>this</code>应该是 obj 才对。</p><p>我们来分析一下上面的执行结果：</p><ol><li><code>obj.hi();</code>对应了<code>this</code>的隐式绑定规则，<code>this</code>绑定在<code>obj</code>上，所以输出<code>obj</code>，很好理解。</li><li><code>hi();</code>这一步执行的就是箭头函数，箭头函数继承上一个代码库的<code>this</code>，刚刚我们得出上一层的<code>this</code>是<code>obj</code>，显然这里的<code>this</code>就是<code>obj</code>.</li><li>执行<code>sayHi();</code>这一步也很好理解，我们前面说过这种隐式绑定丢失的情况，这个时候<code>this</code>执行的是默认绑定，<code>this</code>指向的是全局对象<code>window</code>.</li><li><code>fun1();</code> 这一步执行的是箭头函数，如果按照之前的理解，<code>this</code>指向的是箭头函数定义时所在的对象，那么这儿显然是说不通。OK，按照箭头函数的<code>this</code>是继承于外层代码库的<code>this</code>就很好理解了。外层代码库我们刚刚分析了，<code>this</code>指向的是<code>window</code>，因此这儿的输出结果是<code>window</code>.</li><li><code>obj.say();</code> 执行的是箭头函数，当前的代码块<code>obj</code>中是不存在<code>this</code>的，只能往上找，就找到了全局的<code>this</code>，指向的是<code>window</code>.</li></ol><h3 id="你说箭头函数的-this-是静态的？"><a href="#你说箭头函数的-this-是静态的？" class="headerlink" title="你说箭头函数的 this 是静态的？"></a>你说箭头函数的 this 是静态的？</h3><p>依旧是前面的代码。我们来看看箭头函数中的<code>this</code>真的是静态的吗？</p><p><strong>我要说：非也</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">hi</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">say</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">let</span> sayHi = obj.<span class="hljs-title function_">sayHi</span>()<br><span class="hljs-keyword">let</span> fun1 = <span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">//输出window</span><br><span class="hljs-title function_">fun1</span>() <span class="hljs-comment">//输出window</span><br><br><span class="hljs-keyword">let</span> fun2 = sayHi.<span class="hljs-title function_">bind</span>(obj)() <span class="hljs-comment">//输出obj</span><br><span class="hljs-title function_">fun2</span>() <span class="hljs-comment">//输出obj</span><br></code></pre></td></tr></table></figure><p>可以看出，<code>fun1</code>和<code>fun2</code>对应的是同样的箭头函数，但是<code>this</code>的输出结果是不一样的。</p><p>所以，请大家牢牢记住一点: 箭头函数没有自己的<code>this</code>，箭头函数中的<code>this</code>继承于外层代码库中的<code>this</code>.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于<code>this</code>的规则，至此，就告一段落了，但是想要一眼就能看出<code>this</code>所绑定的对象，还需要不断的训练。</p><p>我们来回顾一下，最初的问题。</p><blockquote><h4 id="1-如何准确判断-this-指向的是什么？"><a href="#1-如何准确判断-this-指向的是什么？" class="headerlink" title="1. 如何准确判断 this 指向的是什么？"></a>1. 如何准确判断 this 指向的是什么？</h4></blockquote><ol><li>函数是否在<code>new</code>中调用(<code>new</code>绑定)，如果是，那么<code>this</code>绑定的是新创建的对象。</li><li>函数是否通过<code>call</code>,<code>apply</code>调用，或者使用了<code>bind</code>(即硬绑定)，如果是，那么<code>this</code>绑定的就是指定的对象。</li><li>函数是否在某个上下文对象中调用(隐式绑定)，如果是的话，<code>this</code>绑定的是那个上下文对象。一般是<code>obj.foo()</code></li><li>如果以上都不是，那么使用默认绑定。如果在严格模式下，则绑定到<code>undefined</code>，否则绑定到全局对象。</li><li>如果把 Null 或者<code>undefined</code>作为<code>this</code>的绑定对象传入<code>call</code>、<code>apply</code>或者<code>bind</code>，这些值在调用时会被忽略，实际应用的是默认绑定规则。</li><li>如果是箭头函数，箭头函数的<code>this</code>继承的是外层代码块的<code>this</code>。</li></ol><blockquote><h4 id="2-执行过程解析"><a href="#2-执行过程解析" class="headerlink" title="2. 执行过程解析"></a>2. 执行过程解析</h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> number = <span class="hljs-number">5</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">number</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-attr">fn</span>: (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> number<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span> *= <span class="hljs-number">2</span><br>    number = number * <span class="hljs-number">2</span><br>    number = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">var</span> num = <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span> *= <span class="hljs-number">2</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<br>      number *= <span class="hljs-number">3</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number)<br>    &#125;<br>  &#125;)(),<br>&#125;<br><span class="hljs-keyword">var</span> myFun = obj.<span class="hljs-property">fn</span><br>myFun.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>)<br>obj.<span class="hljs-title function_">fn</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">number</span>)<br></code></pre></td></tr></table></figure><p>我们来分析一下，这段代码的执行过程。</p><ol><li>在定义 obj 的时候，fn 对应的闭包就执行了，返回其中的函数，执行闭包中代码时，显然应用不了 new 绑定(没有出现 new 关键字)，硬绑定也没有(没有出现 call,apply,bind 关键字),隐式绑定有没有？很显然没有，如果没有 XX.fn()，那么可以肯定没有应用隐式绑定，所以这里应用的就是默认绑定了，非严格模式下 this 绑定到了 window 上(浏览器执行环境)。【这里很容易被迷惑的就是以为 this 指向的是 obj，一定要注意，除非是箭头函数，否则 this 跟词法作用域是两回事，一定要牢记在心】</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">number</span> * = <span class="hljs-number">2</span>; <span class="hljs-comment">//window.number的值是10(var number定义的全局变量是挂在window上的)</span><br><br>number = number * <span class="hljs-number">2</span>; <span class="hljs-comment">//number的值是NaN;注意我们这边定义了一个number，但是没有赋值，number的值是undefined;Number(undefined)-&gt;NaN</span><br><br>number = <span class="hljs-number">3</span>;  <span class="hljs-comment">//number的值为3</span><br></code></pre></td></tr></table></figure><ol><li>myFun.call(null);我们前面说了，call 的第一个参数传 null，调用的是默认绑定;</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">fn</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span> *= <span class="hljs-number">2</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>    number *= <span class="hljs-number">3</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行时:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span>; <span class="hljs-comment">//num=10; 此时this指向的是window</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span> * = <span class="hljs-number">2</span>;  <span class="hljs-comment">//window.number = 20</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);  <span class="hljs-comment">//输出结果为10</span><br>number *= <span class="hljs-number">3</span>;  <span class="hljs-comment">//number=9; 这个number对应的闭包中的number;闭包中的number的是3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number);  <span class="hljs-comment">//输出的结果是9</span><br></code></pre></td></tr></table></figure><ol><li>obj.fn();应用了隐式绑定，fn 中的<code>this</code>对应的是<code>obj</code>.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span> <span class="hljs-comment">//num = 3;此时this指向的是obj</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span> *= <span class="hljs-number">2</span> <span class="hljs-comment">//obj.number = 6;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num) <span class="hljs-comment">//输出结果为3;</span><br>number *= <span class="hljs-number">3</span> <span class="hljs-comment">//number=27;这个number对应的闭包中的number;闭包中的number的此时是9</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number) <span class="hljs-comment">//输出的结果是27</span><br></code></pre></td></tr></table></figure><ol><li>最后一步 console.log(window.number);输出的结果是 20</li></ol><p>因此组中结果为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">10</span><br><span class="hljs-number">9</span><br><span class="hljs-number">3</span><br><span class="hljs-number">27</span><br><span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>严格模式下结果，大家根据今天所学，自己分析，巩固一下知识点。</p><p>最后，恭喜坚持读完的小伙伴们，你们成功 get 到了<code>this</code>这个知识点，但是想要完全掌握，还是要多回顾和练习。如果你有不错的<code>this</code>练习题，欢迎在评论区留言哦，大家一起进步！</p><p>本文转载于 <a href="https://juejin.cn/post/6844903805587619854">嗨，你真的懂 this 吗？</a></p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="/blog/2020/12/18/other/markdown/"/>
    <url>/blog/2020/12/18/other/markdown/</url>
    
    <content type="html"><![CDATA[<p><code>Markdown</code>是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>相比<code>WYSIWYG</code>编辑器</p><p><strong>优点：</strong><br>1、因为是纯文本，所以只要支持<code>Markdown</code>的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>2、操作简单。比如:<code>WYSIWYG</code>编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而<code>Markdown</code>只需要在标题内容前加<code>#</code>即可</p><p><strong>缺点：</strong><br>1、需要记一些语法（当然，是很简单。五分钟学会）。<br>2、有些平台不支持<code>Markdown</code>编辑模式。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">开启方式：设置-&gt;默认编辑器-&gt;Markdown编辑器<br></code></pre></td></tr></table></figure><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>在想要设置为标题的文字前面加<code>#</code>来表示<br>一个<code>#</code>是一级标题，二个<code>#</code>是二级标题，以此类推。支持六级标题。</p><p>注：标准语法一般在<code>#</code>后跟个空格再写文字。</p><p>示例：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 这是一级标题<br>## 这是二级标题<br>### 这是三级标题<br>#### 这是四级标题<br>##### 这是五级标题<br>###### 这是六级标题<br></code></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr><h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul><li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5></li></ul><p>要加粗的文字左右分别用两个<code>*</code>号包起来</p><ul><li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5></li></ul><p>要倾斜的文字左右分别用一个<code>*</code>号包起来</p><ul><li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5></li></ul><p>要倾斜和加粗的文字左右分别用三个<code>*</code>号包起来</p><ul><li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5></li></ul><p>要加删除线的文字左右分别用两个<code>~~</code>号包起来</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**这是加粗的文字**</span><br><span class="hljs-emphasis">*这是倾斜的文字*</span>`<br><span class="hljs-strong">**<span class="hljs-emphasis">*这是斜体加粗的文字*</span>**</span><br>~~这是加删除线的文字~~<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong>*这是斜体加粗的文字*</strong><br><del>这是加删除线的文字</del></p><hr><h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加<code>&gt;</code>即可。引用也可以嵌套，如加两个<code>&gt;&gt;</code>三个<code>&gt;&gt;&gt;</code><br>n 个…<br>貌似可以一直加下去，但没神马卵用</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">这是引用的内容</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;这是引用的内容</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>三个或者三个以上的 <code>-</code> 或者 <code>*</code> 都可以。</p><p>示例：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">---</span><br><span class="hljs-section">----</span><br><span class="hljs-bullet">***</span><br><span class="hljs-bullet"></span><span class="hljs-strong">*****</span><br></code></pre></td></tr></table></figure><p>效果如下：<br>可以看到，显示效果是一样的。</p><hr><hr><hr><hr><h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">![图片alt](图片地址 <span class="hljs-string">&#x27;&#x27;</span>图片titl<span class="hljs-string">e&#x27;&#x27;</span>)<br><br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">!<span class="hljs-selector-attr">[blockchain]</span>(img/<span class="hljs-number">1</span><span class="hljs-selector-class">.jpg</span> <span class="hljs-string">&quot;测试&quot;</span>)<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="http://fang-kang.gitee.io/blog-img/banner.png" alt="img"></p><p>blockchain</p><p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p><p><code>markdown</code>格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。</p><h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos">[超链接名](超链接地址 &quot;超链接<span class="hljs-built_in">title</span>&quot;)<br><span class="hljs-built_in">title</span>可加可不加<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[简书]</span>(<span class="hljs-attribute">http</span>:<span class="hljs-comment">//jianshu.com)</span><br>[百度](<span class="hljs-attribute">http</span>:<span class="hljs-comment">//baidu.com)</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><a href="https://www.jianshu.com/">简书</a><br><a href="https://www.baidu.com/">百度</a></p><p>注：<code>Markdown</code>本身语法不支持链接在新页面中打开。如果想要在新页面中打开的话可以用<code>html</code>语言的<code>a</code>标签代替。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;超链接地址&quot;</span> <span class="hljs-attribute">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;超链接名&lt;/a&gt;<br><br>示例<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://www.jianshu.com&quot;</span> <span class="hljs-attribute">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;简书&lt;/a&gt;<br></code></pre></td></tr></table></figure><hr><h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><p>语法：<br>无序列表用 <code>-</code> <code>+</code> <code>*</code> 任何一种都可以</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 列表内容<br><span class="hljs-bullet">+</span> 列表内容<br><span class="hljs-bullet">*</span> 列表内容<br><br>注意：- + * 跟内容之间都要有一个空格<br></code></pre></td></tr></table></figure><p>效果如下：</p><ul><li>列表内容</li><li>列表内容</li><li>列表内容</li></ul><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><p>语法：<br>数字加点</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 列表内容<br><span class="hljs-bullet">2.</span> 列表内容<br><span class="hljs-bullet">3.</span> 列表内容<br><br>注意：序号跟内容之间要有空格<br></code></pre></td></tr></table></figure><p>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><p><strong>上一级和下一级之间敲三个空格即可</strong></p><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级无序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li>一级有序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级有序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ol><hr><h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">表头|<span class="hljs-string">表头</span>|<span class="hljs-string">表头</span><br><span class="hljs-string">---</span>|<span class="hljs-string">:--:</span>|<span class="hljs-string">---:</span><br><span class="hljs-string">内容</span>|<span class="hljs-string">内容</span>|<span class="hljs-string">内容</span><br><span class="hljs-string">内容</span>|<span class="hljs-string">内容</span>|<span class="hljs-string">内容</span><br><span class="hljs-string"></span><br><span class="hljs-string">第二行分割表头和内容。</span><br><span class="hljs-string">- 有一个就行，为了对齐，多加了几个</span><br><span class="hljs-string">文字默认居左</span><br><span class="hljs-string">-两边加：表示文字居中</span><br><span class="hljs-string">-右边加：表示文字居右</span><br><span class="hljs-string">注：原生的语法两边都要用 </span>|<span class="hljs-string"> 包起来。此处省略</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">姓名|<span class="hljs-string">技能</span>|<span class="hljs-string">排行</span><br><span class="hljs-string">--</span>|<span class="hljs-string">:--:</span>|<span class="hljs-string">--:</span><br><span class="hljs-string">刘备</span>|<span class="hljs-string">哭</span>|<span class="hljs-string">大哥</span><br><span class="hljs-string">关羽</span>|<span class="hljs-string">打</span>|<span class="hljs-string">二哥</span><br><span class="hljs-string">张飞</span>|<span class="hljs-string">骂</span>|<span class="hljs-string">三弟</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：<br>单行代码：代码之间分别用一个反引号包起来</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">`代码内容`</span><br></code></pre></td></tr></table></figure><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">(```)<br>  代码...<br>  代码...<br>  代码...<br>(```)<br></code></pre></td></tr></table></figure><blockquote><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p></blockquote><p>示例：</p><p>单行代码</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">`<span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> hero;`<br></code></pre></td></tr></table></figure><p>代码块</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">(```)<br>    function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>         echo <span class="hljs-string">&quot;这是一句非常牛逼的代码&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br>(```)<br></code></pre></td></tr></table></figure><p>效果如下：</p><p>单行代码</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> hero;<br></code></pre></td></tr></table></figure><p>代码块</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>  echo <span class="hljs-string">&quot;这是一句非常牛逼的代码&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS中 reduce() 的用法</title>
    <link href="/blog/2020/12/12/JS/reduce/"/>
    <url>/blog/2020/12/12/JS/reduce/</url>
    
    <content type="html"><![CDATA[<p>过去有很长一段时间，我一直很难理解 <strong>reduce()</strong> 这个方法的具体用法，平时也很少用到它。事实上，如果你能真正了解它的话，其实在很多地方我们都可以用得上，那么今天我们就来简单聊聊 JS 中 reduce() 的用法。</p><h2 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h2><blockquote><p>arr.reduce(function(prev,cur,index,arr){<br>…<br>}, init);</p></blockquote><p>其中，<br><strong>arr</strong> 表示原数组；<br><strong>prev</strong> 表示上一次调用回调时的返回值，或者初始值 init;<br><strong>cur</strong> 表示当前正在处理的数组元素；<br><strong>index</strong> 表示当前正在处理的数组元素的索引，若提供 init 值，则索引为 0，否则索引为 1；<br><strong>init</strong> 表示初始值。</p><p>看上去是不是感觉很复杂？没关系，只是看起来而已，其实常用的参数只有两个：<strong>prev</strong> 和 <strong>cur</strong>。接下来我们跟着实例来看看具体用法吧~</p><h2 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h2><p>先提供一个原始数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p>实现以下需求的方式有很多，其中就包含使用 reduce()的求解方式，也算是实现起来比较简洁的一种吧。</p><h3 id="1-求数组项之和"><a href="#1-求数组项之和" class="headerlink" title="1. 求数组项之和"></a>1. 求数组项之和</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sum = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">prev, cur</span>) &#123;<br>  <span class="hljs-keyword">return</span> prev + cur<br>&#125;, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>由于传入了初始值 0，所以开始时 prev 的值为 0，cur 的值为数组第一项 3，相加之后返回值为 3 作为下一轮回调的 prev 值，然后再继续与下一个数组项相加，以此类推，直至完成所有数组项的和并返回。</p><h3 id="2-求数组项最大值"><a href="#2-求数组项最大值" class="headerlink" title="2. 求数组项最大值"></a>2. 求数组项最大值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> max = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">prev, cur</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(prev, cur)<br>&#125;)<br></code></pre></td></tr></table></figure><p>由于未传入初始值，所以开始时 prev 的值为数组第一项 3，cur 的值为数组第二项 9，取两值最大值后继续进入下一轮回调。</p><h3 id="3-数组去重"><a href="#3-数组去重" class="headerlink" title="3. 数组去重"></a>3. 数组去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> newArr = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">prev, cur</span>) &#123;<br>  prev.<span class="hljs-title function_">indexOf</span>(cur) === -<span class="hljs-number">1</span> &amp;&amp; prev.<span class="hljs-title function_">push</span>(cur)<br>  <span class="hljs-keyword">return</span> prev<br>&#125;, [])<br></code></pre></td></tr></table></figure><p>实现的基本原理如下：</p><blockquote><p>① 初始化一个空数组<br>② 将需要去重处理的数组中的第 1 项在<strong>初始化数组</strong>中查找，如果找不到（空数组中肯定找不到），就将该项添加到<strong>初始化数组</strong>中<br>③ 将需要去重处理的数组中的第 2 项在<strong>初始化数组</strong>中查找，如果找不到，就将该项继续添加到<strong>初始化数组</strong>中<br>④ ……<br>⑤ 将需要去重处理的数组中的第 n 项在<strong>初始化数组</strong>中查找，如果找不到，就将该项继续添加到<strong>初始化数组</strong>中<br>⑥ 将这个<strong>初始化数组</strong>返回</p></blockquote><h2 id="三、其他相关方法"><a href="#三、其他相关方法" class="headerlink" title="三、其他相关方法"></a>三、其他相关方法</h2><h3 id="1-reduceRight"><a href="#1-reduceRight" class="headerlink" title="1. reduceRight()"></a>1. reduceRight()</h3><p>该方法用法与 reduce()其实是相同的，只是遍历的顺序相反，它是从数组的最后一项开始，向前遍历到第一项。</p><h3 id="2-forEach-、map-、every-、some-和-filter"><a href="#2-forEach-、map-、every-、some-和-filter" class="headerlink" title="2. forEach()、map()、every()、some()和 filter()"></a>2. forEach()、map()、every()、some()和 filter()</h3><p>详情请戳 →<a href="http://fang-kang.gitee.io/views/JS/array.html">简述 forEach()、map()、every()、some()和 filter()的用法</a></p><h2 id="重点总结"><a href="#重点总结" class="headerlink" title="重点总结"></a>重点总结</h2><p>reduce() 是数组的<strong>归并方法</strong>，与 forEach()、map()、filter()等<strong>迭代方法</strong>一样都会对数组每一项进行遍历，但是 reduce() 可同时将前面数组项遍历产生的结果与当前遍历项进行运算，这一点是其他迭代方法无法企及的</p><h3 id="先看-w3c-语法"><a href="#先看-w3c-语法" class="headerlink" title="先看 w3c 语法"></a>先看 w3c 语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">total, currentValue, currentIndex, arr</span>), initialValue);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  total: 必需。初始值, 或者计算结束后的返回值。</span><br><span class="hljs-comment">  currentValue： 必需。当前元素。</span><br><span class="hljs-comment">  currentIndex： 可选。当前元素的索引；</span><br><span class="hljs-comment">  arr： 可选。当前元素所属的数组对象。</span><br><span class="hljs-comment">  initialValue: 可选。传递给函数的初始值，相当于total的初始值。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h3><h4 id="数组求和"><a href="#数组求和" class="headerlink" title="数组求和"></a>数组求和</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">34</span>, <span class="hljs-number">23</span>];<br><span class="hljs-keyword">const</span> sum = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">total, num</span>) =&gt;</span> total + num);<br>&lt;!-- 设定初始值求和 --&gt;<br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">34</span>, <span class="hljs-number">23</span>];<br><span class="hljs-keyword">const</span> sum = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">total, num</span>) =&gt;</span> total + num, <span class="hljs-number">10</span>);  <span class="hljs-comment">// 以10为初始值求和</span><br>&lt;!-- 对象数组求和 --&gt;<br><span class="hljs-keyword">var</span> result = [<br>  &#123; <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;math&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">88</span> &#125;,<br>  &#123; <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;chinese&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">95</span> &#125;,<br>  &#123; <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;english&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">80</span> &#125;<br>];<br><span class="hljs-keyword">const</span> sum = result.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">accumulator, cur</span>) =&gt;</span> accumulator + cur.<span class="hljs-property">score</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">const</span> sum = result.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">accumulator, cur</span>) =&gt;</span> accumulator + cur.<span class="hljs-property">score</span>, -<span class="hljs-number">10</span>);  <span class="hljs-comment">// 总分扣除10分</span><br></code></pre></td></tr></table></figure><h4 id="数组最大值"><a href="#数组最大值" class="headerlink" title="数组最大值"></a>数组最大值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = [<span class="hljs-number">23</span>, <span class="hljs-number">123</span>, <span class="hljs-number">342</span>, <span class="hljs-number">12</span>]<br><span class="hljs-keyword">const</span> max = a.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">pre, cur, inde, arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> pre &gt; cur ? pre : cur<br>&#125;) <span class="hljs-comment">// 342</span><br></code></pre></td></tr></table></figure><h3 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h3><h4 id="数组对象中的用法"><a href="#数组对象中的用法" class="headerlink" title="数组对象中的用法"></a>数组对象中的用法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 比如生成“老大、老二和老三” --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> objArr = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;老大&#x27;</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;老二&#x27;</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;老三&#x27;</span> &#125;]<br><span class="hljs-keyword">const</span> res = objArr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre, cur, index, arr</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (index === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> cur.<span class="hljs-property">name</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index === arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> pre + <span class="hljs-string">&#x27;和&#x27;</span> + cur.<span class="hljs-property">name</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> pre + <span class="hljs-string">&#x27;、&#x27;</span> + cur.<span class="hljs-property">name</span><br>  &#125;<br>&#125;, <span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="求字符串中字母出现的次数"><a href="#求字符串中字母出现的次数" class="headerlink" title="求字符串中字母出现的次数"></a>求字符串中字母出现的次数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;sfhjasfjgfasjuwqrqadqeiqsajsdaiwqdaklldflas-cmxzmnha&#x27;</span><br><span class="hljs-keyword">const</span> res = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">accumulator, cur</span>) =&gt;</span> &#123;<br>  accumulator[cur] ? accumulator[cur]++ : (accumulator[cur] = <span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">return</span> accumulator<br>&#125;, &#123;&#125;)<br></code></pre></td></tr></table></figure><h4 id="数组转数组"><a href="#数组转数组" class="headerlink" title="数组转数组"></a>数组转数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- 按照一定的规则转成数组 --&gt;<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]; <span class="hljs-comment">// 每个值的平方</span><br><span class="hljs-keyword">var</span> newarr = arr1.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">accumulator, cur</span>) =&gt;</span> &#123;accumulator.<span class="hljs-title function_">push</span>(cur * cur); <span class="hljs-keyword">return</span> accumulator;&#125;, []);<br></code></pre></td></tr></table></figure><h4 id="数组转对象"><a href="#数组转对象" class="headerlink" title="数组转对象"></a>数组转对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- 按照id 取出stream --&gt;<br><span class="hljs-keyword">var</span> streams = [&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;技术&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;设计&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>&#125;];<br><span class="hljs-keyword">var</span> obj = streams.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">accumulator, cur</span>) =&gt;</span> &#123;accumulator[cur.<span class="hljs-property">id</span>] = cur; <span class="hljs-keyword">return</span> accumulator;&#125;, &#123;&#125;);<br></code></pre></td></tr></table></figure><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><h4 id="多维的叠加执行操作"><a href="#多维的叠加执行操作" class="headerlink" title="多维的叠加执行操作"></a>多维的叠加执行操作</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 各科成绩占比重不一样， 求结果 --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> result = [<br>  &#123; <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;math&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">88</span> &#125;,<br>  &#123; <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;chinese&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">95</span> &#125;,<br>  &#123; <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;english&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">80</span> &#125;,<br>]<br><span class="hljs-keyword">var</span> dis = &#123;<br>  <span class="hljs-attr">math</span>: <span class="hljs-number">0.5</span>,<br>  <span class="hljs-attr">chinese</span>: <span class="hljs-number">0.3</span>,<br>  <span class="hljs-attr">english</span>: <span class="hljs-number">0.2</span>,<br>&#125;<br><span class="hljs-keyword">var</span> res = result.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">accumulator, cur</span>) =&gt;</span> dis[cur.<span class="hljs-property">subject</span>] * cur.<span class="hljs-property">score</span> + accumulator, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 加大难度， 商品对应不同国家汇率不同，求总价格 --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> prices = [&#123; <span class="hljs-attr">price</span>: <span class="hljs-number">23</span> &#125;, &#123; <span class="hljs-attr">price</span>: <span class="hljs-number">45</span> &#125;, &#123; <span class="hljs-attr">price</span>: <span class="hljs-number">56</span> &#125;]<br><span class="hljs-keyword">var</span> rates = &#123;<br>  <span class="hljs-attr">us</span>: <span class="hljs-string">&#x27;6.5&#x27;</span>,<br>  <span class="hljs-attr">eu</span>: <span class="hljs-string">&#x27;7.5&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">var</span> initialState = &#123; <span class="hljs-attr">usTotal</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">euTotal</span>: <span class="hljs-number">0</span> &#125;<br><span class="hljs-keyword">var</span> res = prices.<span class="hljs-title function_">reduce</span>(<br>  <span class="hljs-function">(<span class="hljs-params">accumulator, cur1</span>) =&gt;</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(rates).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev2, cur2</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(accumulator, cur1, prev2, cur2)<br>      accumulator[<span class="hljs-string">`<span class="hljs-subst">$&#123;cur2&#125;</span>Total`</span>] += cur1.<span class="hljs-property">price</span> * rates[cur2]<br>      <span class="hljs-keyword">return</span> accumulator<br>    &#125;, &#123;&#125;),<br>  initialState<br>)<br><br><span class="hljs-keyword">var</span> manageReducers = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">state, item</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(rates).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">nextState, key</span>) =&gt;</span> &#123;<br>      state[<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>Total`</span>] += item.<span class="hljs-property">price</span> * rates[key]<br>      <span class="hljs-keyword">return</span> state<br>    &#125;, &#123;&#125;)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> res1 = prices.<span class="hljs-title function_">reduce</span>(<span class="hljs-title function_">manageReducers</span>(), initialState)<br></code></pre></td></tr></table></figure><h4 id="扁平一个二维数组"><a href="#扁平一个二维数组" class="headerlink" title="扁平一个二维数组"></a>扁平一个二维数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<br>  [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>],<br>  [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>],<br>  [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>],<br>]<br><span class="hljs-keyword">var</span> res = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x.<span class="hljs-title function_">concat</span>(y), [])<br></code></pre></td></tr></table></figure><h4 id="对象数组去重"><a href="#对象数组去重" class="headerlink" title="对象数组去重"></a>对象数组去重</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> hash = &#123;&#125;<br>chatlists = chatlists.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">obj, next: <span class="hljs-built_in">Object</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> hashId = <span class="hljs-string">`<span class="hljs-subst">$&#123;next.topic&#125;</span>_<span class="hljs-subst">$&#123;next.stream_id&#125;</span>`</span><br>  <span class="hljs-keyword">if</span> (!hash[hashId]) &#123;<br>    hash[<span class="hljs-string">`<span class="hljs-subst">$&#123;next.topic&#125;</span>_<span class="hljs-subst">$&#123;next.stream_id&#125;</span>`</span>] = <span class="hljs-literal">true</span><br>    obj.<span class="hljs-title function_">push</span>(next)<br>  &#125;<br>  <span class="hljs-keyword">return</span> obj<br>&#125;, [])<br></code></pre></td></tr></table></figure><h4 id="compose-函数"><a href="#compose-函数" class="headerlink" title="compose 函数"></a>compose 函数</h4><blockquote><p>redux compose 源码实现</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">compose</span>(<span class="hljs-params">...funs</span>) &#123;<br>  <span class="hljs-keyword">if</span> (funs.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">arg</span> =&gt;</span> arg<br>  &#125;<br>  <span class="hljs-keyword">if</span> (funs.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> funs[<span class="hljs-number">0</span>]<br>  &#125;<br>  <span class="hljs-keyword">return</span> funs.<span class="hljs-title function_">reduce</span>(<br>    <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span><br>      <span class="hljs-function">(<span class="hljs-params">...arg</span>) =&gt;</span><br>        <span class="hljs-title function_">a</span>(<span class="hljs-title function_">b</span>(...arg))<br>  )<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongodb基本查询</title>
    <link href="/blog/2020/12/12/mongodb/mongodb_base/"/>
    <url>/blog/2020/12/12/mongodb/mongodb_base/</url>
    
    <content type="html"><![CDATA[<h2 id="db-collection-find-查询数据"><a href="#db-collection-find-查询数据" class="headerlink" title="db.collection.find()查询数据"></a>db.collection.find()查询数据</h2><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><code>db.collection.find(querys, fields, options)</code></p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ol><li><p>querys: 可选，使用查询操作符指定查询条件;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-property">Article</span>.<span class="hljs-title function_">find</span>(&#123; <span class="hljs-attr">article_state</span>: <span class="hljs-string">&#x27;1&#x27;</span> &#125;) <span class="hljs-comment">//查询Article中所有article_state值为1的数据</span><br></code></pre></td></tr></table></figure></li></ol><p>其中，可以添加各种查询操作符，如:<code>$or</code>,<code>$in</code>,<code>$not</code>等</p><ol><li><p>fields: 指定使用投影运算符返回的字段，省略此参数返回匹配文档中的所有字段;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br><span class="hljs-attr">field1</span>: , <span class="hljs-comment">//1或者true表示返回字段,0或者false表示不返回该字段</span><br><span class="hljs-attr">field2</span>:<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>_id:默认是 1，没指定返回该字段时默认会返回，设置为 0 时才不会返回。<br>注意:投影里除了_id 以外，要么全是 1，要么全是 0，否则会报错</p><ol><li>options: 指定<code>sort</code>，<code>skip</code>，<code>limit</code>等条件;</li></ol><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> querys = &#123;&#125;<br><span class="hljs-keyword">let</span> fields = &#123;<br>  <span class="hljs-comment">//设置fields，表示返回除了article_content之外的所有字段内容</span><br>  <span class="hljs-attr">article_content</span>: <span class="hljs-literal">false</span>,<br>&#125;<br><span class="hljs-keyword">if</span> (keyword != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>  <span class="hljs-keyword">let</span> keywordReg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(keyword)<br>  querys.<span class="hljs-property">$or</span> = [<br>    <span class="hljs-comment">//$or条件查询</span><br>    &#123; <span class="hljs-attr">article_title</span>: keywordReg &#125;,<br>    &#123; <span class="hljs-attr">article_content</span>: keywordReg &#125;,<br>    &#123; <span class="hljs-attr">article_desc</span>: keywordReg &#125;,<br>  ]<br>&#125;<br><span class="hljs-keyword">if</span> (tag != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>  querys.<span class="hljs-property">article_tags</span> = &#123; <span class="hljs-attr">$in</span>: [tag] &#125; <span class="hljs-comment">//$in条件查询</span><br>&#125;<br><span class="hljs-keyword">if</span> (state != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>  querys.<span class="hljs-property">article_state</span> = state<br>&#125;<br><span class="hljs-keyword">let</span> options = &#123;<br>  <span class="hljs-attr">sort</span>: &#123; <span class="hljs-attr">article_update_time</span>: <span class="hljs-string">&#x27;-1&#x27;</span> &#125;, <span class="hljs-comment">//表示按article_update_time倒序查询</span><br>  <span class="hljs-attr">skip</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//跳过0条数据</span><br>  <span class="hljs-attr">limit</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">//每次查询5条数据</span><br>&#125;<br><span class="hljs-keyword">let</span> res = <span class="hljs-title class_">Article</span>.<span class="hljs-title function_">find</span>(&#123; querys, fields, options &#125;)<br></code></pre></td></tr></table></figure><hr><h2 id="in-or-all-查询"><a href="#in-or-all-查询" class="headerlink" title="$in $or $all 查询"></a>$in $or $all 查询</h2><ol><li><code>$in</code>:满足其中一个元素的数据<br><code>db.user.find(&#123;age: &#123;$in:[13,73]&#125;&#125;)</code><br>查询到<code>age</code>为 13 或者 73 的数据<br><code>db.user.find(&#123;age: &#123;$in:[13,73]&#125;&#125;)</code><br>查询到<code>age</code>既不是 13 也不是 73 的数据</li><li><code>$or</code>:满足其中一个字段的元素数据<br><code>db.user.find(&#123;$or:[&#123;age:11&#125;,&#123;name:&#39;xttt&#39;&#125;]&#125; )</code><br>查询到<code>age</code>为 11 或者<code>name</code>为 xttt 的数据</li><li>几个比较的查询<ul><li>$gt:&gt;</li><li>$gte:&gt;=</li><li>$lt:&lt;</li><li>$lte:&lt;=</li><li>$ne:!=<br><code>db.user.find(&#123;age:&#123;$lt:100&#125;&#125;)</code> //查询到 age&lt;100 的数据</li></ul></li><li><code>$not</code>:与特定模式不匹配的文档,与正则表达式联合使用时极为有效<br><code>db.inventory.find( &#123; price: &#123; $not: &#123; $gt: 1.99 &#125; &#125; &#125; )</code><br>查询条件如下：<code>price</code>字段小于等于 1.99 或者<code>price</code>不存在。</li><li><code>$all</code>:满足所有元素的数据<br><code>db.user.find(&#123;hobby:&#123;$all:[&quot;足球&quot;,&quot;桌球&quot;]&#125; &#125;)</code><br>查询到<code>hobby</code>中既有足球也有桌球的数据</li><li><code>$mod</code>:将查询的值除以第一个给定的值，若余数等于第二个给定的值，则返回该结果<br><code>db.user.find(&#123;age:&#123;$mod:[11,0]&#125;&#125;)</code><br>查询到<code>age</code>是整除 11 的值得数据</li><li><code>and</code>:查询指定同一个字段的多个查询条件<br><code>db.inventory.find( &#123; $and: [ &#123; price: &#123; $ne: 1.99 &#125; &#125;, &#123; price: &#123; $exists: true &#125; &#125; ] &#125; )</code><br>查询条件是<code>price</code>不等于 1.99 并且<code>price</code>字段存在；</li></ol><hr><h2 id="populate-查询"><a href="#populate-查询" class="headerlink" title=".populate()查询"></a>.populate()查询</h2><p>因为 MongoDB 是文档型数据库，所以它没有关系型数据库(数据库的两张表通过”外键”，建立连接关系) 特性。也就是在建立数据的关联时会比较麻烦。为了解决这个问题，Mongoose 封装了一个 Population 功能。使用 Population 可以实现在一个 document 中填充其他 collection(s) 的 document(s)。</p><p>建表，schema 如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>)<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Schema</span> = mongoose.<span class="hljs-property">Schema</span><br><br><span class="hljs-comment">// 文章表</span><br><span class="hljs-keyword">let</span> articleSchema = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>  <span class="hljs-attr">article_title</span>: <span class="hljs-title class_">String</span>,<br>  <span class="hljs-attr">article_tags</span>: [<br>    &#123;<br>      <span class="hljs-attr">type</span>: mongoose.<span class="hljs-property">Schema</span>.<span class="hljs-property">ObjectId</span>, <span class="hljs-comment">//表示关联的为ObjectId属性的值，如Tag表的_id</span><br>      <span class="hljs-attr">ref</span>: <span class="hljs-string">&#x27;Tag&#x27;</span>, <span class="hljs-comment">//指定与Tag表建立关联</span><br>    &#125;,<br>  ],<br>  <span class="hljs-attr">article_content</span>: <span class="hljs-title class_">String</span>,<br>&#125;)<br><span class="hljs-comment">// 标签表</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">TagsSchema</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>  <span class="hljs-attr">tags_name</span>: <span class="hljs-title class_">String</span>,<br>  <span class="hljs-attr">tags_desc</span>: <span class="hljs-title class_">String</span>,<br>&#125;)<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">Article</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;Article&#x27;</span>, articleSchema)<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">Tag</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;Tag&#x27;</span>, <span class="hljs-title class_">TagsSchema</span>)<br></code></pre></td></tr></table></figure><p>Article 表的 article_tags 属性对应的是一个 ObjectId 的数组。ref 表示关联 Tag 表(注意: 被关联的 model 的 type 必须是 ObjectId, Number, String, 和 Buffer 才有效)。<br>如上所示可以设置 article_tags 关联 Tag，那么在获取 articleSchema 的 document 的时候就可以使用 Population 功能找到关联的 TagsSchema 的 document，并且用它的内容替换掉原来关联字段 article_tags 的内容。<br>其中一个 article 有许多的 tag。</p><blockquote><p>用.populate()查询：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Article</span>.<span class="hljs-title function_">find</span>(querys,fields,options).<span class="hljs-title function_">populate</span>(&#123;<br> <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;article_tags&#x27;</span>, <span class="hljs-comment">//表示填充的是article_tags字段</span><br> <span class="hljs-attr">select</span>: <span class="hljs-string">&quot;_id tags_name tags_desc&quot;</span> <span class="hljs-comment">//指定用Tag中哪些字段填充</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>语法：<br>Query.populate(path, [select], [model], [match], [options])<br>model<br>　　类型：Model，可选，指定关联字段的 model，如果没有指定就会使用 Schema 的 ref。<br>match<br>　　类型：Object，可选，指定附加的查询条件。<br>options<br>　　类型：Object，可选，指定附加的其他查询选项，如排序以及条数限制等等。</p>]]></content>
    
    
    <categories>
      
      <category>mongodb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React全家桶</title>
    <link href="/blog/2020/12/10/react/react/"/>
    <url>/blog/2020/12/10/react/react/</url>
    
    <content type="html"><![CDATA[<h2 id="一、React-入门"><a href="#一、React-入门" class="headerlink" title="一、React 入门"></a>一、React 入门</h2><h3 id="1-1-React-基本认识"><a href="#1-1-React-基本认识" class="headerlink" title="1.1 React 基本认识"></a>1.1 React 基本认识</h3><p>用于构建用户界面的 JavaScript 库（只关注于 View），由 Facebook 开源。</p><p><strong>特点</strong></p><ol><li>Declarative（声明式编码）</li><li>Component-Based（组件化编码）</li><li>Learn Once，Write Anywhere（支持客户端与服务器渲染，React-Native）</li><li>高效</li><li>单向数据流</li></ol><p><strong>高效的原因</strong></p><ol><li>虚拟（virtual）DOM，不总是操作 DOM</li><li>DOM Diff 算法，最小化页面重绘</li></ol><h3 id="1-2-React-基本使用"><a href="#1-2-React-基本使用" class="headerlink" title="1.2 React 基本使用"></a>1.2 React 基本使用</h3><p><strong>相关 js 库</strong></p><ol><li>react.js：React 的核心库</li><li>react-dom.js：提供操作 DOM 的 react 扩展库</li><li>babel.min.js：解析 JSX 语法代码转为纯 JS 语法代码的库</li></ol><p><strong>使用 React 开发者工具调试</strong></p><p>React_DeveloperTools 浏览器插件</p><h3 id="1-3-React-JSX"><a href="#1-3-React-JSX" class="headerlink" title="1.3 React JSX"></a>1.3 React JSX</h3><h4 id="1-3-1-虚拟-DOM"><a href="#1-3-1-虚拟-DOM" class="headerlink" title="1.3.1 虚拟 DOM"></a>1.3.1 虚拟 DOM</h4><p>1.创建虚拟 DOM（特别的 js 对象）的两种方式：</p><p>a. React 提供的 API 来创建（纯 JS，一般不用）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> vDom = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h1&#x27;</span>, &#123; <span class="hljs-attr">id</span>: myId &#125;, msg)<br></code></pre></td></tr></table></figure><p>b. JSX 语法（需要 babel 转换为 js）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> vDom = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;myId&#125;</span>&gt;</span>&#123;msg&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>2.虚拟 DOM 对象最终都会被 React 转换为真实的 DOM</p><p>3.我们编码时基本只需要操作 react 的虚拟 DOM 的相关数据，react 会转换为真实的 DOM 变化从而更新界面（因为虚拟 DOM 很“轻”，而真实 DOM 很“重”；真实 DOM 改变会重绘，而虚拟 DOM 变化不会更新界面，只有在渲染后才更新）</p><blockquote><p>在 Web 开发中，我们总需要将变化的数据实时反应到 UI 上，这时就需要对 DOM 进行操作。而复杂或频繁的 DOM 操作通常是性能瓶颈产生的原因，React 为此引入了虚拟 DOM（Virtual DOM）的机制：</p><p>在浏览器端用 JS 实现了一套 DOM API。基于 React 进行开发时所有的 DOM 构造都是通过虚拟 DOM 进行，每当数据变化时，React 都会重新构建整个 DOM 树，然后 React 将当前整个 DOM 树和上一次的 DOM 树进行对比，得到 DOM 结构的区别，然后仅仅将需要变化的部分进行实际的浏览器 DOM 更新。而且 React 能够批处理虚拟 DOM 的刷新，在一个事件循环（Event Loop）内的两次数据变化会被合并，例如你连续的先将节点内容从 A 变成 B，然后又从 B 变成 A，React 会认为 UI 不发生任何变化，而如果通过手动控制，这种逻辑通常是极其复杂的。尽管每一次都需要构造完整的虚拟 DOM 树，但是因为虚拟 DOM 是内存数据，性能是极高的（很“轻”），而对实际 DOM 进行操作的仅仅是 Diff 部分，因而能达到提高性能的目的。</p><p>这样，在保证性能的同时，开发者将不再需要关注某个数据的变化如何更新到一个或多个具体的 DOM 元素，而只需要关心在任意一个数据状态下，整个界面是如何 Render 的。</p></blockquote><h4 id="1-3-2-JSX"><a href="#1-3-2-JSX" class="headerlink" title="1.3.2 JSX"></a>1.3.2 JSX</h4><p>1.全称：JavaScript XML</p><p>2.react 定义的一种类似于 XML 的 JS 扩展语法 XML + JS</p><p>3.作用：用来创建 react 虚拟 DOM（元素）对象</p><p>a. <code>var vDom = &lt;h1&gt;Hello JSX!&lt;/h1&gt;</code></p><p>b. 注意 1：它不是字符串，也不是 HTML/XML 标签</p><p>c. 注意 2：它最终产生的就是一个 JS 对象</p><p>4.标签名任意：HTML 标签或其它标签（可以自定义）</p><p>5.标签属性任意：HTML 标签属性或其它（可以自定义）</p><p>6.基本语法规则</p><p>a. 遇到 ‘&lt;’ 开头的代码，以标签的语法解析：html 同名标签转换为 html 同名元素，其它标签需要特别解析</p><p>b. 遇到 ‘{‘ 开头的代码，以 JS 语法解析：<strong>标签中的 js 代码必须用 {} 包含</strong></p><p>也就是说：js 中可以直接嵌套&lt;标签&gt;，但标签要嵌套 js 需要放在 {} 中</p><p>7.babel.js 的作用</p><p>a. 浏览器不能直接解析 JSX 代码，需要 babel 转译为纯 JS 的代码才能运行</p><p>b. 只要用了 JSX，都要在 script 标签中加上 <code>type=&quot;text/babel&quot;</code> 来声明需要 babel 来处理</p><h4 id="1-3-3-渲染虚拟-DOM-元素"><a href="#1-3-3-渲染虚拟-DOM-元素" class="headerlink" title="1.3.3 渲染虚拟 DOM(元素)"></a>1.3.3 渲染虚拟 DOM(元素)</h4><p>1.语法：<code>ReactDOM.render(virtualDOM, containerDOM)</code></p><p>2.作用：将虚拟 DOM 元素渲染到页面中的真实容器 DOM 中显示</p><p>3.参数说明</p><p>a. 参数一：纯 js 或 jsx 创建的虚拟 dom 对象</p><p>b. 参数二：用来包含虚拟 DOM 元素的真实 dom 元素对象(一般是一个 div)</p><h3 id="1-4-模块与组件、模块化与组件化的理解"><a href="#1-4-模块与组件、模块化与组件化的理解" class="headerlink" title="1.4 模块与组件、模块化与组件化的理解"></a>1.4 模块与组件、模块化与组件化的理解</h3><p><strong>模块</strong></p><p>1.理解：向外提供特定功能的 js 程序，一般就是一个 js 文件</p><p>2.为什么：js 代码很多很复杂</p><p>3.作用：复用 js，简化 js 的编写，提高 js 运行效率</p><p><strong>组件</strong></p><p>1.理解：用来实现特定（局部）功能效果的代码集合（包含 html/css/js/图片 等）</p><p>2.为什么：一个界面的功能很复杂</p><p>3.作用：复用编码，简化项目编码，提高运行效率</p><p><strong>模块化</strong></p><p>当应用的 js 都以模块来编写的，这个应用就是一个模块化的应用</p><p><strong>组件化</strong></p><p>当应用是以多组件的方式实现，这个应用就是一个组件化的应用</p><h2 id="二、React-面向组件编程"><a href="#二、React-面向组件编程" class="headerlink" title="二、React 面向组件编程"></a>二、React 面向组件编程</h2><h3 id="2-1-自定义组件"><a href="#2-1-自定义组件" class="headerlink" title="2.1 自定义组件"></a>2.1 自定义组件</h3><p>1.定义组件的两种方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方式1：工厂函数组件（是简单组件，没有state状态）</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>工厂函数组件（简单组件）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">// 方式2：ES6类组件（是复杂组件，可以有state）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// MyComponent2的实例对象</span><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>ES6类组件（复杂组件）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.渲染组件标签</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;example1&#x27;</span>))<br></code></pre></td></tr></table></figure><p>3.注意：</p><ul><li><p>组件名必须首字母大写</p></li><li><p>虚拟 DOM 元素只能有一个根元素</p></li><li><p>虚拟 DOM 元素必须有结束标签</p><p>4.render() 渲染组件标签的基本流程：</p></li></ul><ol><li>React 内部会创建组件实例对象</li><li>得到包含的虚拟 DOM 并解析为真实 DOM</li><li>插入到指定的页面元素内部</li></ol><h3 id="2-2-组件三大属性"><a href="#2-2-组件三大属性" class="headerlink" title="2.2 组件三大属性"></a>2.2 组件三大属性</h3><h4 id="2-2-1-state"><a href="#2-2-1-state" class="headerlink" title="2.2.1 state"></a>2.2.1 state</h4><p><strong>理解</strong></p><p>1.state 是组件对象最重要的属性，值是对象（可以包含多个数据）</p><p>2.组件被称为”状态机”，通过更新组件的 state 来更新对应的页面显示（重新渲染组件）</p><p><strong>编码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span>初始化状态<br><span class="hljs-title function_">constructor</span> (props) &#123;<br>  <span class="hljs-variable language_">super</span>(props)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>    stateProp1 : value1,<br>    stateProp2 : value2<br>  &#125;<br>  <span class="hljs-comment">// 将新增的方法中this强制绑定为组件对象（新添加的方法：内部this默认不是组件对象，而是undefined）</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleClick</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleClick</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// bind返回一个新的处理过的函数</span><br>&#125;<br><span class="hljs-comment">// 2.读取某个状态值</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">statePropertyName</span><br><span class="hljs-comment">// 3.更新状态 --&gt; 组件界面更新</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>  stateProp1 : value1,<br>  stateProp2 : value2<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2-2-2-props"><a href="#2-2-2-props" class="headerlink" title="2.2.2 props"></a>2.2.2 props</h4><p><strong>理解</strong></p><p>1.每个组件对象都会有 props（properties）属性</p><p>2.组件标签的所有属性都保存在 props 中</p><p><strong>作用</strong></p><p>1.通过标签属性从组件外向组件内传递变化的数据</p><p>2.注意：组件内部不要修改 props 数据</p><p><strong>编码</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 1.内部读取某个属性值</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">propertyName</span><br><span class="hljs-comment">// 2.对 props 中的属性值进行类型限制和必要性限制</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property">propTypes</span> = &#123; <span class="hljs-comment">// 使用 prop-types 库</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span><br>&#125;<br><span class="hljs-comment">// 3.扩展属性：将对象的所有属性通过 props 传递</span><br>&lt;<span class="hljs-title class_">Person</span> &#123;...person&#125; /&gt;<br><span class="hljs-comment">// 4.默认属性</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Mary&#x27;</span><br>&#125;<br><span class="hljs-comment">// 5.组件类的构造函数</span><br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-variable language_">super</span>(props)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props) <span class="hljs-comment">// 查看所有属性</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>问题</strong></p><p>请区别一下组件的 props 和 state 属性</p><p>1.state：组件自身内部可变化的数据</p><p>2.props：从组件外部向组件内部传递数据，组件内部只读不修改</p><h4 id="2-2-3-refs"><a href="#2-2-3-refs" class="headerlink" title="2.2.3 refs"></a>2.2.3 refs</h4><p>1.组件内的标签都可以定义 ref 属性来标识自己</p><p>a. <code>&lt;input type=&quot;text&quot; ref=&#123;input =&gt; this.msgInput = input&#125; /&gt;</code></p><p>b. ref 中的回调函数在组件初始化渲染完或卸载时自动调用（将 input 这个元素赋给组件实例对象的 this.msgInput）</p><p>2.在组件中可以通过 this.msgInput.value 来得到对应的真实 DOM 元素的值</p><p>3.作用：通过 ref 获取组件内容特定标签对象，进行读取其相关数据</p><h4 id="2-2-4-事件处理"><a href="#2-2-4-事件处理" class="headerlink" title="2.2.4 事件处理"></a>2.2.4 事件处理</h4><p>1.通过 onXxx 属性指定组件的事件处理函数（如：onClick、onBlur，注意需要大写）</p><p>a. React 使用的是自定义（合成）事件，而不是使用的原生 DOM 事件</p><p>b. React 中的事件是通过事件委托方式处理的（委托给组件最外层的元素）</p><p>2.通过 event.target 得到发生事件的 DOM 元素对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;input onFocus=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">handleFocus</span>&#125;/&gt;<br><br><span class="hljs-title function_">handleFocus</span>(<span class="hljs-params">event</span>) &#123;<br>  event.<span class="hljs-property">target</span>  <span class="hljs-comment">//返回事件发生的input元素对象</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><p>1.组件内置的方法中的 this 为组件对象</p><p>2.在组件类中自定义的方法中 this 为 null</p><p>a. 强制绑定 this：通过函数对象的 bind()</p><p>b. 箭头函数（ES6 模块化编码时才能使用）</p><h3 id="2-3-组件的组合"><a href="#2-3-组件的组合" class="headerlink" title="2.3 组件的组合"></a>2.3 组件的组合</h3><h4 id="2-3-1-功能界面的组件化编码流程（无比重要）"><a href="#2-3-1-功能界面的组件化编码流程（无比重要）" class="headerlink" title="2.3.1 功能界面的组件化编码流程（无比重要）"></a>2.3.1 功能界面的组件化编码流程（无比重要）</h4><p>1.拆分组件：拆分界面，抽取组件（有几个组件）</p><p>2.实现静态组件：使用组件实现静态页面效果（写 render）只有静态界面，没有动态数据和交互</p><p>3.实现动态组件</p><p>a. 动态显示初始化数据（数据定义在哪一个组件中）</p><p>b. 交互功能（从绑定事件监听开始）</p><h3 id="2-4-收集表单数据"><a href="#2-4-收集表单数据" class="headerlink" title="2.4 收集表单数据"></a>2.4 收集表单数据</h3><p><strong>理解</strong></p><p>1.问题：在 react 应用中，如何收集表单输入数据</p><p>2.包含表单的组件分类</p><p>a. <strong>受控组件</strong>：表单项输入数据能自动收集成状态（onChange）</p><p>更贴近 react 思想，尽量少操作 DOM（一般更推荐这种写法）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">密码：&lt;input type=<span class="hljs-string">&quot;password&quot;</span> value=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">pwd</span>&#125; onChange=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">handleChange</span>&#125; /&gt;<br></code></pre></td></tr></table></figure><p>b. <strong>非受控组件</strong>：需要时才手动读取表单输入框中的数据（ref）</p><p>写起来轻松，但是操作了原生 DOM（this.nameInput.value）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> ref=&#123;<span class="hljs-function"><span class="hljs-params">input</span> =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">nameInput</span> = input&#125; /&gt;<br></code></pre></td></tr></table></figure><h3 id="2-5-组件生命周期"><a href="#2-5-组件生命周期" class="headerlink" title="2.5 组件生命周期"></a>2.5 组件生命周期</h3><h4 id="2-5-1-理解"><a href="#2-5-1-理解" class="headerlink" title="2.5.1 理解"></a>2.5.1 理解</h4><p>1.组件对象从创建到死亡它会经历特定的生命周期阶段</p><p>2.React 组件对象包含一系列的<strong>钩子函数</strong>（生命周期回调函数），在生命周期特定时刻回调</p><p>3.我们在定义组件时，可以重写特定的生命周期回调函数，做特定的工作</p><h4 id="2-5-2-生命周期流程图"><a href="#2-5-2-生命周期流程图" class="headerlink" title="2.5.2 生命周期流程图"></a>2.5.2 生命周期流程图</h4><p><img src="https://img-blog.csdnimg.cn/20200830142058207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTA4ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="image-20200823105645557"></p><h4 id="2-5-3-生命周期详述"><a href="#2-5-3-生命周期详述" class="headerlink" title="2.5.3 生命周期详述"></a>2.5.3 生命周期详述</h4><p>1.组件的三个生命周期状态：</p><ul><li><p>Mount：挂载过程，第一次将组件插入到真实 DOM</p></li><li><p>Update：更新过程，组件被重新渲染</p></li><li><p>Unmount：卸载过程，被移出真实 DOM</p><p>2.<strong>生命周期流程</strong>：</p></li></ul><p>1）创建阶段（第一次初始化渲染显示）</p><blockquote><p>ReactDOM.render()</p></blockquote><ul><li><p>constructor()：<code>super(props)</code> 指定 this，<code>this.state=&#123;&#125;</code> 创建初始化状态（getDefaultProps、getInitialState）</p></li><li><p>componentWillMount()</p><p>：组件将要挂载到页面上</p><ul><li>可以在这里调用 setState() 方法修改 state</li></ul></li><li><p>render()：创建虚拟 DOM 但是还没有挂载上去</p></li><li><p>componentDidMount()</p><p>：已经挂载到页面上（初始界面已经渲染完毕）</p><ul><li>可以在这里通过 this.getDOMNode() 来进行访问 DOM 结构</li><li>可以在这里发送 ajax 请求</li><li>添加监听器/订阅</li></ul></li></ul><p>2）运行阶段（二次渲染）</p><blockquote><p>父组件传递的 <code>props</code> 发生更新，就会调用 componentWillReceiveProps()</p></blockquote><ul><li>**componentWillReceiveProps(nextProps)**：当子组件接受到 nextProps 时，不管这个 props 与原来的是否相同都会调用</li></ul><blockquote><p><code>props</code> 改变或者调用 this.setState() 方法更新 <code>state</code>，都会触发组件的更新，调用后面的钩子函数</p></blockquote><ul><li><p>shouldComponentUpdata(nextProps, nextState)</p><p>：接收一个新的 props 和 state，返回 true/false，表示是否允许更新</p><ul><li>通常情况下为了优化，需要对新的 props 以及 state 和原来的数据作对比，如果发生变化才更新</li></ul></li></ul><blockquote><p>调用 this.forceUpdate() 方法会直接进入 componentWillUpdate。跳过 shouldComponentUpdate()</p></blockquote><ul><li>**componentWillUpdate()**：将要更新</li><li>render()：重新渲染</li><li>**componentDidUpdate()**：已经完成更新</li></ul><p>除了首次 render 之后调用 <code>componentDidMount</code>，其它 render 结束之后都是调用 <code>componentDidUpdate</code></p><p>3）销毁阶段（移除组件）</p><blockquote><p>执行 ReactDOM.unmountComponentAtNode(containerDom) 用来使组件从真实 DOM 中卸载（开始销毁阶段）</p></blockquote><ul><li><p>componentWillUnmount()</p><p>：组件将要被移除时（移出前）回调</p><ul><li>一般在 <code>componentDidMount</code> 里面注册的事件需要在这里删除</li></ul></li></ul><h4 id="2-5-4-重要的勾子"><a href="#2-5-4-重要的勾子" class="headerlink" title="2.5.4 重要的勾子"></a>2.5.4 重要的勾子</h4><ol><li>render()：初始化渲染时或更新渲染时调用</li><li>componentDidMount()：开启监听，可以初始化一些异步操作：启动定时器/发送 ajax 请求</li><li>componentWillUnmount()：做一些收尾工作，如：清理定时器</li><li>componentWillReceiveProps()：当组件接收到（父元素传递的）新的 props 属性前调用</li></ol><h4 id="2-5-5-新的生命周期"><a href="#2-5-5-新的生命周期" class="headerlink" title="2.5.5 新的生命周期"></a>2.5.5 <strong>新的生命周期</strong></h4><p><strong>注意</strong></p><p><code>componentWillMount</code>、<code>componentWillReceiveProps</code> 和 <code>componentWillUpdate</code> 这三个生命周期函数都被添加了 UNSAFE_ 不安全标记，并且在 17.0 版本将会被删除。</p><blockquote><p>由于 React 未来的版本中推出了异步渲染，在 <code>dom</code> 被挂载之前的阶段都可以被打断重来，导致 <code>componentWillMount</code>、<code>componentWillUpdate</code>、<code>componentWillReceiveProps</code> 在一次更新中可能会被触发多次，因此那些只希望触发一次的应该放在 <code>componentDidUpdate</code> 中。这也就是为什么要把异步请求放在 <code>componentDidMount</code> 中，而不是放在 <code>componentWillMount</code> 中的原因，为了向后兼容。</p></blockquote><p><strong>目前新的生命周期流程图：</strong></p><p><img src="https://img-blog.csdnimg.cn/20200830142058322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTA4ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>getDerivedStateFromProps</strong></p><p>功能：将 props 映射到 state 上面</p><p>触发时间：会在调用 render 方法之前调用（<strong>每次渲染前都会触发</strong>），并且在初始挂载及后续更新时都会被调用。</p><p>它是一个<strong>静态</strong>函数，所以函数体内不能访问 this，输出完全由输入的参数 nextProps 和 prevState 来决定，如果 props 传入的内容不需要影响到 state，那么就需要返回一个 null，这个返回值是必须的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFromProps</span>(<span class="hljs-params">props, state</span>) &#123;<br>  <span class="hljs-keyword">if</span> (props.<span class="hljs-property">currentRow</span> !== state.<span class="hljs-property">lastRow</span>) &#123;<br>    <span class="hljs-comment">// 如果新的props的当前行大于之前的state的最后一行，就向下滚动</span><br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-comment">// 返回的对象将被映射到state（state原来的属性和值还在）</span><br>      <span class="hljs-attr">isScrollingDown</span>: props.<span class="hljs-property">currentRow</span> &gt; state.<span class="hljs-property">lastRow</span>,<br>      <span class="hljs-attr">lastRow</span>: props.<span class="hljs-property">currentRow</span>,<br>    &#125;;<br>  &#125;<br>  <span class="hljs-comment">// 返回 null 表示无需更新 state。</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>与 <code>componentDidUpdate</code> 一起，这个新的生命周期涵盖过时的 <code>componentWillReceiveProps</code> 的所有用例。</p></blockquote><p><strong>getSnapshotBeforeUpdate</strong></p><p>功能：使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）</p><p>触发时间：在最近一次渲染输出（提交到 DOM 节点）之前调用</p><p>返回值将作为第三个参数传递给 <code>componentDidUpdate()</code>。在重新渲染过程中手动保留滚动位置等情况下非常有用。</p><blockquote><p>与 <code>componentDidUpdate</code> 一起，这个新的生命周期涵盖过时的 <code>componentWillUpdate</code> 的所有用例。</p></blockquote><h3 id="2-6-虚拟-DOM-与-DOM-Diff-算法"><a href="#2-6-虚拟-DOM-与-DOM-Diff-算法" class="headerlink" title="2.6 虚拟 DOM 与 DOM Diff 算法"></a>2.6 虚拟 DOM 与 DOM Diff 算法</h3><h4 id="2-6-1-基本原理图"><a href="#2-6-1-基本原理图" class="headerlink" title="2.6.1 基本原理图"></a>2.6.1 基本原理图</h4><p><img src="https://img-blog.csdnimg.cn/20200830142058100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTA4ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="image-20200823152235286"></p><p>DOM Diff 能比较新旧虚拟 DOM 树，计算哪里改变，然后就只需要重绘变化的局部界面。</p><h2 id="三、react-应用（基于-react-脚手架）"><a href="#三、react-应用（基于-react-脚手架）" class="headerlink" title="三、react 应用（基于 react 脚手架）"></a>三、react 应用（基于 react 脚手架）</h2><h3 id="3-1-使用-create-react-app-创建-react-应用"><a href="#3-1-使用-create-react-app-创建-react-应用" class="headerlink" title="3.1 使用 create-react-app 创建 react 应用"></a>3.1 使用 create-react-app 创建 react 应用</h3><h4 id="3-1-1-react-脚手架"><a href="#3-1-1-react-脚手架" class="headerlink" title="3.1.1. react 脚手架"></a>3.1.1. react 脚手架</h4><p>1.xxx 脚手架：用来帮助程序员快速创建一个基于 xxx 库的模板项目</p><p>a. 包含了所有需要的配置</p><p>b. 指定好了所有的依赖</p><p>c. 可以直接安装/编译/运行一个简单效果</p><p>2.react 提供了一个用于创建 react 项目的脚手架库：<code>create-react-app</code></p><p>3.项目的整体技术架构为：react + webpack + es6 + eslint</p><p>4.使用脚手架开发的项目的特点：模块化，组件化，工程化</p><h4 id="3-1-2-创建项目并启动"><a href="#3-1-2-创建项目并启动" class="headerlink" title="3.1.2 创建项目并启动"></a>3.1.2 创建项目并启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -g create-react-app // 全局安装create-react-app脚手架<br>create-react-app hello-react // 创建一个react项目，项目名称是hello-react<br><span class="hljs-built_in">cd</span> hello-react<br>npm start // 启动项目<br></code></pre></td></tr></table></figure><h2 id="四、react-ajax"><a href="#四、react-ajax" class="headerlink" title="四、react ajax"></a>四、react ajax</h2><h3 id="4-1-理解"><a href="#4-1-理解" class="headerlink" title="4.1 理解"></a>4.1 理解</h3><p><strong>前置说明</strong></p><p>1.React 本身只关注于界面，并不包含发送 ajax 请求的代码</p><p>2.前端应用需要通过 ajax 请求与后台进行交互（json 数据）</p><p>3.react 应用中需要集成第三方 ajax 库（或自己封装）</p><p><strong>常用的 ajax 请求库</strong></p><p>1.jQuery：比较重，如果需要另外引入不建议使用</p><p>2.axios：轻量级，建议使用</p><p>a. 封装了 XmlHttpRequest 对象的 ajax</p><p>b. 是 promise 风格</p><p>c. 既可以用在浏览器端又可以用在 node 服务器端</p><p>3.fetch：原生函数，但老版本浏览器不支持</p><p>a. 不再使用 XmlHttpRequest 对象提交 ajax 请求</p><p>b. 为了兼容低版本的浏览器，可以引入兼容库 fetch.js</p><h3 id="4-2-axios"><a href="#4-2-axios" class="headerlink" title="4.2 axios"></a>4.2 axios</h3><p><strong>GET 请求</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user?ID=12345&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response)<br>&#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)<br>&#125;)<br><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, &#123;<br>  <span class="hljs-attr">prams</span>: &#123;<br>    <span class="hljs-attr">ID</span>: <span class="hljs-number">12345</span><br>  &#125;<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response)<br>&#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)<br>&#125;))<br></code></pre></td></tr></table></figure><p><strong>POST 请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Fred&#x27;</span>,<br>  <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Flintstone&#x27;</span><br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response)<br>&#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)<br>&#125;)))<br></code></pre></td></tr></table></figure><h3 id="4-3-Fetch"><a href="#4-3-Fetch" class="headerlink" title="4.3 Fetch"></a>4.3 Fetch</h3><p><strong>GET 请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fetch</span>(url)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)<br>  &#125;)<br></code></pre></td></tr></table></figure><p><strong>POST 请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fetch</span>(url, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)<br>  &#125;)<br></code></pre></td></tr></table></figure><h2 id="五、几个重要技术总结"><a href="#五、几个重要技术总结" class="headerlink" title="五、几个重要技术总结"></a>五、几个重要技术总结</h2><h3 id="5-1-组件间通信"><a href="#5-1-组件间通信" class="headerlink" title="5.1 组件间通信"></a>5.1 组件间通信</h3><h4 id="5-1-1-方式一：通过-props-传递"><a href="#5-1-1-方式一：通过-props-传递" class="headerlink" title="5.1.1 方式一：通过 props 传递"></a>5.1.1 方式一：通过 props 传递</h4><p>1.共同的数据放在父组件上，特有的数据放在自己组件内部（state）</p><p>2.通过 props 可以传递一般数据和函数数据，只能一层一层传递</p><p>3.一般数据 –&gt; 父组件传递数据给子组件 –&gt; 子组件读取数据</p><p>4.函数数据 –&gt; 子组件传递数据给父组件 –&gt; 子组件调用函数</p><h4 id="5-1-2-方式二：使用消息订阅-发布机制（subscribe-publish）"><a href="#5-1-2-方式二：使用消息订阅-发布机制（subscribe-publish）" class="headerlink" title="5.1.2 方式二：使用消息订阅-发布机制（subscribe-publish）"></a>5.1.2 方式二：使用消息订阅-发布机制（subscribe-publish）</h4><p>1.工具库：PubSubJS</p><p>2.下载：npm install pubsub-js –save</p><p>3.使用：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PubSub</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pubsub-js&#x27;</span> <span class="hljs-comment">//引入</span><br><br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;&#125;) <span class="hljs-comment">//订阅消息，绑定监听</span><br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;delete&#x27;</span>, data) <span class="hljs-comment">//发布消息，触发事件</span><br></code></pre></td></tr></table></figure><h4 id="5-1-3-方式三：redux"><a href="#5-1-3-方式三：redux" class="headerlink" title="5.1.3 方式三：redux"></a>5.1.3 方式三：redux</h4><p>在八、redux 中</p><h3 id="5-2-事件监听理解"><a href="#5-2-事件监听理解" class="headerlink" title="5.2 事件监听理解"></a>5.2 事件监听理解</h3><h4 id="5-2-1-原生-DOM-事件"><a href="#5-2-1-原生-DOM-事件" class="headerlink" title="5.2.1 原生 DOM 事件"></a>5.2.1 原生 DOM 事件</h4><p>1.绑定事件监听</p><p>a. 事件名(类型)：只有有限的几个，不能随便写</p><p>b. 回调函数</p><p>2.触发事件</p><p>a. 用户操作界面</p><p>b. 事件名(类型)</p><p>c. 数据()</p><h4 id="5-2-2-自定义事件-消息机制"><a href="#5-2-2-自定义事件-消息机制" class="headerlink" title="5.2.2 自定义事件(消息机制)"></a>5.2.2 自定义事件(消息机制)</h4><p>1.绑定事件监听</p><p>a. 事件名(类型)：任意</p><p>b. 回调函数：通过形参接收数据，在函数体处理事件</p><p>2.触发事件(编码)</p><p>a. 事件名(类型)：与绑定的事件监听的事件名一致</p><p>b. 数据：会自动传递给回调函数</p><h2 id="六、react-router4"><a href="#六、react-router4" class="headerlink" title="六、react-router4"></a>六、react-router4</h2><h3 id="6-1-理解"><a href="#6-1-理解" class="headerlink" title="6.1 理解"></a>6.1 理解</h3><h4 id="6-1-1-react-router"><a href="#6-1-1-react-router" class="headerlink" title="6.1.1 react-router"></a>6.1.1 react-router</h4><p>1.react 的一个插件库</p><p>2.专门用来实现一个 SPA 应用</p><p>3.基于 react 的项目基本都会用到此库</p><h4 id="6-1-2-SPA"><a href="#6-1-2-SPA" class="headerlink" title="6.1.2 SPA"></a>6.1.2 SPA</h4><p>1.单页 Web 应用（single page web application，SPA）</p><p>2.整个应用只有一个完整的页面</p><p>3.点击页面中的链接<strong>不会刷新页面，也不会向服务器发请求</strong>（会更新不同的组件）</p><p>4.当点击路由链接时，只会做页面的局部更新</p><p>5.数据都需要通过 ajax 请求获取，并在前端异步展现</p><h3 id="6-1-3-路由"><a href="#6-1-3-路由" class="headerlink" title="6.1.3 路由"></a>6.1.3 路由</h3><p>1.<strong>什么是路由?</strong></p><p>a. 一个路由就是一个映射关系（key:value）</p><p>b. key 为路由路径，value 可能是 function/component</p><p>2.<strong>路由分类</strong></p><p>a. 后台路由：node 服务器端路由，value 是 function，用来处理客户端提交的请求并返回一个响应数据</p><p>b. 前台路由：浏览器端路由，value 是 component，当请求的是路由 path 时，浏览器端没有发送 http 请求，但界面会更新显示对应的组件</p><p>3.<strong>后台路由</strong></p><p>a. 注册路由：router.get(path, function(req, res))，即路由器</p><p>b. 当 node 接收到一个请求时，根据请求路径找到匹配的路由，调用路由中的函数来处理请求，返回响应数据</p><p>4.<strong>前端路由</strong></p><p>a. 注册路由：<code>&lt;Route path=&quot;/about&quot; component=&#123;About&#125;&gt;</code></p><p>b. 当浏览器的 hash 变为 #about 时，当前路由组件就会变为 About 组件</p><h4 id="6-1-4-前端路由的实现"><a href="#6-1-4-前端路由的实现" class="headerlink" title="6.1.4 前端路由的实现"></a>6.1.4 前端路由的实现</h4><p>1.history 库</p><p>a. 管理浏览器会话历史（history）的工具库</p><p>b. 包装的是原生 BOM 中的 window.history 和 window.location.hash</p><p>2.history API</p><ul><li>History.createBrowserHistory()：得到封装 window.history 的管理对象</li><li>History.createHashHistory()：得到封装 window.location.hash 的管理对象</li><li>history.push()：添加一个新的历史记录</li><li>history.replace()：用一个新的历史记录替换当前的记录</li><li>history.goBack()：回退到上一个历史记录</li><li>history.goForword()：前进到下一个历史记录</li><li>history.listen(function(location){})：监视历史记录的变化</li></ul><h3 id="6-2-react-router-相关-API"><a href="#6-2-react-router-相关-API" class="headerlink" title="6.2 react-router 相关 API"></a>6.2 react-router 相关 API</h3><p><strong>组件</strong></p><p>路由器标签：</p><ul><li><code>&lt;BrowserRouter&gt;</code></li><li><code>&lt;HashRouter&gt;</code>：带#号</li></ul><p>路由标签：</p><ul><li><code>&lt;Switch&gt;</code>：包裹住<code>&lt;Route&gt;</code>，用来切换多个路由</li><li><code>&lt;Route&gt;</code></li><li><code>&lt;Redirect&gt;</code>：自动跳转重定向，用来直接选中某个路由</li></ul><p>路由链接：</p><ul><li><code>&lt;Link&gt;</code></li><li><code>&lt;NavLink&gt;</code>：比<code>&lt;Link&gt;</code>多了一个 class，选中有 active 效果</li></ul><p><strong>其他</strong></p><p>1.this.props 中的</p><ul><li><p>match 对象：.match.params，通过路由参数向路由组件传递数据</p></li><li><p>history 对象：.history，push()/replace()/goBack()/goForward()</p><p>2.withRouter 函数：用 this.props.history.push(‘/detail’) 去跳转页面，但是报 this.props.history 错误 undefined，请在此组件中使用 withRouter 将 history 传入到 props 上。</p></li></ul><h3 id="6-3-路由使用"><a href="#6-3-路由使用" class="headerlink" title="6.3 路由使用"></a>6.3 路由使用</h3><p>1.下载适用于 web 的 react-router：:<code>npm install --save react-router-dom</code></p><p>2.流程</p><ol><li>编写<strong>路由组件</strong></li><li>在父路由组件中指定：<ul><li><strong>路由链接</strong>：<code>&lt;NavLink&gt;</code></li><li><strong>路由</strong>：<code>&lt;Route&gt;</code></li></ul></li><li>嵌套路由：<code>path=&#39;/home/news&#39;</code></li></ol><h3 id="6-4-向路由组件传递参数数据"><a href="#6-4-向路由组件传递参数数据" class="headerlink" title="6.4 向路由组件传递参数数据"></a>6.4 向路由组件传递参数数据</h3><p>不能用 props 传递数据，因为加载组件用的不是标签的形式，而是：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Route</span> path=<span class="hljs-string">&#x27;/home/message&#x27;</span> component=&#123;<span class="hljs-title class_">Message</span>&#125;/&gt;<br><span class="hljs-comment">// message.jsx</span><br><span class="hljs-comment">// 路由链接</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`/<span class="hljs-attr">home</span>/<span class="hljs-attr">message</span>/<span class="hljs-attr">messagedetail</span>/$&#123;<span class="hljs-attr">m.id</span>&#125;`&#125;&gt;</span>&#123;m.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="hljs-comment">// 路由</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#123;</span>`/<span class="hljs-attr">home</span>/<span class="hljs-attr">message</span>/<span class="hljs-attr">messagedetail</span>/<span class="hljs-attr">:id</span>`&#125; <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;MessageDetail&#125;/</span>&gt;</span></span><br><span class="hljs-comment">// message-detail.jsx</span><br><span class="hljs-keyword">const</span> &#123;id&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">match</span>.<span class="hljs-property">params</span><br></code></pre></td></tr></table></figure><p>这样就通过路由参数传递了数据，可以在 this.props.match.params 中获取</p><h2 id="七、react-ui"><a href="#七、react-ui" class="headerlink" title="七、react-ui"></a>七、react-ui</h2><h3 id="7-1-最流行的开源-React-UI-组件库"><a href="#7-1-最流行的开源-React-UI-组件库" class="headerlink" title="7.1 最流行的开源 React UI 组件库"></a>7.1 最流行的开源 React UI 组件库</h3><h4 id="7-1-1-material-ui-国外"><a href="#7-1-1-material-ui-国外" class="headerlink" title="7.1.1 material-ui(国外)"></a>7.1.1 material-ui(国外)</h4><p>1.官网：<a href="http://www.material-ui.com/#/">http://www.material-ui.com/#/</a></p><p>2.github：<a href="https://github.com/callemall/material-ui">https://github.com/callemall/material-ui</a></p><h4 id="7-1-2-ant-design-国内蚂蚁金服"><a href="#7-1-2-ant-design-国内蚂蚁金服" class="headerlink" title="7.1.2 ant-design(国内蚂蚁金服)"></a>7.1.2 ant-design(国内蚂蚁金服)</h4><p>1.PC 官网：<a href="https://ant.design/index-cn">https://ant.design/index-cn</a></p><p>2.移动官网：<a href="https://mobile.ant.design/index-cn">https://mobile.ant.design/index-cn</a></p><p>3.Github：<a href="https://github.com/ant-design/ant-design/">https://github.com/ant-design/ant-design/</a></p><p>4.Github：<a href="https://github.com/ant-design/ant-design-mobile/">https://github.com/ant-design/ant-design-mobile/</a></p><h3 id="7-2-ant-design-mobile-使用入门"><a href="#7-2-ant-design-mobile-使用入门" class="headerlink" title="7.2 ant-design-mobile 使用入门"></a>7.2 ant-design-mobile 使用入门</h3><p><strong>搭建 antd-mobile 的基本开发环境</strong></p><p><a href="https://mobile.ant.design/docs/react/introduce-cn#1.-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE">基本使用</a></p><p><strong>实现按需打包(组件 js/css)</strong></p><p><a href="https://mobile.ant.design/docs/react/use-with-create-react-app-cn#%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD">按需加载</a></p><h2 id="八、redux"><a href="#八、redux" class="headerlink" title="八、redux"></a>八、redux</h2><h3 id="8-1-理解"><a href="#8-1-理解" class="headerlink" title="8.1 理解"></a>8.1 理解</h3><h4 id="8-1-1-redux-是什么？"><a href="#8-1-1-redux-是什么？" class="headerlink" title="8.1.1 redux 是什么？"></a>8.1.1 redux 是什么？</h4><ol><li>redux 是一个独立专门用于做状态管理的 JS 库（不是 react 插件库）</li><li>它可以用在 react，angular，vue 等项目中，但基本与 react 配合使用</li><li>作用：集中式管理 react 应用中多个组件共享的状态</li></ol><h4 id="8-1-2-redux-工作流程"><a href="#8-1-2-redux-工作流程" class="headerlink" title="8.1.2 redux 工作流程"></a>8.1.2 redux 工作流程</h4><p><img src="https://img-blog.csdnimg.cn/20200830142119865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTA4ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="image-20200826085826481"></p><h4 id="8-1-3-什么情况下需要使用-redux"><a href="#8-1-3-什么情况下需要使用-redux" class="headerlink" title="8.1.3 什么情况下需要使用 redux"></a>8.1.3 什么情况下需要使用 redux</h4><ol><li>总体原则：能不用就不用，如果不用比较吃力才考虑使用</li><li>某个组件的状态，需要共享</li><li>某个状态需要在任何地方都可以拿到</li><li>一个组件需要改变全局状态</li><li>一个组件需要改变另一个组件的状态</li></ol><h3 id="8-2-redux-的核心-API"><a href="#8-2-redux-的核心-API" class="headerlink" title="8.2 redux 的核心 API"></a>8.2 redux 的核心 API</h3><h4 id="8-2-1-createStore"><a href="#8-2-1-createStore" class="headerlink" title="8.2.1 createStore"></a>8.2.1 createStore</h4><ol><li>作用：创建包含指定 reducer 的 store 对象</li><li>编码 store.js：</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-keyword">import</span> counter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducers/counter&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(counter)<br></code></pre></td></tr></table></figure><h4 id="8-2-2-store-对象"><a href="#8-2-2-store-对象" class="headerlink" title="8.2.2 store 对象"></a>8.2.2 store 对象</h4><ol><li>作用：redux 库最核心的管理对象</li><li>它内部维护着：state、reducer</li><li>核心方法：getState()，dispatch()，subscribe(listener)</li><li>编码 jsx：</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">store.<span class="hljs-title function_">getState</span>() <span class="hljs-comment">// 得到store中存储的state数据</span><br>store.<span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;INCREMENT&#x27;</span>, <span class="hljs-attr">data</span>: number &#125;) <span class="hljs-comment">// 分发action对象，通知reducer更新state数据</span><br>store.<span class="hljs-title function_">subscribe</span>(render) <span class="hljs-comment">// 订阅监听，store中的状态变化就会调用进行重绘</span><br></code></pre></td></tr></table></figure><h4 id="8-2-3-applyMiddleware"><a href="#8-2-3-applyMiddleware" class="headerlink" title="8.2.3 applyMiddleware()"></a>8.2.3 applyMiddleware()</h4><p>1.作用：应用上基于 redux 的中间件（插件库）</p><p>2.编码 store.js：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-keyword">import</span> thunk <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-thunk&#x27;</span> <span class="hljs-comment">// redux异步中间件</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(<br>  counter,<br>  <span class="hljs-title function_">applyMiddleware</span>(thunk) <span class="hljs-comment">// 应用上异步中间件</span><br>)<br></code></pre></td></tr></table></figure><h4 id="8-2-4-combineReducers"><a href="#8-2-4-combineReducers" class="headerlink" title="8.2.4 combineReducers()"></a>8.2.4 combineReducers()</h4><p>1.作用：合并多个 reducer 函数</p><p>2.编码 reduces.js：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">combineReducers</span>(&#123;<br>  user,<br>  chatUser,<br>  chat,<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="8-3-redux-的三个核心概念"><a href="#8-3-redux-的三个核心概念" class="headerlink" title="8.3 redux 的三个核心概念"></a>8.3 redux 的三个核心概念</h3><h4 id="8-3-1-action"><a href="#8-3-1-action" class="headerlink" title="8.3.1 action"></a>8.3.1 action</h4><ol><li>标识要执行行为的对象（<strong>只是描述了有事情要发生，并没有描述如何去更新 state</strong>）</li><li>包含 2 个方面的属性：<ul><li>type：标识属性，值为字符串，唯一，必要属性</li><li>data：数据属性，值类型任意，可选属性</li></ul></li><li>例子：</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> action = &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;INCREMENT&#x27;</span>,<br>  <span class="hljs-attr">data</span>: <span class="hljs-number">2</span>,<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><strong>Action Creator（创建 action 的工厂函数）</strong></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">increment</span> = number =&gt; (&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;INCREMENT&#x27;</span>, <span class="hljs-attr">data</span>: number &#125;)<br></code></pre></td></tr></table></figure><h4 id="8-3-2-reducer"><a href="#8-3-2-reducer" class="headerlink" title="8.3.2 reducer"></a>8.3.2 reducer</h4><ol><li><strong>根据老的 state 和 action，产生新的 state</strong> 的<strong>纯函数</strong></li><li>例子：</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">counter</span>(<span class="hljs-params">state = <span class="hljs-number">0</span>, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;INCREMENT&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state + action.<span class="hljs-property">data</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;DECREMENT&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state - action.<span class="hljs-property">data</span><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>注意<ul><li><strong>返回一个新的状态 state 给 store</strong></li><li><strong>不要修改原来的状态</strong></li></ul></li></ol><h4 id="8-3-3-store"><a href="#8-3-3-store" class="headerlink" title="8.3.3 store"></a>8.3.3 store</h4><ol><li><strong>将 state，action 与 reducer 联系在一起的对象</strong></li><li>如何得到此对象？</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducers&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer)<br></code></pre></td></tr></table></figure><ol><li>此对象的功能？<ul><li>getState()：得到 state</li><li>dispatch(action)：分发 action，触发 reducer 调用，产生新的 state</li><li>subscribe(listener)：注册监听，当产生了新的 state 时，自动调用</li></ul></li></ol><p><strong>问题</strong></p><p>1.redux 与 react 组件的代码耦合度太高</p><p>2.编码不够简洁（经常重复写 this.props.store）</p><h3 id="8-4-react-redux"><a href="#8-4-react-redux" class="headerlink" title="8.4 react-redux"></a>8.4 react-redux</h3><h4 id="8-4-1-理解"><a href="#8-4-1-理解" class="headerlink" title="8.4.1 理解"></a>8.4.1 理解</h4><ol><li>一个 react 插件库</li><li>专门用来简化 react 应用中使用的 redux</li></ol><h4 id="8-4-2-React-Redux-将所有组件分成两大类"><a href="#8-4-2-React-Redux-将所有组件分成两大类" class="headerlink" title="8.4.2 React-Redux 将所有组件分成两大类"></a>8.4.2 React-Redux 将所有组件分成两大类</h4><p>1.UI 组件</p><ul><li><p>只负责 UI 的呈现，不带有任何业务逻辑</p></li><li><p>通过 props 接收数据（一般数据和函数）</p></li><li><p><strong>不使用任何 Redux 的 API</strong></p></li><li><p><strong>一般保存在 components 文件夹下</strong></p><p>2.容器组件</p></li><li><p>负责管理数据和业务逻辑，不负责 UI 的呈现</p></li><li><p><strong>使用 Redux 的 API</strong></p></li><li><p><strong>一般保存在 containers 文件夹下</strong></p></li></ul><h4 id="8-4-3-相关-API"><a href="#8-4-3-相关-API" class="headerlink" title="8.4.3 相关 API"></a>8.4.3 相关 API</h4><p>1.<strong>Provider：让所有组件都可以得到 state 数据</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br>;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>2.<strong>connect()：用于包装 UI 组件生成容器组件</strong></p><p>将 UI 组件与 Redux 关联起来生成一个容器组件，为了向 UI 组件中传递 props 属性。</p><p>Provider 内部的组件想要获取到 redux 中的数据和方法，就必须要用 connect 进行一层包裹封装。内部轻松获得 state 的数据，并为 actionCreator 的函数调用 dispatch。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><br><span class="hljs-comment">// 用connect包装Counter组件再返回出去</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(<br>  mapStateToprops, <span class="hljs-comment">// 是个回调函数，将状态映射成属性，返回对象</span><br>  mapDispatchToProps <span class="hljs-comment">// 是个对象，包含actions中的方法（将在内部被转换成调用dispatch的函数）</span><br>)(<span class="hljs-title class_">Counter</span>)<br></code></pre></td></tr></table></figure><p>3.mapStateToprops()：将保存在 redux 中的数据（即 state 对象）转换为 UI 组件的标签属性 props</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> mapStateToprops = <span class="hljs-keyword">function</span> (<span class="hljs-params">state</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">value</span>: state,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.mapDispatchToProps()：将分发 action 的函数转换为 UI 组件的标签属性 props</p><p>可以直接指定为 actions 对象或包含多个 action 方法的对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 包含多个 action 方法的对象，mapDispatchToProps即&#123;increment, decrement&#125;</span><br><span class="hljs-keyword">import</span> &#123; increment, decrement &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../redux/actions&#x27;</span><br><span class="hljs-comment">// 或 指定为 actions 对象</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> mapDispatchToProps <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../redux/actions&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>问题</strong></p><p>1.redux 默认是<strong>不能进行异步处理的</strong></p><p>2.应用中又需要在 redux 中执行异步任务（ajax，定时器）</p><h3 id="8-5-redux-异步编程"><a href="#8-5-redux-异步编程" class="headerlink" title="8.5 redux 异步编程"></a>8.5 redux 异步编程</h3><p>下载 redux 插件（异步中间件）：npm install –save redux-thunk</p><p>store.js 中应用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-keyword">import</span> thunk <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-thunk&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(<br>  counter,<br>  <span class="hljs-title function_">applyMiddleware</span>(thunk) <span class="hljs-comment">// 应用异步中间件</span><br>)<br></code></pre></td></tr></table></figure><p>actions.js 中添加异步 action</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">incrementAsync</span> = number =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">dispatch</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 异步action会返回一个函数</span><br>    <span class="hljs-comment">// 异步的代码必须被封装到action中</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 1s后才去分发一个同步的action（dispatch一个同步action）</span><br>      <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">increment</span>(number))<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在 UI 组件的 propTypes 和容器组件的 connect() 中添加对应的异步 action 即可。</p><h3 id="8-6-redux-调试工具"><a href="#8-6-redux-调试工具" class="headerlink" title="8.6 redux 调试工具"></a>8.6 redux 调试工具</h3><p>安装 chrome 浏览器插件：redux-devtools</p><blockquote><p>遇到的问题：下载 2.15.1 老版本后报错：<em>TypeError:</em> <em>Cannot</em> <em>read</em> <em>property</em> <em>‘state’</em> <em>of</em> undefined，下载最新版本 2.17.0 后解决</p></blockquote><p>要想能使用调试工具还需要在项目中下载工具依赖包：npm install –save-dev redux-devtools-extension</p><p>编码 store.js：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; composeWithDevTools &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-devtools-extension&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(counter, <span class="hljs-title function_">composeWithDevTools</span>(<span class="hljs-title function_">applyMiddleware</span>(thunk)))<br></code></pre></td></tr></table></figure><h3 id="8-7-纯函数和高阶函数"><a href="#8-7-纯函数和高阶函数" class="headerlink" title="8.7 纯函数和高阶函数"></a>8.7 纯函数和高阶函数</h3><h4 id="8-8-1-纯函数"><a href="#8-8-1-纯函数" class="headerlink" title="8.8.1 纯函数"></a>8.8.1 纯函数</h4><p>1.一类特别的函数：只要是同样的输入，必定得到同样的输出</p><p>2.必须遵守以下一些约束</p><p>a. 不得改写参数</p><p>b. 不能调用系统 I/O 的 API</p><p>c. 能调用 Date.now() 或者 Math.random() 等不纯的方法</p><p>3.reducer 函数必须是一个纯函数</p><h4 id="8-8-2-高阶函数"><a href="#8-8-2-高阶函数" class="headerlink" title="8.8.2 高阶函数"></a>8.8.2 高阶函数</h4><p>1.理解：一类特别的函数</p><p>a. 情况 1：参数是函数</p><p>b. 情况 2：返回是函数</p><p>2.常见的高阶函数：</p><p>a. 定时器设置函数</p><p>b. 数组的 map()/filter()/reduce()/find()/bind()</p><p>c. react-redux 中的 connect 函数</p><p>3.作用：能实现更加动态，更加可扩展的功能</p>]]></content>
    
    
    <categories>
      
      <category>react</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Webpack入门-学习总结</title>
    <link href="/blog/2020/12/10/webpack/webpackStudy/"/>
    <url>/blog/2020/12/10/webpack/webpackStudy/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Webpack-简介"><a href="#一、Webpack-简介" class="headerlink" title="一、Webpack 简介"></a>一、Webpack 简介</h1><h2 id="1-1-webpack-是什么"><a href="#1-1-webpack-是什么" class="headerlink" title="1.1 webpack 是什么"></a>1.1 webpack 是什么</h2><p>webpack 是一种<strong>前端资源构建工具</strong>，一个静态模块打包器(module bundler)。</p><p>在 webpack 看来, 前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理。<br>它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)。</p><h2 id="1-2-webpack-五个核心概念"><a href="#1-2-webpack-五个核心概念" class="headerlink" title="1.2 webpack 五个核心概念"></a>1.2 webpack 五个核心概念</h2><h4 id="1-2-1-Entry"><a href="#1-2-1-Entry" class="headerlink" title="1.2.1 Entry"></a>1.2.1 Entry</h4><p>入口(Entry)：指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。</p><h4 id="1-2-2-Output"><a href="#1-2-2-Output" class="headerlink" title="1.2.2 Output"></a>1.2.2 Output</h4><p>输出(Output)：指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p><h4 id="1-2-3-Loader"><a href="#1-2-3-Loader" class="headerlink" title="1.2.3 Loader"></a>1.2.3 Loader</h4><p>Loader：让 webpack 能够去处理那些非 JS 的文件，比如样式文件、图片文件(webpack 自身只理解<br>JS)</p><h4 id="1-2-4-Plugins"><a href="#1-2-4-Plugins" class="headerlink" title="1.2.4 Plugins"></a>1.2.4 Plugins</h4><p>插件(Plugins)：可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，<br>一直到重新定义环境中的变量等。</p><h4 id="1-2-5-Mode"><a href="#1-2-5-Mode" class="headerlink" title="1.2.5 Mode"></a>1.2.5 Mode</h4><p>模式(Mode)：指示 webpack 使用相应模式的配置。</p><table><thead><tr><th>选项</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>development</td><td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</td><td>能让代码本地调试运行的环境</td></tr><tr><td>production</td><td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。</td><td>能让代码优化上线运行的环境</td></tr></tbody></table><h1 id="二、Webpack-初体验"><a href="#二、Webpack-初体验" class="headerlink" title="二、Webpack 初体验"></a>二、Webpack 初体验</h1><h2 id="2-1-初始化配置"><a href="#2-1-初始化配置" class="headerlink" title="2.1 初始化配置"></a>2.1 初始化配置</h2><ol><li><p>初始化 package.json：npm init</p></li><li><p>下载安装 webpack：(webpack4 以上的版本需要全局/本地都安装 webpack-cli)</p><p>全局安装：cnpm i webpack webpack-cli -g</p><p>本地安装：cnpm i webpack webpack-cli -D</p></li></ol><h2 id="2-2-编译打包应用"><a href="#2-2-编译打包应用" class="headerlink" title="2.2 编译打包应用"></a>2.2 编译打包应用</h2><p>创建 src 下的 js 等文件后，不需要配置 webpack.config.js 文件，在命令行就可以编译打包。</p><p>指令：</p><ul><li><p>开发环境：webpack ./src/index.js -o ./build/built.js –mode=development</p><p>webpack 会以 ./src/index.js 为入口文件开始打包，打包后输出到 ./build/built.js 整体打包环境，是开发环境</p></li><li><p>生产环境：webpack ./src/index.js -o ./build/built.js –mode=production</p><p>webpack 会以 ./src/index.js 为入口文件开始打包，打包后输出到 ./build/built.js 整体打包环境，是生产环境</p></li></ul><p>结论：</p><ol><li>webpack 本身能处理 js/json 资源，不能处理 css/img 等其他资源</li><li>生产环境和开发环境将 ES6 模块化编译成浏览器能识别的模块化，但是不能处理 ES6 的基本语法转化为 ES5（需要借助 loader）</li><li>生产环境比开发环境多一个压缩 js 代码</li></ol><h1 id="三、Webpack-开发环境的基本配置"><a href="#三、Webpack-开发环境的基本配置" class="headerlink" title="三、Webpack 开发环境的基本配置"></a>三、Webpack 开发环境的基本配置</h1><p>webpack.config.js 是 webpack 的配置文件。</p><p>作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）</p><p>所有构建工具都是基于 nodejs 平台运行的，模块化默认采用 commonjs。</p><p>开发环境配置主要是为了能让代码运行。主要考虑以下几个方面：</p><ul><li>打包样式资源</li><li>打包 html 资源</li><li>打包图片资源</li><li>打包其他资源</li><li>devServer</li></ul><p>下面是一个简单的开发环境 webpack.confg.js 配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// resolve用来拼接绝对路径的方法</span><br><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>) <span class="hljs-comment">// 引用plugin</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// webpack配置</span><br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>, <span class="hljs-comment">// 入口起点</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-comment">// 输出</span><br>    <span class="hljs-comment">// 输出文件名</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;js/build.js&#x27;</span>,<br>    <span class="hljs-comment">// __dirname是nodejs的变量，代表当前文件的目录绝对路径</span><br>    <span class="hljs-attr">path</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>), <span class="hljs-comment">// 输出路径，所有资源打包都会输出到这个文件夹下</span><br>  &#125;,<br>  <span class="hljs-comment">// loader配置</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">// 详细的loader配置</span><br>      <span class="hljs-comment">// 不同文件必须配置不同loader处理</span><br>      &#123;<br>        <span class="hljs-comment">// 匹配哪些文件</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>        <span class="hljs-comment">// 使用哪些loader进行处理</span><br>        <span class="hljs-attr">use</span>: [<br>          <span class="hljs-comment">// use数组中loader执行顺序：从右到左，从下到上，依次执行(先执行css-loader)</span><br>          <span class="hljs-comment">// style-loader：创建style标签，将js中的样式资源插入进去，添加到head中生效</span><br>          <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>          <span class="hljs-comment">// css-loader：将css文件变成commonjs模块加载到js中，里面内容是样式字符串</span><br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>          <span class="hljs-comment">// less-loader：将less文件编译成css文件，需要下载less-loader和less</span><br>          <span class="hljs-string">&#x27;less-loader&#x27;</span>,<br>        ],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// url-loader：处理图片资源，问题：默认处理不了html中的img图片</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpg|png|gif)$/</span>,<br>        <span class="hljs-comment">// 需要下载 url-loader file-loader</span><br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-comment">// 图片大小小于8kb，就会被base64处理，优点：减少请求数量（减轻服务器压力），缺点：图片体积会更大（文件请求速度更慢）</span><br>          <span class="hljs-comment">// base64在客户端本地解码所以会减少服务器压力，如果图片过大还采用base64编码会导致cpu调用率上升，网页加载时变卡</span><br>          <span class="hljs-attr">limit</span>: <span class="hljs-number">8</span> * <span class="hljs-number">1024</span>,<br>          <span class="hljs-comment">// 给图片重命名，[hash:10]：取图片的hash的前10位，[ext]：取文件原来扩展名</span><br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>          <span class="hljs-comment">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是conmonjs，解析时会出问题：[object Module]</span><br>          <span class="hljs-comment">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span><br>          <span class="hljs-attr">esModule</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;imgs&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.html$/</span>,<br>        <span class="hljs-comment">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span><br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;html-loader&#x27;</span>,<br>      &#125;,<br>      <span class="hljs-comment">// 打包其他资源(除了html/js/css资源以外的资源)</span><br>      &#123;<br>        <span class="hljs-comment">// 排除html|js|css|less|jpg|png|gif文件</span><br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,<br>        <span class="hljs-comment">// file-loader：处理其他文件</span><br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>          <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;media&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-comment">// plugin的配置</span><br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// html-webpack-plugin：默认会创建一个空的html文件，自动引入打包输出的所有资源（JS/CSS）</span><br>    <span class="hljs-comment">// 需要有结构的HTML文件可以加一个template</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-comment">// 复制这个./src/index.html文件，并自动引入打包输出的所有资源（JS/CSS）</span><br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  <span class="hljs-comment">// 模式</span><br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>, <span class="hljs-comment">// 开发模式</span><br>  <span class="hljs-comment">// 开发服务器 devServer：用来自动化，不用每次修改后都重新输入webpack打包一遍（自动编译，自动打开浏览器，自动刷新浏览器）</span><br>  <span class="hljs-comment">// 特点：只会在内存中编译打包，不会有任何输出（不会像之前那样在外面看到打包输出的build包，而是在内存中，关闭后会自动删除）</span><br>  <span class="hljs-comment">// 启动devServer指令为：npx webpack-dev-server</span><br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-comment">// 项目构建后路径</span><br>    <span class="hljs-attr">contentBase</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>    <span class="hljs-comment">// 启动gzip压缩</span><br>    <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 端口号</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,<br>    <span class="hljs-comment">// 自动打开浏览器</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，大部分配置都在注释中给出解释。</p><ul><li><p>运行项目的两个指令：<br>webpack 会将打包结果输出出去（build 文件夹）<br>npx webpack-dev-server 只会在内存中编译打包，没有输出</p></li><li><p>loader 和 plugin 的不同：（plugin 一定要先引入才能使用）</p><p>loader：1. 下载 2. 使用（配置 loader）</p><p>plugins：1.下载 2. 引入 3. 使用</p></li></ul><h1 id="四、Webpack-生产环境的基本配置"><a href="#四、Webpack-生产环境的基本配置" class="headerlink" title="四、Webpack 生产环境的基本配置"></a>四、Webpack 生产环境的基本配置</h1><p>而生产环境的配置需要考虑以下几个方面：</p><ul><li>提取 css 成单独文件</li><li>css 兼容性处理</li><li>压缩 css</li><li>js 语法检查</li><li>js 兼容性处理</li><li>js 压缩</li><li>html 压缩</li></ul><p>下面是一个基本的生产环境下的 webpack.config.js 配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractorPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">OptimiziCssAssetsWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;optimizi-css-assets-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-comment">// 定义node.js的环境变量，决定使用browserslist的哪个环境</span><br>process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> = <span class="hljs-string">&#x27;production&#x27;</span><br><br><span class="hljs-comment">// 复用loader的写法</span><br><span class="hljs-keyword">const</span> commonCssLoader = [<br>  <span class="hljs-comment">// 这个loader取代style-loader。作用：提取js中的css成单独文件然后通过link加载</span><br>  <span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>,<br>  <span class="hljs-comment">// css-loader：将css文件整合到js文件中</span><br>  <span class="hljs-comment">// 经过css-loader处理后，样式文件是在js文件中的</span><br>  <span class="hljs-comment">// 问题：1.js文件体积会很大2.需要先加载js再动态创建style标签，样式渲染速度就慢，会出现闪屏现象</span><br>  <span class="hljs-comment">// 解决：用MiniCssExtractPlugin.loader替代style-loader</span><br>  <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    postcss-loader：css兼容性处理：postcss --&gt; 需要安装：postcss-loader postcss-preset-env</span><br><span class="hljs-comment">    postcss需要通过package.json中browserslist里面的配置加载指定的css兼容性样式</span><br><span class="hljs-comment">    在package.json中定义browserslist：</span><br><span class="hljs-comment">    &quot;browserslist&quot;: &#123;</span><br><span class="hljs-comment">      // 开发环境 --&gt; 设置node环境变量：process.env.NODE_ENV = development</span><br><span class="hljs-comment">      &quot;development&quot;: [ // 只需要可以运行即可</span><br><span class="hljs-comment">        &quot;last 1 chrome version&quot;,</span><br><span class="hljs-comment">        &quot;last 1 firefox version&quot;,</span><br><span class="hljs-comment">        &quot;last 1 safari version&quot;</span><br><span class="hljs-comment">      ],</span><br><span class="hljs-comment">      // 生产环境。默认是生产环境</span><br><span class="hljs-comment">      &quot;production&quot;: [ // 需要满足绝大多数浏览器的兼容</span><br><span class="hljs-comment">        &quot;&gt;0.2%&quot;,</span><br><span class="hljs-comment">        &quot;not dead&quot;,</span><br><span class="hljs-comment">        &quot;not op_mini all&quot;</span><br><span class="hljs-comment">      ]</span><br><span class="hljs-comment">    &#125;,</span><br><span class="hljs-comment">  */</span><br>  &#123;<br>    <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,<br>    <span class="hljs-attr">options</span>: &#123;<br>      <span class="hljs-attr">ident</span>: <span class="hljs-string">&#x27;postcss&#x27;</span>, <span class="hljs-comment">// 基本写法</span><br>      <span class="hljs-attr">plugins</span>: <span class="hljs-function">() =&gt;</span> [<br>        <span class="hljs-comment">// postcss的插件</span><br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-preset-env&#x27;</span>)(),<br>      ],<br>    &#125;,<br>  &#125;,<br>]<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-attr">use</span>: [...commonCssLoader],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>        <span class="hljs-attr">use</span>: [...commonCssLoader, <span class="hljs-string">&#x27;less-loader&#x27;</span>],<br>      &#125;,<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        正常来讲，一个文件只能被一个loader处理</span><br><span class="hljs-comment">        当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序</span><br><span class="hljs-comment">        先执行eslint再执行babel（用enforce）</span><br><span class="hljs-comment">      */</span><br>      &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">          js的语法检查： 需要下载 eslint-loader eslint</span><br><span class="hljs-comment">          注意：只检查自己写的源代码，第三方的库是不用检查的</span><br><span class="hljs-comment">          airbnb(一个流行的js风格) --&gt; 需要下载 eslint-config-airbnb-base eslint-plugin-import</span><br><span class="hljs-comment">          设置检查规则：</span><br><span class="hljs-comment">            package.json中eslintConfig中设置</span><br><span class="hljs-comment">              &quot;eslintConfig&quot;: &#123;</span><br><span class="hljs-comment">                &quot;extends&quot;: &quot;airbnb-base&quot;， // 继承airbnb的风格规范</span><br><span class="hljs-comment">                &quot;env&quot;: &#123;</span><br><span class="hljs-comment">                  &quot;browser&quot;: true // 可以使用浏览器中的全局变量(使用window不会报错)</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">              &#125;</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>, <span class="hljs-comment">// 忽略node_modules</span><br>        <span class="hljs-attr">enforce</span>: <span class="hljs-string">&#x27;pre&#x27;</span>, <span class="hljs-comment">// 优先执行</span><br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-comment">// 自动修复</span><br>          <span class="hljs-attr">fix</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>      &#125;,<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        js兼容性处理：需要下载 babel-loader @babel/core</span><br><span class="hljs-comment">          1. 基本js兼容性处理 --&gt; @babel/preset-env</span><br><span class="hljs-comment">            问题：只能转换基本语法，如promise高级语法不能转换</span><br><span class="hljs-comment">          2. 全部js兼容性处理 --&gt; @babel/polyfill</span><br><span class="hljs-comment">            问题：只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了</span><br><span class="hljs-comment">          3. 需要做兼容性处理的就做：按需加载  --&gt; core-js</span><br><span class="hljs-comment">      */</span><br>      &#123;<br>        <span class="hljs-comment">// 第三种方式：按需加载</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-comment">// 预设：指示babel做怎样的兼容性处理</span><br>          <span class="hljs-attr">presets</span>: [<br>            <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>, <span class="hljs-comment">// 基本预设</span><br>            &#123;<br>              <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&#x27;usage&#x27;</span>, <span class="hljs-comment">//按需加载</span><br>              <span class="hljs-attr">corejs</span>: &#123; <span class="hljs-attr">version</span>: <span class="hljs-number">3</span> &#125;, <span class="hljs-comment">// 指定core-js版本</span><br>              <span class="hljs-attr">targets</span>: &#123;<br>                <span class="hljs-comment">// 指定兼容到什么版本的浏览器</span><br>                <span class="hljs-attr">chrome</span>: <span class="hljs-string">&#x27;60&#x27;</span>,<br>                <span class="hljs-attr">firefox</span>: <span class="hljs-string">&#x27;50&#x27;</span>,<br>                <span class="hljs-attr">ie</span>: <span class="hljs-string">&#x27;9&#x27;</span>,<br>                <span class="hljs-attr">safari</span>: <span class="hljs-string">&#x27;10&#x27;</span>,<br>                <span class="hljs-attr">edge</span>: <span class="hljs-string">&#x27;17&#x27;</span>,<br>              &#125;,<br>            &#125;,<br>          ],<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 图片处理</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpg|png|gif)/</span>,<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">limit</span>: <span class="hljs-number">8</span> * <span class="hljs-number">1024</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>          <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;imgs&#x27;</span>,<br>          <span class="hljs-attr">esModule</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 关闭url-loader默认使用的es6模块化解析</span><br>        &#125;,<br>      &#125;,<br>      <span class="hljs-comment">// html中的图片处理</span><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.html$/</span>,<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;html-loader&#x27;</span>,<br>      &#125;,<br>      <span class="hljs-comment">// 处理其他文件</span><br>      &#123;<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;media&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123;<br>      <span class="hljs-comment">// 对输出的css文件进行重命名</span><br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;css/built.css&#x27;</span>,<br>    &#125;),<br>    <span class="hljs-comment">// 压缩css</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimiziCssAssetsWebpackPlugin</span>(),<br>    <span class="hljs-comment">// HtmlWebpackPlugin：html文件的打包和压缩处理</span><br>    <span class="hljs-comment">// 通过这个插件会自动将单独打包的样式文件通过link标签引入</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>      <span class="hljs-comment">// 压缩html代码</span><br>      <span class="hljs-attr">minify</span>: &#123;<br>        <span class="hljs-comment">// 移除空格</span><br>        <span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// 移除注释</span><br>        <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>,<br>      &#125;,<br>    &#125;),<br>  ],<br>  <span class="hljs-comment">// 生产环境下会自动压缩js代码</span><br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="五、Webpack-优化配置"><a href="#五、Webpack-优化配置" class="headerlink" title="五、Webpack 优化配置"></a>五、Webpack 优化配置</h1><h2 id="5-1-开发环境性能优化"><a href="#5-1-开发环境性能优化" class="headerlink" title="5.1 开发环境性能优化"></a>5.1 开发环境性能优化</h2><h3 id="5-1-1-HMR（模块热替换）"><a href="#5-1-1-HMR（模块热替换）" class="headerlink" title="5.1.1 HMR（模块热替换）"></a>5.1.1 HMR（模块热替换）</h3><p>HMR: hot module replacement 热模块替换 / 模块热替换</p><p>作用：一个模块发生变化，只会重新打包构建这一个模块（而不是打包所有模块） ，极大提升构建速度</p><p>代码：只需要在 devServer 中设置 hot 为 true，就会自动开启 HMR 功能（只能在开发模式下使用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devServer</span>: &#123;<br>  <span class="hljs-attr">contentBase</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,<br>  <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 开启HMR功能</span><br>  <span class="hljs-comment">// 当修改了webpack配置，新配置要想生效，必须重启webpack服务</span><br>  <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>每种文件实现热模块替换的情况：</p><ul><li><p>样式文件：可以使用 HMR 功能，因为开发环境下使用的 style-loader 内部默认实现了热模块替换功能</p></li><li><p>js 文件：默认不能使用 HMR 功能（修改一个 js 模块所有 js 模块都会刷新）</p><p>–&gt; 实现 HMR 需要修改 js 代码（添加支持 HMR 功能的代码）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 绑定</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>.<span class="hljs-property">hot</span>) &#123;<br>  <span class="hljs-comment">// 一旦 module.hot 为true，说明开启了HMR功能。 --&gt; 让HMR功能代码生效</span><br>  <span class="hljs-variable language_">module</span>.<span class="hljs-property">hot</span>.<span class="hljs-title function_">accept</span>(<span class="hljs-string">&#x27;./print.js&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 方法会监听 print.js 文件的变化，一旦发生变化，只有这个模块会重新打包构建，其他模块不会。</span><br>    <span class="hljs-comment">// 会执行后面的回调函数</span><br>    <span class="hljs-title function_">print</span>()<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：HMR 功能对 js 的处理，只能处理非入口 js 文件的其他文件。</p></li><li><p>html 文件: 默认不能使用 HMR 功能（html 不用做 HMR 功能，因为只有一个 html 文件，不需要再优化）</p><p>使用 HMR 会导致问题：html 文件不能热更新了（不会自动打包构建）</p><p>解决：修改 entry 入口，将 html 文件引入（这样 html 修改整体刷新）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">entry</span>: [<span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>, <span class="hljs-string">&#x27;./src/index.html&#x27;</span>]<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-1-2-source-map"><a href="#5-1-2-source-map" class="headerlink" title="5.1.2 source-map"></a>5.1.2 source-map</h3><p>source-map：一种提供<strong>源代码到构建后代码的映射</strong>的技术 （如果构建后代码出错了，通过映射可以追踪源代码错误）</p><p>参数：<code>[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</code></p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;eval-source-map&#x27;</span><br></code></pre></td></tr></table></figure><p>可选方案：[生成 source-map 的位置|给出的错误代码信息]</p><ul><li>source-map：外部，错误代码准确信息 和 源代码的错误位置</li><li>inline-source-map：内联，只生成一个内联 source-map，错误代码准确信息 和 源代码的错误位置</li><li>hidden-source-map：外部，错误代码错误原因，但是没有错误位置（为了隐藏源代码），不能追踪源代码错误，只能提示到构建后代码的错误位置</li><li>eval-source-map：内联，每一个文件都生成对应的 source-map，都在 eval 中，错误代码准确信息 和 源代码的错误位</li><li>nosources-source-map：外部，错误代码准确信息，但是没有任何源代码信息（为了隐藏源代码）</li><li>cheap-source-map：外部，错误代码准确信息 和 源代码的错误位置，只能把错误精确到整行，忽略列</li><li>cheap-module-source-map：外部，错误代码准确信息 和 源代码的错误位置，module 会加入 loader 的 source-map</li></ul><p>内联 和 外部的区别：1. 外部生成了文件，内联没有 2. 内联构建速度更快</p><p>开发/生产环境可做的选择：</p><p><strong>开发环境</strong>：需要考虑速度快，调试更友好</p><ul><li>速度快( eval &gt; inline &gt; cheap &gt;… )<ol><li>eval-cheap-souce-map</li><li>eval-source-map</li></ol></li><li>调试更友好<ol><li>souce-map</li><li>cheap-module-souce-map</li><li>cheap-souce-map</li></ol></li></ul><p><strong>最终得出最好的两种方案 –&gt; eval-source-map（完整度高，内联速度快） / eval-cheap-module-souce-map（错误提示忽略列但是包含其他信息，内联速度快）</strong></p><p><strong>生产环境</strong>：需要考虑源代码要不要隐藏，调试要不要更友好</p><ul><li>内联会让代码体积变大，所以在生产环境不用内联</li><li>隐藏源代码<ol><li>nosources-source-map 全部隐藏</li><li>hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</li></ol></li></ul><p><strong>最终得出最好的两种方案 –&gt; source-map（最完整） / cheap-module-souce-map（错误提示一整行忽略列）</strong></p><h2 id="5-2-生产环境性能优化"><a href="#5-2-生产环境性能优化" class="headerlink" title="5.2 生产环境性能优化"></a>5.2 生产环境性能优化</h2><h3 id="5-2-1-优化打包构建速度"><a href="#5-2-1-优化打包构建速度" class="headerlink" title="5.2.1 优化打包构建速度"></a>5.2.1 优化打包构建速度</h3><h4 id="5-2-1-1-oneOf"><a href="#5-2-1-1-oneOf" class="headerlink" title="5.2.1.1 oneOf"></a>5.2.1.1 oneOf</h4><p>oneOf：匹配到 loader 后就不再向后进行匹配，优化生产环境的打包构建速度</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [<br>    &#123;<br>      <span class="hljs-comment">// js 语法检查</span><br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>      <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>      <span class="hljs-comment">// 优先执行</span><br>      <span class="hljs-attr">enforce</span>: <span class="hljs-string">&#x27;pre&#x27;</span>,<br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,<br>      <span class="hljs-attr">options</span>: &#123;<br>        <span class="hljs-attr">fix</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-comment">// oneOf 优化生产环境的打包构建速度</span><br>      <span class="hljs-comment">// 以下loader只会匹配一个（匹配到了后就不会再往下匹配了）</span><br>      <span class="hljs-comment">// 注意：不能有两个配置处理同一种类型文件（所以把eslint-loader提取出去放外面）</span><br>      <span class="hljs-attr">oneOf</span>: [<br>        &#123;<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>          <span class="hljs-attr">use</span>: [...commonCssLoader]<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>          <span class="hljs-attr">use</span>: [...commonCssLoader, <span class="hljs-string">&#x27;less-loader&#x27;</span>]<br>        &#125;,<br>        &#123;<br>          <span class="hljs-comment">// js 兼容性处理</span><br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>          <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-attr">presets</span>: [<br>              [<br>                <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>,<br>                &#123;<br>                  <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&#x27;usage&#x27;</span>,<br>                  <span class="hljs-attr">corejs</span>: &#123;<span class="hljs-attr">version</span>: <span class="hljs-number">3</span>&#125;,<br>                  <span class="hljs-attr">targets</span>: &#123;<br>                    <span class="hljs-attr">chrome</span>: <span class="hljs-string">&#x27;60&#x27;</span>,<br>                    <span class="hljs-attr">firefox</span>: <span class="hljs-string">&#x27;50&#x27;</span><br>                  &#125;<br>                &#125;<br>              ]<br>            ]<br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpg|png|gif)/</span>,<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-attr">limit</span>: <span class="hljs-number">8</span> * <span class="hljs-number">1024</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>            <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;imgs&#x27;</span>,<br>            <span class="hljs-attr">esModule</span>: <span class="hljs-literal">false</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.html$/</span>,<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;html-loader&#x27;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;media&#x27;</span><br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  ]<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="5-2-1-2-babel-缓存"><a href="#5-2-1-2-babel-缓存" class="headerlink" title="5.2.1.2 babel 缓存"></a>5.2.1.2 babel 缓存</h4><p><strong>babel 缓存</strong>：类似 HMR，将 babel 处理后的资源缓存起来（哪里的 js 改变就更新哪里，其他 js 还是用之前缓存的资源），让第二次打包构建速度更快</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>  <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>  <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>  <span class="hljs-attr">options</span>: &#123;<br>    <span class="hljs-attr">presets</span>: [<br>      [<br>        <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>,<br>        &#123;<br>          <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&#x27;usage&#x27;</span>,<br>          <span class="hljs-attr">corejs</span>: &#123; <span class="hljs-attr">version</span>: <span class="hljs-number">3</span> &#125;,<br>          <span class="hljs-attr">targets</span>: &#123;<br>            <span class="hljs-attr">chrome</span>: <span class="hljs-string">&#x27;60&#x27;</span>,<br>            <span class="hljs-attr">firefox</span>: <span class="hljs-string">&#x27;50&#x27;</span><br>          &#125;<br>        &#125;<br>      ]<br>    ],<br>    <span class="hljs-comment">// 开启babel缓存</span><br>    <span class="hljs-comment">// 第二次构建时，会读取之前的缓存</span><br>    <span class="hljs-attr">cacheDirectory</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p><strong>文件资源缓存</strong></p><p>文件名不变，就不会重新请求，而是再次用之前缓存的资源</p><p>1.hash: 每次 wepack 打包时会生成一个唯一的 hash 值。</p><p>问题：重新打包，所有文件的 hsah 值都改变，会导致所有缓存失效。（可能只改动了一个文件）</p><p>2.chunkhash：根据 chunk 生成的 hash 值。来源于同一个 chunk 的 hash 值一样</p><p>问题：js 和 css 来自同一个 chunk，hash 值是一样的（因为 css-loader 会将 css 文件加载到 js 中，所以同属于一个 chunk）</p><p>3.contenthash: 根据文件的内容生成 hash 值。不同文件 hash 值一定不一样(文件内容修改，文件名里的 hash 才会改变)</p><p>修改 css 文件内容，打包后的 css 文件名 hash 值就改变，而 js 文件没有改变 hash 值就不变，这样 css 和 js 缓存就会分开判断要不要重新请求资源 –&gt; 让代码上线运行缓存更好使用</p><h4 id="5-2-1-3-多进程打包"><a href="#5-2-1-3-多进程打包" class="headerlink" title="5.2.1.3 多进程打包"></a>5.2.1.3 多进程打包</h4><p>多进程打包：某个任务消耗时间较长会卡顿，多进程可以同一时间干多件事，效率更高。</p><p>优点是提升打包速度，缺点是每个进程的开启和交流都会有开销（babel-loader 消耗时间最久，所以使用 thread-loader 针对其进行优化）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>  <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>  <span class="hljs-attr">use</span>: [<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      thread-loader会对其后面的loader（这里是babel-loader）开启多进程打包。</span><br><span class="hljs-comment">      进程启动大概为600ms，进程通信也有开销。(启动的开销比较昂贵，不要滥用)</span><br><span class="hljs-comment">      只有工作消耗时间比较长，才需要多进程打包</span><br><span class="hljs-comment">    */</span><br>    &#123;<br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;thread-loader&#x27;</span>,<br>      <span class="hljs-attr">options</span>: &#123;<br>        <span class="hljs-attr">workers</span>: <span class="hljs-number">2</span> <span class="hljs-comment">// 进程2个</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>      <span class="hljs-attr">options</span>: &#123;<br>        <span class="hljs-attr">presets</span>: [<br>          [<br>            <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>,<br>            &#123;<br>              <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&#x27;usage&#x27;</span>,<br>              <span class="hljs-attr">corejs</span>: &#123; <span class="hljs-attr">version</span>: <span class="hljs-number">3</span> &#125;,<br>              <span class="hljs-attr">targets</span>: &#123;<br>                <span class="hljs-attr">chrome</span>: <span class="hljs-string">&#x27;60&#x27;</span>,<br>                <span class="hljs-attr">firefox</span>: <span class="hljs-string">&#x27;50&#x27;</span><br>              &#125;<br>            &#125;<br>          ]<br>        ],<br>        <span class="hljs-comment">// 开启babel缓存</span><br>        <span class="hljs-comment">// 第二次构建时，会读取之前的缓存</span><br>        <span class="hljs-attr">cacheDirectory</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="5-2-1-4-externals"><a href="#5-2-1-4-externals" class="headerlink" title="5.2.1.4 externals"></a>5.2.1.4 externals</h4><p>externals：让某些库不打包，通过 cdn 引入</p><p>webpack.config.js 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">externals</span>: &#123;<br>  <span class="hljs-comment">// 拒绝jQuery被打包进来(通过cdn引入，速度会快一些)</span><br>  <span class="hljs-comment">// 忽略的库名 -- npm包名</span><br>  <span class="hljs-attr">jquery</span>: <span class="hljs-string">&#x27;jQuery&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>需要在 index.html 中通过 cdn 引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="5-2-1-5-dll"><a href="#5-2-1-5-dll" class="headerlink" title="5.2.1.5 dll"></a>5.2.1.5 dll</h4><p>dll：让某些库单独打包，后直接引入到 build 中。可以在 code split 分割出 node_modules 后再用 dll 更细的分割，优化代码运行的性能。</p><p>webpack.dll.js 配置：(将 jquery 单独打包)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  node_modules的库会打包到一起，但是很多库的时候打包输出的js文件就太大了</span><br><span class="hljs-comment">  使用dll技术，对某些库（第三方库：jquery、react、vue...）进行单独打包</span><br><span class="hljs-comment">  当运行webpack时，默认查找webpack.config.js配置文件</span><br><span class="hljs-comment">  需求：需要运行webpack.dll.js文件</span><br><span class="hljs-comment">    --&gt; webpack --config webpack.dll.js（运行这个指令表示以这个配置文件打包）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-comment">// 最终打包生成的[name] --&gt; jquery</span><br>    <span class="hljs-comment">// [&#x27;jquery] --&gt; 要打包的库是jquery</span><br>    <span class="hljs-attr">jquery</span>: [<span class="hljs-string">&#x27;jquery&#x27;</span>],<br>  &#125;,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-comment">// 输出出口指定</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].js&#x27;</span>, <span class="hljs-comment">// name就是jquery</span><br>    <span class="hljs-attr">path</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dll&#x27;</span>), <span class="hljs-comment">// 打包到dll目录下</span><br>    <span class="hljs-attr">library</span>: <span class="hljs-string">&#x27;[name]_[hash]&#x27;</span>, <span class="hljs-comment">// 打包的库里面向外暴露出去的内容叫什么名字</span><br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// 打包生成一个manifest.json --&gt; 提供jquery的映射关系（告诉webpack：jquery之后不需要再打包和暴露内容的名称）</span><br>    <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">DllPlugin</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[name]_[hash]&#x27;</span>, <span class="hljs-comment">// 映射库的暴露的内容名称</span><br>      <span class="hljs-attr">path</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dll/manifest.json&#x27;</span>), <span class="hljs-comment">// 输出文件路径</span><br>    &#125;),<br>  ],<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>webpack.config.js 配置：(告诉 webpack 不需要再打包 jquery，并将之前打包好的 jquery 跟其他打包好的资源一同输出到 build 目录下)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入插件</span><br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">AddAssetHtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;add-asset-html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// plugins中配置：</span><br><span class="hljs-attr">plugins</span>: [<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span><br>  &#125;),<br>  <span class="hljs-comment">// 告诉webpack哪些库不参与打包，同时使用时的名称也得变</span><br>  <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">DllReferencePlugin</span>(&#123;<br>    <span class="hljs-attr">manifest</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dll/manifest.json&#x27;</span>)<br>  &#125;),<br>  <span class="hljs-comment">// 将某个文件打包输出到build目录下，并在html中自动引入该资源</span><br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddAssetHtmlWebpackPlugin</span>(&#123;<br>    <span class="hljs-attr">filepath</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dll/jquery.js&#x27;</span>)<br>  &#125;)<br>],<br></code></pre></td></tr></table></figure><h3 id="5-2-2-优化代码运行的性能"><a href="#5-2-2-优化代码运行的性能" class="headerlink" title="5.2.2 优化代码运行的性能"></a>5.2.2 优化代码运行的性能</h3><h4 id="5-2-2-1-缓存"><a href="#5-2-2-1-缓存" class="headerlink" title="5.2.2.1 缓存"></a>5.2.2.1 缓存</h4><h4 id="5-2-2-2-tree-shaking（树摇）"><a href="#5-2-2-2-tree-shaking（树摇）" class="headerlink" title="5.2.2.2 tree shaking（树摇）"></a>5.2.2.2 tree shaking（树摇）</h4><p>tree shaking：去除无用代码</p><p>前提：1. 必须使用 ES6 模块化 2. 开启 production 环境 （这样就自动会把无用代码去掉）</p><p>作用：减少代码体积</p><p>在 package.json 中配置：</p><p><code>&quot;sideEffects&quot;: false</code> 表示所有代码都没有副作用（都可以进行 tree shaking）</p><p>这样会导致的问题：可能会把 css / @babel/polyfill 文件干掉（副作用）</p><p>所以可以配置：<code>&quot;sideEffects&quot;: [&quot;*.css&quot;, &quot;*.less&quot;]</code> 不会对 css/less 文件 tree shaking 处理</p><h4 id="5-2-2-3-code-split（代码分割）"><a href="#5-2-2-3-code-split（代码分割）" class="headerlink" title="5.2.2.3 code split（代码分割）"></a>5.2.2.3 code split（代码分割）</h4><p>代码分割。将打包输出的一个大的 bundle.js 文件拆分成多个小文件，这样可以并行加载多个文件，比加载一个文件更快。</p><p>1.多入口拆分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-comment">// 多入口：有一个入口，最终输出就有一个bundle</span><br>    <span class="hljs-attr">index</span>: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>    <span class="hljs-attr">test</span>: <span class="hljs-string">&#x27;./src/js/test.js&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-comment">// [name]：取文件名</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;js/[name].[contenthash:10].js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>)<br>  &#125;,<br></code></pre></td></tr></table></figure><p>2.optimization：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span><br>    &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure><ul><li><p>将 node_modules 中的代码单独打包（大小超过 30kb）</p></li><li><p>自动分析多入口 chunk 中，有没有公共的文件。如果有会打包成单独一个 chunk(比如两个模块中都引入了 jquery 会被打包成单独的文件)（大小超过 30kb）</p><p>3.import 动态导入语法：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  通过js代码，让某个文件被单独打包成一个chunk</span><br><span class="hljs-comment">  import动态导入语法：能将某个文件单独打包(test文件不会和index打包在同一个文件而是单独打包)</span><br><span class="hljs-comment">  webpackChunkName:指定test单独打包后文件的名字</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;test&#x27; */</span> <span class="hljs-string">&#x27;./test&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; mul, count &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 文件加载成功~</span><br>    <span class="hljs-comment">// eslint-disable-next-line</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">mul</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>))<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// eslint-disable-next-line</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;文件加载失败~&#x27;</span>)<br>  &#125;)<br></code></pre></td></tr></table></figure><h4 id="5-2-2-4-lazy-loading（懒加载-预加载）"><a href="#5-2-2-4-lazy-loading（懒加载-预加载）" class="headerlink" title="5.2.2.4 lazy loading（懒加载/预加载）"></a>5.2.2.4 lazy loading（懒加载/预加载）</h4><p>1.懒加载：当文件需要使用时才加载（需要代码分割）。但是如果资源较大，加载时间就会较长，有延迟。</p><p>2.正常加载：可以认为是并行加载（同一时间加载多个文件）没有先后顺序，先加载了不需要的资源就会浪费时间。</p><p>3.预加载 prefetch（兼容性很差）：会在使用之前，提前加载。等其他资源加载完毕，浏览器空闲了，再偷偷加载这个资源。这样在使用时已经加载好了，速度很快。所以在懒加载的基础上加上预加载会更好。</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 将import的内容放在异步回调函数中使用，点击按钮，test.js才会被加载(不会重复加载)</span><br>  <span class="hljs-comment">// webpackPrefetch: true表示开启预加载</span><br>  <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;test&#x27;, webpackPrefetch: true */</span> <span class="hljs-string">&#x27;./test&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; mul &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">mul</span>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>))<br>  &#125;)<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./test&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; mul &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">mul</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>))<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-2-5-pwa（离线可访问技术）"><a href="#5-2-2-5-pwa（离线可访问技术）" class="headerlink" title="5.2.2.5 pwa（离线可访问技术）"></a>5.2.2.5 pwa（离线可访问技术）</h4><p>pwa：离线可访问技术（渐进式网络开发应用程序），使用 serviceworker 和 workbox 技术。优点是离线也能访问，缺点是兼容性差。</p><p>webpack.config.js 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">WorkboxWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;workbox-webpack-plugin&#x27;</span>) <span class="hljs-comment">// 引入插件</span><br><br><span class="hljs-comment">// plugins中加入：</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkboxWebpackPlugin</span>.<span class="hljs-title class_">GenerateSW</span>(&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1. 帮助serviceworker快速启动</span><br><span class="hljs-comment">    2. 删除旧的 serviceworker</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    生成一个 serviceworker 配置文件</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-attr">clientsClaim</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">skipWaiting</span>: <span class="hljs-literal">true</span>,<br>&#125;)<br></code></pre></td></tr></table></figure><p>index.js 中还需要写一段代码来激活它的使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  1. eslint不认识 window、navigator全局变量</span><br><span class="hljs-comment">    解决：需要修改package.json中eslintConfig配置</span><br><span class="hljs-comment">    &quot;env&quot;: &#123;</span><br><span class="hljs-comment">      &quot;browser&quot;: true // 支持浏览器端全局变量</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">  2. sw代码必须运行在服务器上</span><br><span class="hljs-comment">    --&gt; nodejs</span><br><span class="hljs-comment">    或--&gt;</span><br><span class="hljs-comment">      npm i serve -g</span><br><span class="hljs-comment">      serve -s build 启动服务器，将打包输出的build目录下所有资源作为静态资源暴露出去</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator) &#123;<br>  <span class="hljs-comment">// 处理兼容性问题</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    navigator.<span class="hljs-property">serviceWorker</span><br>      .<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;/service-worker.js&#x27;</span>) <span class="hljs-comment">// 注册serviceWorker</span><br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sw注册成功了~&#x27;</span>)<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sw注册失败了~&#x27;</span>)<br>      &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="六、Webpack-配置详情"><a href="#六、Webpack-配置详情" class="headerlink" title="六、Webpack 配置详情"></a>六、Webpack 配置详情</h1><h2 id="6-1-entry"><a href="#6-1-entry" class="headerlink" title="6.1 entry"></a>6.1 entry</h2><p>entry: 入口起点</p><ol><li><p>string –&gt; ‘./src/index.js’，单入口</p><p>打包形成一个 chunk。 输出一个 bundle 文件。此时 chunk 的名称默认是 main</p></li><li><p>array –&gt; [‘./src/index.js’, ‘./src/add.js’]，多入口</p><p>所有入口文件最终只会形成一个 chunk，输出出去只有一个 bundle 文件。</p><p>（一般只用在 HMR 功能中让 html 热更新生效）</p></li><li><p>object，多入口</p><p>有几个入口文件就形成几个 chunk，输出几个 bundle 文件，此时 chunk 的名称是 key 值</p></li></ol><p>–&gt; 特殊用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">entry</span>: &#123;<br>  <span class="hljs-comment">// 最终只会形成一个chunk, 输出出去只有一个bundle文件。</span><br>  <span class="hljs-attr">index</span>: [<span class="hljs-string">&#x27;./src/index.js&#x27;</span>, <span class="hljs-string">&#x27;./src/count.js&#x27;</span>],<br>  <span class="hljs-comment">// 形成一个chunk，输出一个bundle文件。</span><br>  <span class="hljs-attr">add</span>: <span class="hljs-string">&#x27;./src/add.js&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-2-output"><a href="#6-2-output" class="headerlink" title="6.2 output"></a>6.2 output</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">output</span>: &#123;<br>  <span class="hljs-comment">// 文件名称（指定名称+目录）</span><br>  <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;js/[name].js&#x27;</span>,<br>  <span class="hljs-comment">// 输出文件目录（将来所有资源输出的公共目录）</span><br>  <span class="hljs-attr">path</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  <span class="hljs-comment">// 所有资源引入公共路径前缀 --&gt; &#x27;imgs/a.jpg&#x27; --&gt; &#x27;/imgs/a.jpg&#x27;</span><br>  <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>  <span class="hljs-attr">chunkFilename</span>: <span class="hljs-string">&#x27;js/[name]_chunk.js&#x27;</span>, <span class="hljs-comment">// 指定非入口chunk的名称</span><br>  <span class="hljs-attr">library</span>: <span class="hljs-string">&#x27;[name]&#x27;</span>, <span class="hljs-comment">// 打包整个库后向外暴露的变量名</span><br>  <span class="hljs-attr">libraryTarget</span>: <span class="hljs-string">&#x27;window&#x27;</span> <span class="hljs-comment">// 变量名添加到哪个上 browser：window</span><br>  <span class="hljs-comment">// libraryTarget: &#x27;global&#x27; // node：global</span><br>  <span class="hljs-comment">// libraryTarget: &#x27;commonjs&#x27; // conmmonjs模块 exports</span><br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="6-3-module"><a href="#6-3-module" class="headerlink" title="6.3 module"></a>6.3 module</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [<br>    <span class="hljs-comment">// loader的配置</span><br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>      <span class="hljs-comment">// 多个loader用use</span><br>      <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>      <span class="hljs-comment">// 排除node_modules下的js文件</span><br>      <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>      <span class="hljs-comment">// 只检查src下的js文件</span><br>      <span class="hljs-attr">include</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;src&#x27;</span>),<br>      <span class="hljs-attr">enforce</span>: <span class="hljs-string">&#x27;pre&#x27;</span>, <span class="hljs-comment">// 优先执行</span><br>      <span class="hljs-comment">// enforce: &#x27;post&#x27;, // 延后执行</span><br>      <span class="hljs-comment">// 单个loader用loader</span><br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,<br>      <span class="hljs-attr">options</span>: &#123;&#125; <span class="hljs-comment">// 指定配置选项</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-comment">// 以下配置只会生效一个</span><br>      <span class="hljs-attr">oneOf</span>: []<br>    &#125;<br>  ]<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="6-4-resolve"><a href="#6-4-resolve" class="headerlink" title="6.4 resolve"></a>6.4 resolve</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 解析模块的规则</span><br><span class="hljs-attr">resolve</span>: &#123;<br>  <span class="hljs-comment">// 配置解析模块路径别名: 优点：当目录层级很复杂时，简写路径；缺点：路径不会提示</span><br>  <span class="hljs-attr">alias</span>: &#123;<br>    <span class="hljs-attr">$css</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;src/css&#x27;</span>)<br>  &#125;,<br>  <span class="hljs-comment">// 配置省略文件路径的后缀名（引入时就可以不写文件后缀名了）</span><br>  <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;.json&#x27;</span>, <span class="hljs-string">&#x27;.jsx&#x27;</span>, <span class="hljs-string">&#x27;.css&#x27;</span>],<br>  <span class="hljs-comment">// 告诉 webpack 解析模块应该去找哪个目录</span><br>  <span class="hljs-attr">modules</span>: [<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../../node_modules&#x27;</span>), <span class="hljs-string">&#x27;node_modules&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>这样配置后，引入文件就可以这样简写：<code>import &#39;$css/index&#39;;</code></p><h2 id="6-5-dev-server"><a href="#6-5-dev-server" class="headerlink" title="6.5 dev server"></a>6.5 dev server</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">devServer</span>: &#123;<br>  <span class="hljs-comment">// 运行代码所在的目录</span><br>  <span class="hljs-attr">contentBase</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  <span class="hljs-comment">// 监视contentBase目录下的所有文件，一旦文件变化就会reload</span><br>  <span class="hljs-attr">watchContentBase</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">watchOptions</span>: &#123;<br>    <span class="hljs-comment">// 忽略文件</span><br>    <span class="hljs-attr">ignored</span>: <span class="hljs-regexp">/node_modules/</span><br>  &#125;,<br>  <span class="hljs-comment">// 启动gzip压缩</span><br>  <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 端口号</span><br>  <span class="hljs-attr">port</span>: <span class="hljs-number">5000</span>,<br>  <span class="hljs-comment">// 域名</span><br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>  <span class="hljs-comment">// 自动打开浏览器</span><br>  <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 开启HMR功能</span><br>  <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 不要显示启动服务器日志信息</span><br>  <span class="hljs-attr">clientLogLevel</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>  <span class="hljs-comment">// 除了一些基本信息外，其他内容都不要显示</span><br>  <span class="hljs-attr">quiet</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 如果出错了，不要全屏提示</span><br>  <span class="hljs-attr">overlay</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">// 服务器代理，--&gt; 解决开发环境跨域问题</span><br>  <span class="hljs-attr">proxy</span>: &#123;<br>    <span class="hljs-comment">// 一旦devServer(5000)服务器接收到/api/xxx的请求，就会把请求转发到另外一个服务器3000</span><br>    <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br>      <span class="hljs-comment">// 发送请求时，请求路径重写：将/api/xxx --&gt; /xxx （去掉/api）</span><br>      <span class="hljs-attr">pathRewrite</span>: &#123;<br>        <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，跨域问题：同源策略中不同的协议、端口号、域名就会产生跨域。</p><p>正常的浏览器和服务器之间有跨域，但是服务器之间没有跨域。代码通过代理服务器运行，所以浏览器和代理服务器之间没有跨域，浏览器把请求发送到代理服务器上，代理服务器替你转发到另外一个服务器上，服务器之间没有跨域，所以请求成功。代理服务器再把接收到的响应响应给浏览器。这样就解决开发环境下的跨域问题。</p><h2 id="6-6-optimization"><a href="#6-6-optimization" class="headerlink" title="6.6 optimization"></a>6.6 optimization</h2><p><code>contenthash</code> 缓存会导致一个问题：修改 <code>a</code> 文件导致 <code>b</code> 文件 <code>contenthash</code> 变化。<br>因为在 <code>index.js</code> 中引入 <code>a.js</code>，打包后 <code>index.js</code> 中记录了 <code>a.js</code> 的 <code>hash</code> 值，而<code>a.js</code> 改变，其重新打包后的 <code>hash</code> 改变，导致 <code>index.js</code> 文件内容中记录的 <code>a.js</code> 的 <code>hash</code> 也改变，从而重新打包后 <code>index.js</code> 的 <code>hash</code> 值也会变，这样就会使缓存失效。（改变的是<code>a.js</code>文件但是 <code>index.js</code> 文件的 <code>hash</code> 值也改变了）<br>解决办法：<code>runtimeChunk</code> –&gt; 将当前模块记录其他模块的 <code>hash</code> 单独打包为一个文件 <code>runtime</code>，这样 <code>a.js</code> 的 <code>hash</code> 改变只会影响 <code>runtime</code> 文件，不会影响到 <code>index.js</code> 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">output</span>: &#123;<br>  <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;js/[name].[contenthash:10].js&#x27;</span>,<br>  <span class="hljs-attr">path</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  <span class="hljs-attr">chunkFilename</span>: <span class="hljs-string">&#x27;js/[name].[contenthash:10]_chunk.js&#x27;</span> <span class="hljs-comment">// 指定非入口文件的其他chunk的名字加_chunk</span><br>&#125;,<br><span class="hljs-attr">optimization</span>: &#123;<br>  <span class="hljs-attr">splitChunks</span>: &#123;<br>    <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span>,<br>    <span class="hljs-comment">/* 以下都是splitChunks默认配置，可以不写</span><br><span class="hljs-comment">    miniSize: 30 * 1024, // 分割的chunk最小为30kb（大于30kb的才分割）</span><br><span class="hljs-comment">    maxSize: 0, // 最大没有限制</span><br><span class="hljs-comment">    minChunks: 1, // 要提取的chunk最少被引用1次</span><br><span class="hljs-comment">    maxAsyncRequests: 5, // 按需加载时并行加载的文件的最大数量为5</span><br><span class="hljs-comment">    maxInitialRequests: 3, // 入口js文件最大并行请求数量</span><br><span class="hljs-comment">    automaticNameDelimiter: &#x27;~&#x27;, // 名称连接符</span><br><span class="hljs-comment">    name: true, // 可以使用命名规则</span><br><span class="hljs-comment">    cacheGroups: &#123; // 分割chunk的组</span><br><span class="hljs-comment">      vendors: &#123;</span><br><span class="hljs-comment">        // node_modules中的文件会被打包到vendors组的chunk中，--&gt; vendors~xxx.js</span><br><span class="hljs-comment">        // 满足上面的公共规则，大小超过30kb、至少被引用一次</span><br><span class="hljs-comment">        test: /[\\/]node_modules[\\/]/,</span><br><span class="hljs-comment">        // 优先级</span><br><span class="hljs-comment">        priority: -10</span><br><span class="hljs-comment">      &#125;,</span><br><span class="hljs-comment">      default: &#123;</span><br><span class="hljs-comment">        // 要提取的chunk最少被引用2次</span><br><span class="hljs-comment">        minChunks: 2,</span><br><span class="hljs-comment">        prority: -20,</span><br><span class="hljs-comment">        // 如果当前要打包的模块和之前已经被提取的模块是同一个，就会复用，而不是重新打包</span><br><span class="hljs-comment">        reuseExistingChunk: true</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    &#125; */</span><br>  &#125;,<br>  <span class="hljs-comment">// 将index.js记录的a.js的hash值单独打包到runtime文件中</span><br>  <span class="hljs-attr">runtimeChunk</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-function"><span class="hljs-params">entrypoint</span> =&gt;</span> <span class="hljs-string">`runtime-<span class="hljs-subst">$&#123;entrypoint.name&#125;</span>`</span><br>  &#125;,<br>  <span class="hljs-attr">minimizer</span>: [<br>    <span class="hljs-comment">// 配置生产环境的压缩方案：js/css</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerserWebpackPlugin</span>(&#123;<br>      <span class="hljs-comment">// 开启缓存</span><br>      <span class="hljs-attr">cache</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 开启多进程打包</span><br>      <span class="hljs-attr">parallel</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 启用sourceMap(否则会被压缩掉)</span><br>      <span class="hljs-attr">sourceMap</span>: <span class="hljs-literal">true</span><br>    &#125;)<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="七、Webpack5-介绍和使用"><a href="#七、Webpack5-介绍和使用" class="headerlink" title="七、Webpack5 介绍和使用"></a>七、Webpack5 介绍和使用</h1><p>此版本重点关注以下内容:</p><ul><li>通过持久缓存提高构建性能.</li><li>使用更好的算法和默认值来改善长期缓存.</li><li>通过更好的树摇和代码生成来改善捆绑包大小.</li><li>清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改.</li><li>通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5.</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i webpack@next webpack-cli -D<br></code></pre></td></tr></table></figure><h2 id="自动删除-Node-js-Polyfills"><a href="#自动删除-Node-js-Polyfills" class="headerlink" title="自动删除 Node.js Polyfills"></a>自动删除 Node.js Polyfills</h2><p>早期，webpack 的目标是允许在浏览器中运行大多数 node.js 模块，但是模块格局发生了变化，许多模块用途现在主要是为前端目的而编写的。webpack &lt;= 4 附带了许多 node.js 核心模块的 polyfill，一旦模块使用任何核心模块（即 crypto 模块），这些模块就会自动应用。</p><p>尽管这使使用为 node.js 编写的模块变得容易，但它会将这些巨大的 polyfill 添加到包中。在许多情况下，这些 polyfill 是不必要的。</p><p>webpack 5 会自动停止填充这些核心模块，并专注于与前端兼容的模块。</p><p>迁移：</p><ul><li>尽可能尝试使用与前端兼容的模块。</li><li>可以为 node.js 核心模块手动添加一个 polyfill。错误消息将提示如何实现该目标。</li></ul><p>Chunk 和模块 ID</p><p>添加了用于长期缓存的新算法。在生产模式下默认情况下启用这些功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">chunkIds</span>: <span class="hljs-string">&quot;deterministic&quot;</span>, <span class="hljs-attr">moduleIds</span>: <span class="hljs-string">&quot;deterministic&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Chunk-ID"><a href="#Chunk-ID" class="headerlink" title="Chunk ID"></a>Chunk ID</h2><p>你可以不用使用 <code>import(/* webpackChunkName: &quot;name&quot; */ &quot;module&quot;)</code> 在开发环境来为 chunk 命名，生产环境还是有必要的</p><p>webpack 内部有 chunk 命名规则，不再是以 id(0, 1, 2)命名了</p><h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h2><ol><li>webpack 现在能够处理对嵌套模块的 tree shaking</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// inner.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> b = <span class="hljs-number">2</span><br><br><span class="hljs-comment">// module.js</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> inner <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./inner&#x27;</span><br><span class="hljs-keyword">export</span> &#123; inner &#125;<br><br><span class="hljs-comment">// user.js</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-variable language_">module</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">inner</span>.<span class="hljs-property">a</span>)<br></code></pre></td></tr></table></figure><p>在生产环境中, inner 模块暴露的 <code>b</code> 会被删除</p><ol><li>webpack 现在能够多个模块之前的关系</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; something &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./something&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">usingSomething</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> something<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">usingSomething</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>当设置了<code>&quot;sideEffects&quot;: false</code>时，一旦发现<code>test</code>方法没有使用，不但删除<code>test</code>，还会删除<code>&quot;./something&quot;</code></p><ol><li>webpack 现在能处理对 Commonjs 的 tree shaking</li></ol><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>webpack 4 默认只能输出 ES5 代码</p><p>webpack 5 开始新增一个属性 output.ecmaVersion, 可以生成 ES5 和 ES6 / ES2015 代码.</p><p>如：<code>output.ecmaVersion: 2015</code></p><p>SplitChunk</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack4</span><br><span class="hljs-attr">minSize</span>: <span class="hljs-number">30000</span>;<br><span class="hljs-comment">// webpack5</span><br><span class="hljs-attr">minSize</span>: &#123;<br>  <span class="hljs-attr">javascript</span>: <span class="hljs-number">30000</span>,<br>  <span class="hljs-attr">style</span>: <span class="hljs-number">50000</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">// 配置缓存</span><br><span class="hljs-symbol">cache:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 磁盘存储</span><br><span class="hljs-symbol">  type:</span> <span class="hljs-string">&quot;filesystem&quot;</span>,<br><span class="hljs-symbol">  buildDependencies:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 当配置修改时，缓存失效</span><br><span class="hljs-symbol">    config:</span> [__filename]<br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>缓存将存储到 <code>node_modules/.cache/webpack</code></p><h2 id="监视输出文件"><a href="#监视输出文件" class="headerlink" title="监视输出文件"></a>监视输出文件</h2><p>之前 webpack 总是在第一次构建时输出全部文件，但是监视重新构建时会只更新修改的文件。</p><p>此次更新在第一次构建时会找到输出文件看是否有变化，从而决定要不要输出全部文件。</p><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><ul><li><code>entry: &quot;./src/index.js</code></li><li><code>output.path: path.resolve(__dirname, &quot;dist&quot;)</code></li><li><code>output.filename: &quot;[name].js&quot;</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue全家桶</title>
    <link href="/blog/2020/12/10/vue/vue._all/"/>
    <url>/blog/2020/12/10/vue/vue._all/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue-核心"><a href="#Vue-核心" class="headerlink" title="Vue 核心"></a>Vue 核心</h2><h3 id="一、Vue-的基本认识"><a href="#一、Vue-的基本认识" class="headerlink" title="一、Vue 的基本认识"></a>一、Vue 的基本认识</h3><p>渐进式 JavaScript 框架，用来动态构建用户界面</p><p><strong>特点</strong></p><ol><li>遵循 MVVM 模式<ol><li>编码简洁，体积小，运行效率高，适合 移动/pc 端开发</li><li>它本身只关注 UI，可以轻松引入 vue 插件或其它第三方库开发项目</li></ol></li></ol><p><strong>与其他前端 JS 框架的关联</strong></p><ol><li>借鉴 angular 的模板 和 数据绑定技术</li><li>借鉴 react 的组件化 和 虚拟 DOM 技术</li></ol><p><strong>Vue 扩展插件</strong></p><ol><li>vue-cli：vue 脚手架</li><li>vue-resource(axios)：ajax 请求</li><li>vue-router：路由</li><li>vuex：状态管理（它是 vue 的插件但是没有用 vue-xxx 的命名规则）</li><li>vue-lazyload：图片懒加载</li><li>vue-scroller：页面滑动相关</li><li>mint-ui：基于 vue 的 UI 组件库（移动端）</li><li>element-ui：基于 vue 的 UI 组件库（PC 端）</li></ol><h3 id="二、Vue-的基本使用"><a href="#二、Vue-的基本使用" class="headerlink" title="二、Vue 的基本使用"></a>二、Vue 的基本使用</h3><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><ol><li><p>引入 Vue.js</p></li><li><p>创建 Vue 对象</p><p>el：指定根 element (选择器)</p><p>data：初始化数据(页面可以访问)</p></li><li><p>双向数据绑定：v-model</p></li><li><p>显示数据：</p></li><li><p>理解 vue 的 mvvm 实现</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!--template模板--&gt;<br>&lt;div id=&quot;test&quot;&gt;<br>  &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;&lt;br&gt;&lt;!--指令--&gt;<br>  &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;&lt;!--指令--&gt;<br>  &lt;p&gt;hello &#123;&#123;msg&#125;&#125;&lt;/p&gt;&lt;!--大括号表达式--&gt;<br>&lt;/div&gt;<br><br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;script type=&quot;text/javascript&quot;&gt;<br>const vm = new Vue(&#123;<br>  // 配置对象 options<br>  // 配置选项(option)<br>  el: &#x27;#test&#x27;, // element: 指定用vue来管理页面中的哪个标签区域<br>  data: &#123;<br>    msg: &#x27;atguigu&#x27;,<br>  &#125;,<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="理解-Vue-的-MVVM"><a href="#理解-Vue-的-MVVM" class="headerlink" title="理解 Vue 的 MVVM"></a>理解 Vue 的 MVVM</h4><p><img src="https://img-blog.csdnimg.cn/20200731102428901.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTA4ODMy,size_16,color_FFFFFF,t_70" alt="img"></p><p>MVVM –&gt; model-view-viewModel</p><p>model：模型，数据对象（data）</p><p>view：视图，模板页面</p><p>viewModel：视图模型（vue 的实例）</p><p>MVVM 本质上是 MVC （Model-View- Controller）的改进版。即模型-视图-视图模型。</p><p><code>模型</code>指的是后端传递的数据，<code>视图</code>指的是所看到的页面。</p><p><code>视图模型</code>是 mvvm 模式的核心，它是连接 view 和 model 的桥梁。它有两个方向：</p><ol><li>将<code>模型</code>转化成<code>视图</code>，即<strong>将后端传递的数据转化成所看到的页面</strong>。实现的方式是：数据绑定。</li><li>将<code>视图</code>转化成<code>模型</code>，即<strong>将所看到的页面转化成后端的数据</strong>。实现的方式是：DOM 事件监听。</li></ol><p>这两个方向都实现的，我们称之为数据的<strong>双向绑定</strong>。</p><h3 id="三、模板语法"><a href="#三、模板语法" class="headerlink" title="三、模板语法"></a>三、模板语法</h3><p><strong>模板的理解</strong></p><ol><li>动态的 html 页面</li><li>包含了一些 JS 语法代码：<ol><li>双大括号表达式</li><li>指令（以 v- 开头的自定义标签属性）</li></ol></li></ol><p><strong>双大括号表达式</strong></p><ol><li>语法：</li><li>功能：向页面输出数据</li><li>可以调用对象的方法</li></ol><p><strong>指令一：强制数据绑定</strong></p><p>功能：指定变化的属性值</p><p>完整写法：v-bind:xxx=’yyy’ //yyy 会作为表达式解析执行</p><p>简洁写法：:xxx=’yyy’</p><p><strong>指令二：绑定事件监听</strong></p><p>功能：绑定指定事件名的回调函数</p><p>完整写法：v-on:keyup=’xxx’，v-on:keyup=’xxx(参数)’，v-on:keyup.enter=’xxx’</p><p>简洁写法：@keyup=’xxx’，@keyup.enter=’xxx’</p><h3 id="四、计算属性和监视"><a href="#四、计算属性和监视" class="headerlink" title="四、计算属性和监视"></a>四、计算属性和监视</h3><p><strong>计算属性</strong></p><ol><li>在 computed 属性对象中定义计算属性的方法</li><li>在页面中使用  来显示计算的结果</li></ol><p><strong>监视属性</strong></p><ol><li>通过 vm 对象的 <code>$watch()</code> 或 <code>watch 配置</code> 来监视指定的属性</li><li>当属性变化时，回调函数自动调用，在函数内部进行计算</li></ol><p><strong>计算属性高级</strong></p><ol><li>通过 getter/setter 实现对属性数据的计算读取 和 变化监视</li><li>计算属性存在缓存，多次读取只执行一次 getter 计算</li></ol><h3 id="五、class-与-style-绑定"><a href="#五、class-与-style-绑定" class="headerlink" title="五、class 与 style 绑定"></a>五、class 与 style 绑定</h3><ol><li>在应用界面中, 某个(些)元素的样式是变化的</li><li>class/style 绑定就是专门用来实现动态样式效果的技术</li></ol><p><strong>class 绑定</strong>：<code>:class=&#39;xxx&#39;</code></p><ol><li>表达式是字符串: ‘classA’</li><li>表达式是对象: {classA:isA, classB: isB}</li><li>表达式是数组: [‘classA’, ‘classB’]<br><strong>style 绑定</strong>：<code>:style=&quot;&#123; color: activeColor, fontSize: fontSize + &#39;px&#39; &#125;&quot;</code><br>其中 activeColor/fontSize 是 data 属性</li></ol><h3 id="六、条件渲染条件渲染指令"><a href="#六、条件渲染条件渲染指令" class="headerlink" title="六、条件渲染条件渲染指令"></a>六、条件渲染条件渲染指令</h3><ol><li>v-if + v-else</li><li>v-show</li></ol><p>如果需要频繁切换 v-show 较好。当条件不成立时, v-if 的所有子节点不会解析。</p><h3 id="七、列表渲染"><a href="#七、列表渲染" class="headerlink" title="七、列表渲染"></a>七、列表渲染</h3><p>列表显示指令：</p><ul><li>数组：v-for/index</li><li>对象：v-for/key</li></ul><p><strong>列表的更新显示：</strong></p><p>1.删除 item：变更方法，顾名思义，会变更调用了这些方法的原始数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 两种更新方式</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">persons</span>[index] = newP<br><span class="hljs-comment">// 这样只更新persons中的某一个数据，vue根本就不知道，视图不会更新</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">persons</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>, newP)<br><span class="hljs-comment">// splice方法被 Vue 将进行了包裹，所以也将会触发视图更新。</span><br></code></pre></td></tr></table></figure><p>这些被包裹过的方法包括：</p><ul><li><p><code>push()</code></p></li><li><p><code>pop()</code></p></li><li><p><code>shift()</code></p></li><li><p><code>unshift()</code></p></li><li><p><code>splice()</code></p></li><li><p><code>sort()</code></p></li><li><p><code>reverse()</code></p><p>2.替换 item：相比之下，也有非变更方法，例如 <code>filter()</code>、<code>concat()</code> 和 <code>slice()</code>。它们不会变更原始数组，而<strong>总是返回一个新数组</strong>。当使用非变更方法时，可以用新数组替换旧数组。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> fpersons = persons.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> p.<span class="hljs-property">name</span>.<span class="hljs-title function_">includes</span>(searchName))<br></code></pre></td></tr></table></figure><p><strong>列表的高级处理：</strong><br>列表过滤</p><p>列表排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">fpersons.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">p1, p2</span>) &#123;<br>  <span class="hljs-keyword">if</span> (orderType === <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 降序</span><br>    <span class="hljs-keyword">return</span> p2.<span class="hljs-property">age</span> - p1.<span class="hljs-property">age</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 升序</span><br>    <span class="hljs-keyword">return</span> p1.<span class="hljs-property">age</span> - p2.<span class="hljs-property">age</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="八、事件处理"><a href="#八、事件处理" class="headerlink" title="八、事件处理"></a>八、事件处理</h3><h4 id="绑定监听"><a href="#绑定监听" class="headerlink" title="绑定监听"></a>绑定监听</h4><ol><li>v-on:xxx=”fun”</li><li>@xxx=”fun”</li><li>@xxx=”fun(参数)”</li><li>默认事件形参: event， 隐含属性对象:</li></ol><p><code>$event</code> 就是当前触发事件的元素，即使不传 <code>$event</code>，在回调函数中也可以使用 event 这个参数。</p><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><p>事件修饰符用来控制事件的冒泡和默认行为。</p><ol><li>.prevent : 阻止事件的默认行为 event.preventDefault()</li><li>.stop : 停止事件冒泡 event.stopPropagation()</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 阻止事件冒泡 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;big&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;small&quot;</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.once</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4><ol><li>.keycode : 操作的是某个 keycode 值的键</li><li>.keyName : 操作的某个按键名的键(少部分)</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 任何按键按下都会触发回调函数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> @<span class="hljs-attr">keyup</span>=<span class="hljs-string">&quot;testKeyup&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 下面的两种写法效果是一致的 --&gt;</span><br><span class="hljs-comment">&lt;!-- 使用按键码，回车键的keyCode是13 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> @<span class="hljs-attr">keyup.13</span>=<span class="hljs-string">&quot;testKeyup&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 使用按键修饰符，因为回车键比较常用，所以vue为他设置了名称，可以直接使用enter来代替 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;testKeyup&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="九、表单输入绑定"><a href="#九、表单输入绑定" class="headerlink" title="九、表单输入绑定"></a>九、表单输入绑定</h3><p>使用 v-model 对表单数据自动收集</p><ol><li>text/textarea</li><li>checkbox</li><li>radio</li><li>select</li></ol><h3 id="十、vue-实例生命周期"><a href="#十、vue-实例生命周期" class="headerlink" title="十、vue 实例生命周期"></a>十、vue 实例生命周期</h3><p><strong>生命周期流程图</strong></p><p><img src="https://img-blog.csdnimg.cn/2020073110243019.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTA4ODMy,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>vue 生命周期分析</strong></p><ol><li>初始化显示<ul><li>beforeCreate()</li><li>created()</li><li>beforeMount()</li><li>mounted()</li></ul></li><li>更新显示：this.xxx = value<ul><li>beforeUpdate()</li><li>updated()</li></ul></li><li>销毁 vue 实例：vm.$destroy()<ul><li>beforeDestory()</li><li>destoryed()</li></ul></li></ol><p><strong>常用的生命周期方法</strong></p><ol><li>created()/mounted()：发送 ajax 请求，启动定时器等异步任务</li><li>beforeDestroy()：做收尾工作，如：清除定时器</li></ol><h3 id="十一、过渡-amp-动画"><a href="#十一、过渡-amp-动画" class="headerlink" title="十一、过渡&amp;动画"></a>十一、过渡&amp;动画</h3><p><strong>vue 动画的理解</strong></p><ol><li><p>操作 css 的 transition 或 animation</p></li><li><p>vue 会给目标元素添加/移除特定的 class</p></li><li><p>过渡的相关类名</p><p>xxx-enter-active：指定显示的 transition</p><p>xxx-leave-active：指定隐藏的 transition</p><p>xxx-enter/xxx-leave-to：指定隐藏时的样式</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20200731102427934.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTA4ODMy,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>基本过渡动画的编码</strong></p><ol><li><p>在目标元素外包裹<code>&lt;transition name=&quot;xxx&quot;&gt;</code></p></li><li><p>定义 class 样式</p><p>指定过渡样式：transition</p><p>指定隐藏时的样式：opacity/其它</p></li></ol><h3 id="十二、过滤器"><a href="#十二、过滤器" class="headerlink" title="十二、过滤器"></a>十二、过滤器</h3><p><strong>理解过滤器</strong></p><ol><li><p>功能: 对要显示的数据进行特定格式化后再显示</p></li><li><p>注意: 并没有改变原本的数据, 可是产生新的对应的数据</p></li></ol><p><strong>定义和使用过滤器</strong></p><p>定义过滤器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(filterName, <span class="hljs-keyword">function</span>(<span class="hljs-params">value[,arg1,arg2,...]</span>)&#123;<br>    <span class="hljs-comment">// 进行一定的数据处理</span><br>    <span class="hljs-keyword">return</span> newValue<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用过滤器 ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;myData | filterName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;myData | filterName(arg)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中，myData 会作为 value 传入 filter 中。</p><h3 id="十三、内置指令与自定义指令"><a href="#十三、内置指令与自定义指令" class="headerlink" title="十三、内置指令与自定义指令"></a>十三、内置指令与自定义指令</h3><h4 id="常用内置指令"><a href="#常用内置指令" class="headerlink" title="常用内置指令"></a>常用内置指令</h4><ol><li><p>v-text : 更新元素的 textContent</p></li><li><p>v-html : 更新元素的 innerHTML</p></li><li><p>v-if : 如果为 true, 当前标签才会输出到页面</p></li><li><p>v-else: 如果为 false, 当前标签才会输出到页面</p></li><li><p>v-show : 通过控制 display 样式来控制显示/隐藏</p></li><li><p>v-for : 遍历数组/对象</p></li><li><p>v-on : 绑定事件监听, 一般简写为@</p></li><li><p>v-bind : 强制绑定解析表达式, 可以省略 v-bind</p></li><li><p>v-model : 双向数据绑定</p></li><li><p>ref : 指定唯一标识, vue 对象通过$els 属性访问这个元素对象</p></li><li><p>v-cloak : 防止闪现, 与 css 配合: [v-cloak] { display: none }</p></li></ol><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><p>el：指令所在的标签对象</p><p>binding：包含指令相关数据的容器对象</p><ol><li>注册全局指令 ：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;my-directive&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding</span>) &#123;<br>  el.<span class="hljs-property">innerHTML</span> = binding.<span class="hljs-property">value</span>.<span class="hljs-title function_">toupperCase</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>注册局部指令 ：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">directives</span>: &#123;<br>    <span class="hljs-string">&#x27;my-directive&#x27;</span>(el, binding) &#123;<br>        el.<span class="hljs-property">innerHTML</span> = binding.<span class="hljs-property">value</span>.<span class="hljs-title function_">toupperCase</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>使用指令 ：v-my-directive=’xxx’</li></ol><p>（binding.value 就是 xxx 的值）</p><h3 id="十四、自定义插件"><a href="#十四、自定义插件" class="headerlink" title="十四、自定义插件"></a>十四、自定义插件</h3><p><strong>说明</strong></p><ol><li><p>Vue 插件是一个包含 install 方法的对象</p></li><li><p>通过 install 方法给 Vue 或 Vue 实例添加方法，定义全局指令等</p></li></ol><h3 id="其他-API"><a href="#其他-API" class="headerlink" title="其他 API"></a>其他 API</h3><h4 id="vm-nextTick-callback"><a href="#vm-nextTick-callback" class="headerlink" title="vm.$nextTick([callback])"></a>vm.$nextTick([callback])</h4><p><strong>用法</strong>：将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 <code>Vue.nextTick</code> 一样，不同的是回调的 <code>this</code> 自动绑定到调用它的实例上。</p><p><strong>用途</strong>：需要在视图更新之后，基于新的视图进行操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//改变数据</span><br>vm.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;changed&#x27;</span><br><br><span class="hljs-comment">//想要立即使用更新后的DOM。这样不行，因为设置message后DOM还没有更新</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm.<span class="hljs-property">$el</span>.<span class="hljs-property">textContent</span>) <span class="hljs-comment">// 并不会得到&#x27;changed&#x27;</span><br><br><span class="hljs-comment">//这样可以，nextTick里面的代码会在DOM更新后执行</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">nextTick</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm.<span class="hljs-property">$el</span>.<span class="hljs-property">textContent</span>) <span class="hljs-comment">//可以得到&#x27;changed&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="vue-组件化编码"><a href="#vue-组件化编码" class="headerlink" title="vue 组件化编码"></a>vue 组件化编码</h2><h3 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h3><p><strong>组件间通信基本原则</strong></p><ol><li>不要在子组件中直接修改父组件的状态数据</li><li>数据在哪，更新数据的行为(函数)就应该定义在哪</li></ol><h4 id="vue-组件间通信方式"><a href="#vue-组件间通信方式" class="headerlink" title="vue 组件间通信方式"></a>vue 组件间通信方式</h4><ol><li>props</li><li>vue 的自定义事件</li><li>消息订阅与发布(如: pubsub.js 库)</li><li>slot</li><li>vuex</li></ol><h5 id="props"><a href="#props" class="headerlink" title="props"></a>props</h5><p>使用组件标签时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;my-component name=&quot;tom&quot; :age=&quot;3&quot; :set-name=&quot;setName&quot;&gt;&lt;/my-component&gt;<br></code></pre></td></tr></table></figure><p>定义 MyComponent 时：</p><p>1.在组件内声明所有的 props：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方式一：只指定名称</span><br><span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;setName&#x27;</span>]<br><span class="hljs-comment">// 方式二：指定名称和类型</span><br><span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-title class_">Number</span>,<br>    <span class="hljs-attr">setNmae</span>: <span class="hljs-title class_">Function</span><br>&#125;<br><span class="hljs-comment">// 方式三：指定名称/类型/必要性/默认值</span><br><span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">name</span>: &#123;<span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>, <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">default</span>:xxx&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>注意</p><ol><li>此方式用于父组件向子组件传递数据</li><li>所有标签属性都会成为组件对象的属性，模板页面可以直接引用</li><li>问题:<br>a. 如果需要向非子后代传递数据必须多层逐层传递<br>b. 兄弟组件间也不能直接 props 通信，必须借助父组件才可以</li></ol><h5 id="vue-自定义事件"><a href="#vue-自定义事件" class="headerlink" title="vue 自定义事件"></a>vue 自定义事件</h5><p>绑定事件监听（绑定在父组件中）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 方式一: 通过v-on 绑定 @delete_todo=&quot;deleteTodo&quot; // 方式二: 通过$on()<br>&lt;TodoHeader ref=&quot;header&quot; /&gt;<br>mounted () &#123; this.$refs.header.$on(&#x27;delete_todo&#x27;, this.deleteTodo) &#125;<br></code></pre></td></tr></table></figure><p>触发事件（写在子组件中）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 触发事件(只能在父组件中接收)</span><br><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;delete_todo&#x27;</span>, data)<br></code></pre></td></tr></table></figure><p>注意</p><ol><li>此方式只用于子组件向父组件发送消息(数据)</li><li>问题：隔代组件或兄弟组件间通信此种方式不合适</li></ol><h5 id="消息订阅与发布-PubSubJS-库"><a href="#消息订阅与发布-PubSubJS-库" class="headerlink" title="消息订阅与发布(PubSubJS 库)"></a>消息订阅与发布(PubSubJS 库)</h5><p>订阅消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;msg&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">msg, data</span>)&#123;<br>  ...<br>&#125;)<br></code></pre></td></tr></table></figure><p>发布消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;msg&#x27;</span>, data)<br></code></pre></td></tr></table></figure><p>注意</p><ol><li>优点：此方式可实现任意关系组件间通信(数据)</li></ol><h5 id="事件的-2-个重要操作-总结"><a href="#事件的-2-个重要操作-总结" class="headerlink" title="事件的 2 个重要操作(总结)"></a>事件的 2 个重要操作(总结)</h5><ol><li>绑定事件监听(订阅消息)<br>目标：标签元素<code>&lt;button&gt;</code><br>事件名(类型)：click/focus<br>回调函数：function(event){}</li><li>触发事件(发布消息)<br>DOM 事件：用户在浏览器上对应的界面上做对应的操作<br>自定义：编码手动触发</li></ol><h5 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h5><p>此方式用于父组件向子组件传递<code>标签数据</code></p><p>子组件: Child.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;slot name=&quot;xxx&quot;&gt;不确定的标签结构1&lt;/slot&gt;<br>    &lt;div&gt;组件确定的标签结构&lt;/div&gt;<br>    &lt;slot name=&quot;yyy&quot;&gt;不确定的标签结构2&lt;/slot&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>父组件: Parent.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;child&gt;<br>    &lt;div slot=&quot;xxx&quot;&gt;xxx 对应的标签结构&lt;/div&gt;<br>    &lt;div slot=&quot;yyy&quot;&gt;yyyy 对应的标签结构&lt;/div&gt;<br>&lt;/child&gt;<br></code></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p><strong>为脚手架添加 axios 模块</strong></p><p>1.本地安装 axios 模块:</p><p><code>npm i -save axios</code></p><p>2.在脚手架项目源代码的 src/main.js 中，new Vue() 前引入 axios 模块</p><p><code>import axios from &quot;axios&quot;</code> // node_modules 中安装的模块，引入时都不用加路径</p><p>3.设置 axios 对象的基础路径属性：</p><p><code>axios.defaults.baseURL=&quot;http://服务器端域名&quot;</code></p><p>4.将 axios 对象放入 Vue 的原型对象中</p><p><code>Vue.prototype.axios = axios;</code></p><p>5.结果：因为所有组件对象都是 Vue 类型的子对象，所以在所有组件内，任何位置都可用 <code>this.$axios.get()</code> 和 <code>this.$axios.post()</code> 访问 Vue.prototype 中的 axios 对象里的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 发送 ajax 请求</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$axios</span><br>  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/index&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>) <span class="hljs-comment">// 得到返回结果数据</span><br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error.<span class="hljs-property">message</span>)<br>  &#125;)<br><span class="hljs-keyword">let</span> data = &#123;<br>  <span class="hljs-attr">pagenum</span>: <span class="hljs-number">1</span>,<br>&#125;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$axios</span><br>  .<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/users/signin&#x27;</span>, data)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>)<br>  &#125;)<br></code></pre></td></tr></table></figure><h3 id="render-配置"><a href="#render-配置" class="headerlink" title="render 配置"></a>render 配置</h3><p>在 main.js 文件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 原始写法</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-comment">// 将App.vue映射成标签</span><br>    <span class="hljs-variable constant_">APP</span>,<br>  &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;App/&gt;&#x27;</span>, <span class="hljs-comment">// 将App标签转化成模板</span><br>&#125;)<br><span class="hljs-comment">// 更简洁的写法</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>&#125;)<br></code></pre></td></tr></table></figure><p>render 是一个渲染函数，h =&gt; h(App) 是一个箭头函数，其参数 h 是一个函数，这个函数执行接收一个参数 App 组件。</p><p>h(App) 执行后返回的结果就是 render 的值。</p><p>也就是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">render</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">createElement</span>) &#123;<br>    <span class="hljs-comment">// h就是createElement，用来创建元素标签</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-title class_">App</span>) <span class="hljs-comment">// &lt;App/&gt;</span><br>  &#125;,<br>&#125;)<br><span class="hljs-comment">// 其中App标签被插入到el中</span><br></code></pre></td></tr></table></figure><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>官方提供的用来实现 SPA 的 vue 插件。</p><h3 id="相关-API-说明"><a href="#相关-API-说明" class="headerlink" title="相关 API 说明"></a>相关 API 说明</h3><p>1.注册路由器（在 main.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-comment">// 创建vue 配置路由器</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  router,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(app),<br>&#125;)<br></code></pre></td></tr></table></figure><p>2.路由器配置：（在 router 目录下 index.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br></code></pre></td></tr></table></figure><p>3.路由配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: home,<br>    <span class="hljs-comment">// 嵌套路由</span><br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;news&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">News</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;message&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">Message</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    <span class="hljs-comment">// 一般路由</span><br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-comment">// 自动跳转路由</span><br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><p>3.VueRouter()：用于创建路由器的构建函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>, <span class="hljs-comment">// 模式</span><br>  <span class="hljs-attr">base</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>,<br>  routes,<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>4.使用路由组件标签</p><ul><li><p><code>&lt;router-link&gt;</code>：用来生成路由链接</p><p><code>&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</code></p></li><li><p><code>&lt;router-view&gt;</code>：用来显示当前路由组件界面</p><p><code>&lt;router-view&gt;&lt;/router-view&gt;</code></p></li></ul><h3 id="向路由组件传递数据"><a href="#向路由组件传递数据" class="headerlink" title="向路由组件传递数据"></a>向路由组件传递数据</h3><h4 id="方式-1-路由路径携带参数-param-query"><a href="#方式-1-路由路径携带参数-param-query" class="headerlink" title="方式 1: 路由路径携带参数(param/query)"></a>方式 1: 路由路径携带参数(param/query)</h4><ol><li>配置路由</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">children</span>: [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;mdetail/:id&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">MessageDetail</span>,<br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><ol start="2"><li>路由路径</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link :to=&quot;&#x27;/home/message/mdetail/&#x27; + m.id&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>路由组件中读取请求参数<br><code>this.$route.params.id</code></li></ol><h4 id="方式-2-lt-router-view-gt-属性携带数据"><a href="#方式-2-lt-router-view-gt-属性携带数据" class="headerlink" title="方式 2: &lt;router-view&gt;属性携带数据"></a>方式 2: <code>&lt;router-view&gt;</code>属性携带数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-view :msg=&quot;msg&quot;&gt;&lt;/router-view&gt;<br></code></pre></td></tr></table></figure><h3 id="缓存路由组件对象"><a href="#缓存路由组件对象" class="headerlink" title="缓存路由组件对象"></a>缓存路由组件对象</h3><ol><li>默认情况下，被切换的路由组件对象会死亡释放，再次回来时是重新创建的（原来的数据就没有了）</li><li>如果可以缓存路由组件对象，可以提高用户体验</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;keep-alive&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/keep-alive&gt;<br></code></pre></td></tr></table></figure><h3 id="两种模式的区别"><a href="#两种模式的区别" class="headerlink" title="两种模式的区别"></a>两种模式的区别</h3><p>前后端分离 ===&gt; 利用 Ajax，可以在<strong>不刷新浏览器</strong>的情况下异步数据请求交互。</p><p><strong>单页应用（</strong>只有一个 html 文件，整个网站的所有内容都在这一个 html 里，通过 js 来处理<strong>）</strong>不仅仅是在<strong>页面交互</strong>是无刷新的，连<strong>页面跳转</strong>都是无刷新的。为了实现单页应用 ==&gt; 前后端分离 + 前端路由。（更新视图但不重新请求页面）</p><p>前端路由实现起来其实也很简单，就是<strong>匹配不同的 url 路径</strong>，进行解析，加载不同的组件，然后动态的渲染出区域 html 内容。</p><p>vue-router 默认 hash 模式，还有一种是 history 模式。</p><h4 id="hash-模式"><a href="#hash-模式" class="headerlink" title="hash 模式"></a>hash 模式</h4><p>只能改变 # 后面的 url 片段即 hash 值。hash 值的变化，并<strong>不会导致浏览器向服务器发出请求</strong>，浏览器不发出请求，也就不会刷新页面。每次 hash 值的变化，会<strong>触发</strong> <code>hashchange</code> 这个事件，通过这个事件我们就可以知道 hash 值发生了哪些变化。然后我们便可以<strong>监听 <code>hashchange</code> 来实现更新页面部分内容的操作</strong>：</p><p>hash 模式的工作原理是 hashchange 事件，可以在 window 监听 hash 的变化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id=&quot;test&quot; style=&quot;height: 500px;width: 500px;margin: 0 auto&quot;&gt;&lt;/div&gt;<br><br>&lt;script&gt;<br>window.onhashchange = function (event) &#123;<br>  console.log(event) // HashChangeEvent &#123;..., newURL: &quot;...test.html#red&quot;, oldURL: &quot;...test.html&quot;, ...&#125;<br>  console.log(location) // location &#123;..., hash: &quot;#red&quot;, ...&#125;<br>  let hash = location.hash.slice(1) // red<br>  document.body.style.color = hash<br>  document.getElementById(&#x27;test&#x27;).style.backgroundColor = hash<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>在 url 后面随便添加一个 #xx 会触发 onhashchange 事件。打印 event，里边有两个属 性 newURL 和 oldURL。可以通过模拟改变 hash 的值，动态改变页面数据。</p><h5 id="相关-API"><a href="#相关-API" class="headerlink" title="相关 API"></a>相关 API</h5><p>HashHistory 的方法</p><ol><li><code>this.$router.push(path)</code>：相当于点击路由链接(可以返回到当前路由界面)</li></ol><p><img src="https://img-blog.csdnimg.cn/20200731102427668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTA4ODMy,size_16,color_FFFFFF,t_70" alt="img"></p><ol start="2"><li><code>this.$router.replace(path)</code>：用新路由替换当前路由(不可以返回到当前路由界面)</li></ol><p><img src="https://img-blog.csdnimg.cn/20200731102427671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTA4ODMy,size_16,color_FFFFFF,t_70" alt="img"></p><p>3)<code>this.$router.back()</code>：请求(返回)上一个记录路由 4) <code>this.$router.go(-1)</code>：请求(返回)上一个记录路由 5) <code>this.$router.go(1)</code>：请求下一个记录路由</p><p>因为 hash 发生变化的 url 都会被浏览器记录（历史访问栈）下来，从而你会发现浏览器的<strong>前进后退</strong>都可以用了。尽管浏览器没有请求服务器，但是页面状态和 url 已经关联起来了，这就是所谓的前端路由，单页应用的标配。</p><h4 id="history-模式"><a href="#history-模式" class="headerlink" title="history 模式"></a>history 模式</h4><p>前面的 hashchange，只能改变 # 后面的 url 片段，而 history api 则给了前端完全的自由。</p><p>通过 history api，我们丢掉了丑陋的 #，但是它也有个毛病：</p><p>不怕前进，不怕后退，就怕<strong>f5 刷新</strong>，刷新是实实在在地去请求服务器的。在 hash 模式下，前端路由修改的是 # 中的信息，而浏览器请求时是跟它无关的，所以没有问题。</p><p>但是在 history 下，你可以自由的修改 path，当刷新时，如果服务器中没有相应的响应或者资源，会刷出 404 来。</p><h5 id="相关-API-1"><a href="#相关-API-1" class="headerlink" title="相关 API"></a>相关 API</h5><p>多了两个 API，<code>pushState()</code> 和 <code>replaceState()。</code>通过这两个 API：</p><p>1）可以改变 url 地址且不会发送请求</p><p>2）不仅可以读取历史记录栈，还可以对<strong>浏览器历史记录栈进行修改。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">pushState</span>(stateObject, title, <span class="hljs-variable constant_">URL</span>)<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">replaceState</span>(stateObject, title, <span class="hljs-variable constant_">URL</span>)<br>history.<span class="hljs-title function_">go</span>(-<span class="hljs-number">2</span>) <span class="hljs-comment">//后退两次</span><br>history.<span class="hljs-title function_">go</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">//前进两次</span><br>history.<span class="hljs-title function_">back</span>() <span class="hljs-comment">//后退</span><br>hsitory.<span class="hljs-title function_">forward</span>() <span class="hljs-comment">//前进</span><br></code></pre></td></tr></table></figure><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li>前面的 hashchange，你只能改变 # 后面的 url 片段。而 pushState 设置的新 URL 可以是与当前 URL 同源的任意 URL。</li><li>history 模式则会将 URL 修改得就和正常请求后端的 URL 一样，如后端没有配置对应 /user/id 的路由处理，则会返回 404 错误</li></ul><h3 id="router与-route的区别"><a href="#router与-route的区别" class="headerlink" title="$router与$route的区别"></a><code>$router</code>与<code>$route</code>的区别</h3><ol><li><code>$route</code>是一个跳转的路由对象，每一个路由都会有一个 route 对象，是一个局部的对象。可以获取对应的 name、path、query、params 等（<code>&lt;router-link&gt;</code>传的参数由 <code>this.$route.query</code>或者 <code>this.$route.params</code> 接收）</li><li><code>$router</code>为通过 Vue.use(VueRouter) 和 VueRouter 构造函数得到的一个 router 的实例对象，这个对象是一个全局的对象。想要导航到不同 URL，则使用<code>$router.push</code>方法；返回上一个 history 也是使用<code>$router.go</code>方法</li></ol><h3 id="总结-编写使用路由的-3-步"><a href="#总结-编写使用路由的-3-步" class="headerlink" title="总结: 编写使用路由的 3 步"></a>总结: 编写使用路由的 3 步</h3><ol><li>定义路由组件</li><li>注册路由</li><li>使用路由<br><code>&lt;router-link&gt;</code><br><code>&lt;router-view&gt;</code></li></ol><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p><strong>vuex 是什么</strong>：对 vue 应用中多个组件的共享状态进行集中式的管理（读/写）</p><p><strong>状态自管理应用</strong>：</p><ol><li>state：驱动应用的数据源</li><li>view：以声明方式将 state 映射到视图</li><li>actions：响应在 view 上的用户输入导致的状态变化（包含 n 个更新状态的方法）</li></ol><p><strong>多组件共享状态的问题</strong>：</p><ol><li>多个视图依赖于同一状态</li><li>来自不同视图的行为需要变更同一状态</li></ol><p>以前的解决办法：</p><ul><li>将数据以及操作数据的行为都定义在父组件</li><li>将数据以及操作数据的行为传递给需要的各个子组件（有可能需要多级传递）</li></ul><p>vuex 就是用来解决这个问题的。</p><h3 id="vuex-核心概念和-API"><a href="#vuex-核心概念和-API" class="headerlink" title="vuex 核心概念和 API"></a>vuex 核心概念和 API</h3><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><p>vuex 管理的状态对象。它应该是唯一的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> state = &#123;<br>  <span class="hljs-attr">xxx</span>: initValue,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h4><p>包含多个计算属性（get）的对象</p><p>由谁读取：组件中 <code>$store.getters.xxx</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> getters = &#123;<br>  <span class="hljs-title function_">nnn</span>(<span class="hljs-params">state</span>) &#123;<br>    <span class="hljs-keyword">return</span> ...<br>  &#125;<br>  <span class="hljs-title function_">mmm</span>(<span class="hljs-params">state, getters</span>) &#123;<br>    <span class="hljs-keyword">return</span> getters.<span class="hljs-property">nnn</span>...<br>    <span class="hljs-comment">//注意：引入getters时，必须放在第二位，因为第一位默认是state</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h4><p>包含多个<strong>事件回调函数</strong>的对象。通过执行 <code>commit()</code> 来触发 mutation 的调用，<strong>间接更新</strong> state。</p><p>由谁触发：组件中 <code>$store.dispatch(&#39;action 名称&#39;, data1)</code> // ‘zzz’</p><p>可以包含异步代码（定时器，ajax）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> actions = &#123;<br>  <span class="hljs-title function_">zzz</span>(<span class="hljs-params">&#123; commit, state &#125;, data1</span>) &#123;<br>    <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;yyy&#x27;</span>, &#123; data1 &#125;) <span class="hljs-comment">// 传递数据必须用大括号包裹住</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h4><p>包含多个<strong>直接更新</strong> state 的方法（回调函数）的对象。</p><p>由谁触发：action 中的 <code>commit(&#39;mutation 名称&#39;)</code> 来触发。</p><p>只能包含同步的代码，不能写异步代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mutations = &#123;<br>  <span class="hljs-title function_">yyy</span>(<span class="hljs-params">state, &#123; data1 &#125;</span>) &#123;<br>    <span class="hljs-comment">// 传递数据必须用大括号包裹住</span><br>    <span class="hljs-comment">// 更新 state 的某个属性</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h4><p>包含多个 module。一个 module 是一个 store 的配置对象，与一个组件（包含有共享数据）对应</p><h4 id="核心模块-store-对象"><a href="#核心模块-store-对象" class="headerlink" title="核心模块 store 对象"></a>核心模块 store 对象</h4><p>index.js 固定写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> state <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./state&#x27;</span><br><span class="hljs-keyword">import</span> mutations <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mutations&#x27;</span><br><span class="hljs-keyword">import</span> actions <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./actions&#x27;</span><br><span class="hljs-keyword">import</span> getters <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./getters&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_">store</span>(&#123;<br>  state,<br>  mutations,<br>  actions,<br>  getters,<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="组件中"><a href="#组件中" class="headerlink" title="组件中"></a>组件中</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;&#123;xxx&#125;&#125; &#123;&#123;mmm&#125;&#125; @click=<span class="hljs-string">&quot;zzz(data)&quot;</span><br><br><span class="hljs-keyword">import</span> &#123;mapState. mapGetters, mapActions&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>  <span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;xxx&#x27;</span>]), <span class="hljs-comment">//相当于 this.$store.state.xxx</span><br>    ...<span class="hljs-title function_">mapGetters</span>([<span class="hljs-string">&#x27;mmm&#x27;</span>]), <span class="hljs-comment">//相当于 this.$store.getters[&#x27;mmm&#x27;]</span><br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;zzz&#x27;</span>]) <span class="hljs-comment">//相当于 this.$store.dispatch(&#x27;zzz&#x27;)</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="映射-store"><a href="#映射-store" class="headerlink" title="映射 store"></a>映射 store</h5><p>在 main.js 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  store,<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="store-对象"><a href="#store-对象" class="headerlink" title="store 对象"></a>store 对象</h5><p>1.所有用 vuex 管理的组件中都多了一个属性 $store，它就是一个 store 对象</p><p>2.属性：</p><p>state：注册的 state 对象</p><p>getters：注册的 getters 对象</p><p>3.方法：</p><p>dispatch(actionName, data)：分发调用 action</p><h3 id="Vuex-结构分析"><a href="#Vuex-结构分析" class="headerlink" title="Vuex 结构分析"></a>Vuex 结构分析</h3><p><img src="https://img-blog.csdnimg.cn/20200731102430351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTA4ODMy,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="vue-源码分析"><a href="#vue-源码分析" class="headerlink" title="vue 源码分析"></a>vue 源码分析</h2><p>分析 vue 作为一个 MVVM 框架的基本实现原理</p><h3 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h3><p>数据代理：通过一个对象代理对另一个对象(在前一个对象内部)中属性的操作(读/写)</p><p>vue 数据代理：data 对象的所有属性的操作(读/写)由 vm 对象来代理操作</p><p>好处：通过 vm 对象就可以方便的操作 data 中的数据</p><p>基本实现流程：</p><ol><li>通过 Object.defineProperty() 给 vm 添加与 data 对象的属性对应的属性描述符</li><li>所有添加的属性都包含 getter/setter</li><li>getter/setter 内部去操作 data 中对应的属性数据</li></ol><h3 id="模板解析"><a href="#模板解析" class="headerlink" title="模板解析"></a>模板解析</h3><h4 id="模板解析的基本流程"><a href="#模板解析的基本流程" class="headerlink" title="模板解析的基本流程"></a>模板解析的基本流程</h4><ol><li><p>将 el 的所有<strong>子节点取出</strong>，添加到一个新建的文档 fragment 对象中</p></li><li><p>对 fragment 中的<strong>所有层次</strong>子节点递归进行编译解析处理</p></li></ol><ul><li>对大括号表达式文本节点进行解析</li><li>对元素节点的指令属性进行解析<ul><li>事件指令解析</li><li>一般指令解析</li></ul></li></ul><ol start="3"><li>将解析后的 fragment 添加到 el 中显示</li></ol><h4 id="大括号表达式解析"><a href="#大括号表达式解析" class="headerlink" title="大括号表达式解析"></a>大括号表达式解析</h4><ol><li>根据<strong>正则</strong>对象得到<strong>匹配</strong>出的表达式字符串：子匹配/RegExp.$1 name</li><li>从 data 中<strong>取出</strong>表达式对应的<strong>属性值</strong></li><li>将属性值<strong>设置</strong>为文本节点的 <strong>textContent</strong></li></ol><h4 id="事件指令解析"><a href="#事件指令解析" class="headerlink" title="事件指令解析"></a>事件指令解析</h4><ol><li>从指令名中<strong>取出事件名</strong></li><li>根据指令的值（表达式）从 methods 中得到<strong>对应的事件处理函数对象</strong></li><li>给当前元素节点<strong>绑定</strong>指定事件名和回调函数的 dom <strong>事件监听</strong></li><li>指令解析完后，<strong>移除</strong>此指令属性</li></ol><h4 id="一般指令解析"><a href="#一般指令解析" class="headerlink" title="一般指令解析"></a>一般指令解析</h4><ol><li><p>得到<strong>指令名和指令值</strong>（表达式） text/html/class msg/myClass</p></li><li><p>从 <strong>data 中</strong>根据表达式得到<strong>对应的值</strong></p></li><li><p>根据指令名<strong>确定需要操作元素节点的什么属性</strong></p></li></ol><ul><li>v-text—textContent 属性</li><li>v-html—innerHTML 属性</li><li>v-class–className 属性</li></ul><ol start="4"><li><p>将得到的表达式的值<strong>设置到对应的属性上</strong></p></li><li><p><strong>移除</strong>元素的指令属性</p></li></ol><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p><strong>数据绑定</strong></p><p>一旦更新了 data 中的某个属性数据，所有界面上直接使用或间接使用了此属性的节点都会更新。</p><p><strong>数据劫持</strong></p><ol><li>数据劫持是 vue 中用来实现数据绑定的一种技术</li><li>基本思想：通过 defineProperty() 来监视 data 中所有属性(任意层次)数据的变化, 一旦变化就去更新界面</li></ol><h4 id="四个重要对象"><a href="#四个重要对象" class="headerlink" title="四个重要对象"></a>四个重要对象</h4><p>实现数据的绑定，首先要对数据进行劫持监听，所以我们需要设置一个监听器 Observer，用来监听所有属性。</p><p>如果属性发生变化了，就需要告诉订阅者 Watcher 看是否需要更新。因为订阅者是有很多个，所以我们需要有一个消息订阅器 Dep 来专门收集这些订阅者，然后在监听器 Observer 和订阅 Watcher 之间进行统一管理。</p><p>接着，我们还需要有一个指令解析器 Compile，对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者 Watcher，并替换模板数据或者绑定相应的函数。此时当订阅者 Watcher 接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。</p><h5 id="Observer（监听器）"><a href="#Observer（监听器）" class="headerlink" title="Observer（监听器）"></a>Observer（监听器）</h5><p>1.用来对 data 所有属性数据进行劫持的构造函数</p><p>2.给 data 中所有属性重新定义属性描述(get/set)</p><p>3.为 data 中的每个属性创建对应的 dep 对象</p><h5 id="Dep-Depend"><a href="#Dep-Depend" class="headerlink" title="Dep(Depend)"></a>Dep(Depend)</h5><p>1.data 中的每个属性(所有层次)都对应一个 dep 对象</p><p>2.创建的时机:</p><ul><li><p>在初始化 define data 中各个属性时创建对应的 dep 对象</p></li><li><p>在 data 中的某个属性值被设置为新的对象时</p><p>3.对象的结构</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Dep</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 标识属性</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = uid++ <span class="hljs-comment">// 每个dep都有一个唯一的id</span><br>  <span class="hljs-comment">// 相关的所有watcher的数组</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span> = [] <span class="hljs-comment">//包含n个对应watcher的数组(subscribes的简写)</span><br>&#125;<br><br>&#123;<br>  ;(<span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = uid++), (<span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span> = [])<br>&#125;<br></code></pre></td></tr></table></figure><p>4.subs 属性说明</p><ul><li>当 <code>watcher</code>被创建时，内部将当前 <code>watcher</code>对象添加到对应的 <code>dep</code>对象的<code>subs</code>中</li><li>当此 <code>data</code>属性的值发生改变时，<code>subs</code>中所有的 <code>watcher</code>都会收到更新的通知，从而最终更新对应的界面</li></ul><h5 id="Compiler（指令解析器）"><a href="#Compiler（指令解析器）" class="headerlink" title="Compiler（指令解析器）"></a>Compiler（指令解析器）</h5><ol><li>用来解析模板页面的对象的构造函数（一个实例）</li><li>利用 <code>compile</code>对象解析模板页面</li><li>每解析一个表达式（非事件指令，如<code>&#123;&#123;&#125;&#125;</code>或<code>v-text</code>，<code>v-html</code>）都会创建一个对应的 <code>watcher</code>对象，并建立 <code>watcher</code>与 <code>dep</code>的关系</li><li><code>complie</code> 与 <code>watcher</code>关系：一对多的关系</li></ol><h5 id="Watcher（订阅者）"><a href="#Watcher（订阅者）" class="headerlink" title="Watcher（订阅者）"></a>Watcher（订阅者）</h5><p>1.模板中每个非事件指令或表达式都对应一个 watcher 对象</p><p>2.监视当前表达式数据的变化</p><p>3.创建的时机：在初始化编译模板时（compiler 中）</p><p>4.对象的组成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Watcher</span>(<span class="hljs-params">vm, exp, cb</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span> = vm <span class="hljs-comment">// vm 对象</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">exp</span> = exp <span class="hljs-comment">// 对应指令的表达式</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span> = cb <span class="hljs-comment">// 当表达式所对应的数据发生改变的回调函数</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>() <span class="hljs-comment">// 表达式当前的值</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">depIds</span> = &#123;&#125;<br>  <span class="hljs-comment">// 表达式中各级属性所对应的dep对象的集合对象</span><br>  <span class="hljs-comment">// 属性名为dep的id, 属性值为dep</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="总结：dep-与-watcher-的关系-–-gt-多对多"><a href="#总结：dep-与-watcher-的关系-–-gt-多对多" class="headerlink" title="总结：dep 与 watcher 的关系 –&gt; 多对多"></a>总结：dep 与 watcher 的关系 –&gt; 多对多</h5><ol><li>data 中的一个属性对应一个 dep，一个 dep 中可能包含多个 watcher（模板中有几个表达式使用到了同一个属性）</li><li>模板中一个非事件表达式对应一个 watcher，一个 watcher 中可能包含多个 dep（表达式是多层：a.b.c）</li><li>数据绑定使用到 2 个核心技术<ul><li>defineProperty()</li><li>消息订阅与发布</li></ul></li></ol><h4 id="MVVM-原理图分析"><a href="#MVVM-原理图分析" class="headerlink" title="MVVM 原理图分析"></a>MVVM 原理图分析</h4><p><img src="https://img-blog.csdnimg.cn/20200731102429847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTA4ODMy,size_16,color_FFFFFF,t_70" alt="img"></p><p>MVVM 中会创建 Observer（用来劫持/监听所有属性）和 Compile（解析指令/大括号表达式），</p><p><strong>Observer</strong>：要劫持就需要对应的 set()方法，所以在 observer 中为每一个属性创建了一个 dep 对象（与 data 中的属性一一对应）</p><p><strong>Compile</strong>：（做了两件事）</p><p>1.目的是初始化视图（显示界面），调用 updater（有很多更新节点的方法）</p><p>2.为表达式创建对应的 Watcher ，同时指定了更新节点的函数</p><p><strong>Watcher 和 Dep 建立关系</strong>：</p><p>1.watcher 放到 dep 中（添加订阅者）</p><p>dep 中有一个 subs，是用来保存 n 个 watcher 的数组容器</p><p>2.dep 放到 watcher 中</p><p>watcher 中的 depIds 是用来保存 n 个 dep 的对象容器。为了判断 dep 与 watcher 的关系是否已经建立（防止重复的建立关系）</p><p><strong>以上都是初始化阶段会经历的过程</strong></p><p><strong>更新阶段：</strong></p><p>vm.name = ‘Tom’ 导致 data 中的数据变化，会触发监视 data 属性的 observer 中的 set() 方法，然会它又会通知 dep，dep 会去通知它保存的所有相关的 watcher，watcher 收到信息后，其回调函数会去调用 updater 更新界面</p><p>如下图所示：（黑线是初始化阶段，红线是更新阶段）</p><p><img src="https://img-blog.csdnimg.cn/20200731102430723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTA4ODMy,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><ol><li>双向数据绑定是建立在单向数据绑定(model==&gt;View)的基础之上的</li><li>双向数据绑定的实现流程:<br>a. 在解析 v-model 指令时，给当前元素添加 input 监听<br>b. 当 input 的 value 发生改变时，将最新的值赋值给当前表达式所对应的 data 属性</li></ol>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue项目 webpack优化 compression-webpack-plugin 开启gzip</title>
    <link href="/blog/2020/12/09/webpack/compression-webpack-plugin/"/>
    <url>/blog/2020/12/09/webpack/compression-webpack-plugin/</url>
    
    <content type="html"><![CDATA[<blockquote><p>打包的时候开启 gzip 可以很大程度减少包的大小，非常适合于上线部署。更小的体积对于用户体验来说就意味着更快的加载速度以及更好的用户体验。</p></blockquote><h2 id="Vue-cli3-0-项目-安装依赖：compression-webpack-plugin"><a href="#Vue-cli3-0-项目-安装依赖：compression-webpack-plugin" class="headerlink" title="Vue-cli3.0 项目 安装依赖：compression-webpack-plugin"></a>Vue-cli3.0 项目 安装依赖：<code>compression-webpack-plugin</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">　　npm install compression-webpack-plugin@6.0.5 -D<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>安装最新版 7.0.0 的时候报错 回退下版本就好了</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CompressionWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;compression-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> productionGzipExtensions = [<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-string">&#x27;css&#x27;</span>]<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">dir</span>) &#123;<br>  <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">join</span>(__dirname, dir)<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">lintOnSave</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;./&#x27;</span>,<br>  <span class="hljs-comment">// 配置webpack打包</span><br>  <span class="hljs-attr">productionSourceMap</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">configureWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 取消console打印</span><br>    config.<span class="hljs-property">optimization</span>.<span class="hljs-property">minimizer</span>[<span class="hljs-number">0</span>].<span class="hljs-property">options</span>.<span class="hljs-property">terserOptions</span>.<span class="hljs-property">compress</span>.<span class="hljs-property">drop_console</span> = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">plugins</span>: [<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompressionWebpackPlugin</span>(&#123;<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[path].gz[query]&#x27;</span>,<br>            <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;gzip&#x27;</span>,<br>            <span class="hljs-attr">test</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;\\.(&#x27;</span> + productionGzipExtensions.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;|&#x27;</span>) + <span class="hljs-string">&#x27;)$&#x27;</span>), <span class="hljs-comment">//匹配文件名</span><br>            <span class="hljs-attr">threshold</span>: <span class="hljs-number">10240</span>, <span class="hljs-comment">//对10K以上的数据进行压缩</span><br>            <span class="hljs-attr">minRatio</span>: <span class="hljs-number">0.8</span>,<br>            <span class="hljs-attr">deleteOriginalAssets</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//是否删除源文件</span><br>          &#125;),<br>        ],<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    config.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;preload&#x27;</span>)<br>    config.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;prefetch&#x27;</span>)<br>  &#125;,<br>  <span class="hljs-comment">// 第三方插件配置</span><br>  <span class="hljs-attr">pluginOptions</span>: &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-attr">pwa</span>: &#123;<br>      <span class="hljs-attr">iconPaths</span>: &#123;<br>        <span class="hljs-attr">favicon32</span>: <span class="hljs-string">&#x27;./favicon.ico&#x27;</span>,<br>        <span class="hljs-attr">favicon16</span>: <span class="hljs-string">&#x27;./favicon.ico&#x27;</span>,<br>        <span class="hljs-attr">appleTouchIcon</span>: <span class="hljs-string">&#x27;./favicon.ico&#x27;</span>,<br>        <span class="hljs-attr">maskIcon</span>: <span class="hljs-string">&#x27;./favicon.ico&#x27;</span>,<br>        <span class="hljs-attr">msTileImage</span>: <span class="hljs-string">&#x27;./favicon.ico&#x27;</span>,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="服务器启用gzip"><a href="#服务器启用gzip" class="headerlink" title="服务器启用gzip"></a>服务器启用<code>gzip</code></h2><p><strong>在 <code>nginx/conf/nginx.conf</code> 中配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 开启和关闭gzip模式</span><br>gzip on;<br><span class="hljs-comment"># gizp压缩起点，文件大于1k才进行压缩</span><br>gzip_min_length 1k;<br><span class="hljs-comment"># 设置压缩所需要的缓冲区大小，以4k为单位，如果文件为7k则申请2*4k的缓冲区</span><br>gzip_buffers 4 16k;<br><span class="hljs-comment"># 设置gzip压缩针对的HTTP协议版本</span><br>gzip_http_version 1.1;<br><span class="hljs-comment"># gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间</span><br>gzip_comp_level 2;<br><span class="hljs-comment"># 需要压缩的文件mime类型</span><br>gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml;<br><span class="hljs-comment"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span><br>gzip_vary on;<br><span class="hljs-comment"># nginx做前端代理时启用该选项，表示无论后端服务器的headers头返回什么信息，都无条件启用压缩</span><br>gzip_proxied expired no-cache no-store private auth;<br><span class="hljs-comment"># 不启用压缩的条件，IE6对Gzip不友好，所以不压缩</span><br>gzip_disable <span class="hljs-string">&quot;MSIE [1-6]\.&quot;</span>;<br></code></pre></td></tr></table></figure><p>gzip</p><p><code>gzip</code>属于在线压缩，在资源通过<code>http</code>发送报文给客户端的过程中，进行压缩，可以减少客户端带宽占用，减少文件传输大小。</p><p>一般写在<code>server</code>或者<code>location</code>均可；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br> listen 6002;<br> server_name **.234.133.**;<br><br> gzip on;<br> gzip_proxied any;<br> gzip_types<br>  text/css<br>  text/javascript<br>  text/xml<br>  text/plain<br>  image/x-icon<br>  application/javascript<br>  application/x-javascript<br>  application/json;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回调函数-Promise</title>
    <link href="/blog/2020/11/24/JS/promise/"/>
    <url>/blog/2020/11/24/JS/promise/</url>
    
    <content type="html"><![CDATA[<h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><h3 id="1-1-区别实例对象与函数对象"><a href="#1-1-区别实例对象与函数对象" class="headerlink" title="1.1 区别实例对象与函数对象"></a>1.1 区别实例对象与函数对象</h3><ol><li>实例对象：new 函数产生的对象，称为实例对象，简称为对象</li><li>函数对象：将函数作为对象使用时，称为函数对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Fn只能称为函数</span><br>&#125;<br><span class="hljs-keyword">const</span> fn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fn</span>() <span class="hljs-comment">// Fn只有new过的才可以称为构造函数</span><br><span class="hljs-comment">//fn称为实例对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-comment">// Fn作为对象使用时，才可以称为函数对象</span><br><span class="hljs-title class_">Fn</span>.<span class="hljs-title function_">bind</span>(&#123;&#125;) <span class="hljs-comment">//Fn作为函数对象使用</span><br>$(<span class="hljs-string">&#x27;#test&#x27;</span>) <span class="hljs-comment">// $作为函数使用</span><br>$.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/test&#x27;</span>) <span class="hljs-comment">// $作为函数对象使用</span><br></code></pre></td></tr></table></figure><blockquote><p>()的左边必然是函数，点的左边必然是对象</p></blockquote><h3 id="1-2-回调函数"><a href="#1-2-回调函数" class="headerlink" title="1.2 回调函数"></a>1.2 回调函数</h3><h4 id="同步回调"><a href="#同步回调" class="headerlink" title="同步回调"></a>同步回调</h4><p>定义：立即执行，完全执行完了才结束，不会放入回调队列中</p><p>举例：数组遍历相关的回调 / Promise 的 excutor 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 遍历回调，同步回调，不会放入队列，一上来就要执行</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;forEach()之后&#x27;</span>)<br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// 5</span><br><span class="hljs-comment">// &quot;forEach()之后&quot;</span><br></code></pre></td></tr></table></figure><h4 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h4><p>定义：不会立即执行，会放入回调队列中将来执行</p><p>举例：定时器回调 / ajax 回调 / Promise 成功或失败的回调</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定时器回调</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 异步回调，会放入队列中将来执行</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;timeout callback()&#x27;</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setTimeout()之后&#x27;</span>)<br><span class="hljs-comment">// “setTimeout()之后”</span><br><span class="hljs-comment">// “timeout callback()”</span><br><span class="hljs-comment">// Promise 成功或失败的回调</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;value&#x27;</span>, value)<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;reason&#x27;</span>, reason)<br>  &#125;<br>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----&#x27;</span>)<br><span class="hljs-comment">// ----</span><br><span class="hljs-comment">// value 1</span><br></code></pre></td></tr></table></figure><p><strong>js 引擎是先把初始化的同步代码都执行完成后，才执行回调队列中的代码</strong></p><h3 id="1-3-JS-的-error-处理"><a href="#1-3-JS-的-error-处理" class="headerlink" title="1.3 JS 的 error 处理"></a>1.3 JS 的 error 处理</h3><h4 id="错误的类型"><a href="#错误的类型" class="headerlink" title="错误的类型"></a>错误的类型</h4><p>Error：所有错误的父类型</p><p>ReferenceError：引用的变量不存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// ReferenceError:a is not defined</span><br></code></pre></td></tr></table></figure><p>TypeError：数据类型不正确</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> b<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">xxx</span>)<br><span class="hljs-comment">// TypeError:Cannot read property &#x27;xxx&#x27; of undefined</span><br><span class="hljs-keyword">let</span> b = &#123;&#125;<br>b.<span class="hljs-title function_">xxx</span>()<br><span class="hljs-comment">// TypeError:b.xxx is not a function</span><br></code></pre></td></tr></table></figure><p>RangeError：数据值不在其所允许的范围内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">fn</span>()<br>&#125;<br><span class="hljs-title function_">fn</span>()<br><span class="hljs-comment">// RangeError:Maximum call stack size exceeded</span><br></code></pre></td></tr></table></figure><p>SyntaxError：语法错误</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> c = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">// SyntaxError:Unexpected string</span><br></code></pre></td></tr></table></figure><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>捕获错误：try … catch</p><p>抛出错误：throw error</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">something</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() % <span class="hljs-number">2</span> === <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;当前时间为奇数，可以执行任务&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">//如果时间为偶数抛出异常，由调用来处理</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;当前时间为偶数，无法执行任务&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 捕获处理异常</span><br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-title function_">something</span>()<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>  <span class="hljs-title function_">alert</span>(error.<span class="hljs-property">message</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="错误对象"><a href="#错误对象" class="headerlink" title="错误对象"></a>错误对象</h4><p>massage 属性：错误相关信息</p><p>stack 属性：函数调用栈记录信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">let</span> d<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d.<span class="hljs-property">xxx</span>)<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error.<span class="hljs-property">message</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error.<span class="hljs-property">stack</span>)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;出错之后&#x27;</span>)<br><span class="hljs-comment">// Cannot read property &#x27;xxx&#x27; of undefined</span><br><span class="hljs-comment">// TypeError:Cannot read property &#x27;xxx&#x27; of undefined</span><br><span class="hljs-comment">// 出错之后</span><br></code></pre></td></tr></table></figure><blockquote><p>因为错误被捕获处理了，后面的代码才能运行下去，打印出‘出错之后’</p></blockquote><h2 id="二、Promise-的理解和使用"><a href="#二、Promise-的理解和使用" class="headerlink" title="二、Promise 的理解和使用"></a>二、Promise 的理解和使用</h2><h3 id="2-1-Promise-是什么"><a href="#2-1-Promise-是什么" class="headerlink" title="2.1 Promise 是什么"></a>2.1 Promise 是什么</h3><h4 id="2-1-1-Promise-的理解"><a href="#2-1-1-Promise-的理解" class="headerlink" title="2.1.1 Promise 的理解"></a>2.1.1 Promise 的理解</h4><p>抽象表达：Promise 是 JS 中进行异步编程的新的解决方案</p><p>具体表达：</p><ol><li>语法上：Promise 是一个构造函数</li><li>功能上：Promise 对象用来封装一个异步操作并可以获取其结果</li></ol><h4 id="2-1-2-Promise-的状态改变"><a href="#2-1-2-Promise-的状态改变" class="headerlink" title="2.1.2 Promise 的状态改变"></a>2.1.2 Promise 的状态改变</h4><ol><li>pending 变为 resolved</li><li>pending 变为 rejected</li></ol><p>只有这两种，且一个 promise 对象只能改变一次。无论成功还是失败，都会有一个结果数据。成功的结果数据一般称为 value，而失败的一般称为 reason。</p><h4 id="2-1-3-Promise-的基本流程"><a href="#2-1-3-Promise-的基本流程" class="headerlink" title="2.1.3 Promise 的基本流程"></a>2.1.3 Promise 的基本流程</h4><p><img src="https://img-blog.csdnimg.cn/20200703144207912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTA4ODMy,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="2-1-4-Promise-的基本使用"><a href="#2-1-4-Promise-的基本使用" class="headerlink" title="2.1.4 Promise 的基本使用"></a>2.1.4 Promise 的基本使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建一个新的p对象promise</span><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 执行器函数</span><br>  <span class="hljs-comment">// 执行异步操作任务</span><br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> time = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>    <span class="hljs-comment">// 如果当前时间是偶数代表成功，否则失败</span><br>    <span class="hljs-keyword">if</span> (time % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 如果成功，调用resolve(value)</span><br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;成功的数据，time=&#x27;</span> + time)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 如果失败，调用reject(reason)</span><br>      <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;失败的数据，time=&#x27;</span> + time)<br>    &#125;<br>  &#125;, <span class="hljs-number">1000</span>)<br>&#125;)<br><br>p.<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 接收得到成功的value数据 onResolved</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;成功的回调&#x27;</span>, value)<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 接收得到失败的reason数据 onRejected</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;失败的回调&#x27;</span>, reason)<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><p>.then() 和执行器(excutor)同步执行，.then() 中的回调函数异步执行</p><h3 id="2-2-为什么要用-Promise"><a href="#2-2-为什么要用-Promise" class="headerlink" title="2.2 为什么要用 Promise"></a>2.2 为什么要用 Promise</h3><h4 id="1-指定回调函数的方式更加灵活"><a href="#1-指定回调函数的方式更加灵活" class="headerlink" title="1.指定回调函数的方式更加灵活"></a>1.指定回调函数的方式更加灵活</h4><p>旧的：必须在启动异步任务前指定</p><p>promise：启动异步任务 =&gt; 返回 promise 对象 =&gt; 给 promise 对象绑定回调函数(甚至可以在异步任务结束后指定)</p><h4 id="2-支持链式调用，可以解决回调地狱问题"><a href="#2-支持链式调用，可以解决回调地狱问题" class="headerlink" title="2.支持链式调用，可以解决回调地狱问题"></a>2.支持链式调用，可以解决回调地狱问题</h4><h5 id="什么是回调地狱？"><a href="#什么是回调地狱？" class="headerlink" title="什么是回调地狱？"></a>什么是回调地狱？</h5><p>回调函数嵌套调用，<strong>外部回调函数</strong>异步执行的结果是其<strong>内部嵌套的回调函数</strong>执行的条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">doSomething</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;<br>  <span class="hljs-title function_">doSomethingElse</span>(<br>    result,<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params">newResult</span>) &#123;<br>      <span class="hljs-title function_">doThirdThing</span>(<br>        newResult,<br>        <span class="hljs-keyword">function</span> (<span class="hljs-params">finalResult</span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Got the final result:&#x27;</span> + finalResult)<br>        &#125;,<br>        failureCallback<br>      )<br>    &#125;,<br>    failureCallback<br>  )<br>&#125;, failureCallback)<br></code></pre></td></tr></table></figure><h5 id="回调地狱的缺点？"><a href="#回调地狱的缺点？" class="headerlink" title="回调地狱的缺点？"></a>回调地狱的缺点？</h5><p>不便于阅读 / 不便于异常处理</p><h5 id="解决方案？"><a href="#解决方案？" class="headerlink" title="解决方案？"></a>解决方案？</h5><p>promise 链式调用</p><h5 id="终极解决方案？"><a href="#终极解决方案？" class="headerlink" title="终极解决方案？"></a>终极解决方案？</h5><p>async/await</p><h5 id="使用-promise-的链式调用解决回调地狱"><a href="#使用-promise-的链式调用解决回调地狱" class="headerlink" title="使用 promise 的链式调用解决回调地狱"></a>使用 promise 的链式调用解决回调地狱</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">doSomething</span>()<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> <span class="hljs-title function_">doSomethingElse</span>(result))<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">newResult</span> =&gt;</span> <span class="hljs-title function_">doThirdThing</span>(newResult))<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">finalResult</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Got the final result:&#x27;</span> + finalResult)<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(failureCallback)<br></code></pre></td></tr></table></figure><p>回调地狱的终极解决方案 async/await</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">request</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">doSomething</span>()<br>    <span class="hljs-keyword">const</span> newResult = <span class="hljs-keyword">await</span> <span class="hljs-title function_">doSomethingElse</span>(result)<br>    <span class="hljs-keyword">const</span> finalResult = <span class="hljs-keyword">await</span> <span class="hljs-title function_">doThirdThing</span>(newResult)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Got the final result:&#x27;</span> + finalResult)<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-title function_">failureCallback</span>(error)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-如何使用-Promise"><a href="#2-3-如何使用-Promise" class="headerlink" title="2.3 如何使用 Promise"></a>2.3 如何使用 Promise</h3><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ol><li><p>Promise 构造函数：Promise(excutor) {}</p><p>excutor 函数：同步执行 (resolve, reject) =&gt; {}</p><p>resolve 函数：内部定义成功时调用的函数 resove(value)</p><p>reject 函数：内部定义失败时调用的函数 reject(reason)</p><p>说明：excutor 是执行器，会在 Promise 内部立即同步回调，异步操作 <code>resolve/reject</code> 就在 excutor 中执行</p></li><li><p>Promise.prototype.then 方法：p.then(onResolved, onRejected)</p><p>1）onResolved 函数：成功的回调函数 (value) =&gt; {}</p><p>2）onRejected 函数：失败的回调函数 (reason) =&gt; {}</p><p>说明：指定用于得到成功 value 的成功回调和用于得到失败 reason 的失败回调，返回一个新的 promise 对象</p></li><li><p>Promise.prototype.catch 方法：p.catch(onRejected)</p><p>1）onRejected 函数：失败的回调函数 (reason) =&gt; {}</p><p>说明：<strong>then() 的语法糖</strong>，相当于 then(undefined, onRejected)</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123; <span class="hljs-comment">// excutor执行器函数</span><br> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>   <span class="hljs-keyword">if</span>(...) &#123;<br>     <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;成功的数据&#x27;</span>) <span class="hljs-comment">// resolve()函数</span><br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>     <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;失败的数据&#x27;</span>) <span class="hljs-comment">//reject()函数</span><br>    &#125;<br> &#125;, <span class="hljs-number">1000</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<br> <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123; <span class="hljs-comment">// onResolved()函数</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>&#125;<br>).<span class="hljs-title function_">catch</span>(<br> <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123; <span class="hljs-comment">// onRejected()函数</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reason)<br>&#125;<br>)<br></code></pre></td></tr></table></figure><ol><li><p>Promise.resolve 方法：Promise.resolve(value)</p><p>value：将被 <code>Promise</code> 对象解析的参数，也可以是一个成功或失败的 <code>Promise</code> 对象</p><p>返回：返回一个带着给定值解析过的 <code>Promise</code> 对象，如果参数本身就是一个 <code>Promise</code> 对象，则直接返回这个 <code>Promise</code> 对象。</p></li><li><p>Promise.reject 方法：Promise.resolve(reason)</p><p>reason：失败的原因</p><p>说明：返回一个失败的 promise 对象</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//产生一个成功值为1的promise对象</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>)<br>&#125;)<br><span class="hljs-comment">//相当于</span><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">const</span> p3 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-number">3</span>)<br><br>p1.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>&#125;) <span class="hljs-comment">// 1</span><br>p2.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>&#125;) <span class="hljs-comment">// 2</span><br>p3.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reason)<br>&#125;) <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p><code>Promise.resolve()/Promise.reject()</code> 方法就是一个<strong>语法糖</strong></p><ol><li><p>Promise.all 方法：Promise.all(iterable)</p><p>iterable：包含 n 个 promise 的可迭代对象，如 <code>Array</code> 或 <code>String</code></p><p>说明：返回一个新的 promise，只有所有的 promise 都成功才成功，只要有一个失败了就直接失败</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pAll = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1, p2, p3])<br><span class="hljs-keyword">const</span> pAll2 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1, p2])<br><span class="hljs-comment">//因为其中p3是失败所以pAll失败</span><br>pAll.<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;all onResolved()&#x27;</span>, value)<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;all onRejected()&#x27;</span>, reason)<br>  &#125;<br>)<br><span class="hljs-comment">// all onRejected() 3</span><br>pAll2.<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;all onResolved()&#x27;</span>, values)<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;all onRejected()&#x27;</span>, reason)<br>  &#125;<br>)<br><span class="hljs-comment">// all onResolved() [1, 2]</span><br></code></pre></td></tr></table></figure><ol><li><p>Promise.race 方法：Promise.race(iterable)</p><p>iterable：包含 n 个 promise 的可迭代对象，如 <code>Array</code> 或 <code>String</code></p><p>说明：返回一个新的 promise，第一个完成的 promise 的结果状态就是最终的结果状态</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pRace = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([p1, p2, p3])<br><span class="hljs-comment">// 谁先完成就输出谁(不管是成功还是失败)</span><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>)<br>  &#125;, <span class="hljs-number">1000</span>)<br>&#125;)<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">const</span> p3 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-number">3</span>)<br><br>pRace.<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;race onResolved()&#x27;</span>, value)<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;race onRejected()&#x27;</span>, reason)<br>  &#125;<br>)<br><span class="hljs-comment">//race onResolved() 2</span><br></code></pre></td></tr></table></figure><h4 id="Promise-的几个关键问题"><a href="#Promise-的几个关键问题" class="headerlink" title="Promise 的几个关键问题"></a>Promise 的几个关键问题</h4><h5 id="1-如何改变-promise-的状态？"><a href="#1-如何改变-promise-的状态？" class="headerlink" title="1.如何改变 promise 的状态？"></a>1.如何改变 promise 的状态？</h5><p>(1)resolve(value)：如果当前是 pending 就会变为 resolved</p><p>(2)reject(reason)：如果当前是 pending 就会变为 rejected</p><p>(3)抛出异常：如果当前是 pending 就会变为 rejected</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//resolve(1) // promise变为resolved成功状态</span><br>  <span class="hljs-comment">//reject(2) // promise变为rejected失败状态</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;出错了&#x27;</span>) <span class="hljs-comment">// 抛出异常，promise变为rejected失败状态，reason为抛出的error</span><br>&#125;)<br>p.<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;&#125;,<br>  <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;reason&#x27;</span>, reason)<br>  &#125;<br>)<br><span class="hljs-comment">// reason Error:出错了</span><br></code></pre></td></tr></table></figure><h5 id="2-一个-promise-指定多个成功-失败回调函数，都会调用吗？"><a href="#2-一个-promise-指定多个成功-失败回调函数，都会调用吗？" class="headerlink" title="2.一个 promise 指定多个成功/失败回调函数，都会调用吗？"></a>2.一个 promise 指定多个成功/失败回调函数，都会调用吗？</h5><p>当 promise 改变为对应状态时都会调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//resolve(1)</span><br>  <span class="hljs-title function_">reject</span>(<span class="hljs-number">2</span>)<br>&#125;)<br>p.<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;&#125;,<br>  <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;reason&#x27;</span>, reason)<br>  &#125;<br>)<br>p.<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;&#125;,<br>  <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;reason2&#x27;</span>, reason)<br>  &#125;<br>)<br><span class="hljs-comment">// reason 2</span><br><span class="hljs-comment">// reason2 2</span><br></code></pre></td></tr></table></figure><h5 id="3-改变-promise-状态和指定回调函数谁先谁后？"><a href="#3-改变-promise-状态和指定回调函数谁先谁后？" class="headerlink" title="3.改变 promise 状态和指定回调函数谁先谁后？"></a>3.改变 promise 状态和指定回调函数谁先谁后？</h5><ol><li><p>都有可能，常规是先指定回调再改变状态，但也可以先改状态再指定回调</p></li><li><p>如何先改状态再指定回调？</p><p>(1)在执行器中直接调用 resolve()/reject()</p><p>(2)延迟更长时间才调用 then()</p></li><li><p>什么时候才能得到数据？</p><p>(1)如果先指定的回调，那当状态发生改变时，回调函数就会调用得到数据</p><p>(2)如果先改变的状态，那当指定回调时，回调函数就会调用得到数据</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 改变状态</span><br>  &#125;, <span class="hljs-number">1000</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<br>  <span class="hljs-comment">// 指定回调函数</span><br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;&#125;,<br>  <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;&#125;<br>)<br></code></pre></td></tr></table></figure><p><strong>此时，先指定回调函数，保存当前指定的回调函数；后改变状态(同时指定数据)，然后异步执行之前保存的回调函数。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 改变状态</span><br>&#125;).<span class="hljs-title function_">then</span>(<br>  <span class="hljs-comment">// 指定回调函数</span><br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;&#125;,<br>  <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;&#125;<br>)<br></code></pre></td></tr></table></figure><p><strong>这种写法，先改变的状态(同时指定数据)，后指定回调函数(不需要再保存)，直接异步执行回调函数</strong></p><h5 id="4-promise-then-返回的新-promise-的结果状态由什么决定？"><a href="#4-promise-then-返回的新-promise-的结果状态由什么决定？" class="headerlink" title="4.promise.then() 返回的新 promise 的结果状态由什么决定？"></a>4.promise.then() 返回的新 promise 的结果状态由什么决定？</h5><p>(1)简单表达：由 then() 指定的回调函数执行的结果决定</p><p>(2)详细表达：</p><p>① 如果抛出异常，新 promise 变为 rejected，reason 为抛出的异常</p><p>② 如果返回的是非 promise 的任意值，新 promise 变为 resolved，value 为返回的值</p><p>③ 如果返回的是另一个新 promise，此 promise 的结果就会成为新 promise 的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>)<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<br>    <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved1()&#x27;</span>, value)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onRejected1()&#x27;</span>, reason)<br>    &#125;<br>  )<br>  .<span class="hljs-title function_">then</span>(<br>    <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved2()&#x27;</span>, value)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onRejected2()&#x27;</span>, reason)<br>    &#125;<br>  )<br><span class="hljs-comment">// onResolved1() 1</span><br><span class="hljs-comment">// onResolved2() undefined</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>)<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<br>    <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved1()&#x27;</span>, value)<br>      <span class="hljs-comment">//return 2                   // onResolved2() 2</span><br>      <span class="hljs-comment">//return Promise.resolve(3)  // onResolved2() 3</span><br>      <span class="hljs-comment">//return Promise.reject(4)   // onRejected2() 4</span><br>      <span class="hljs-comment">//throw 5                    // onRejected2() 5</span><br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onRejected1()&#x27;</span>, reason)<br>    &#125;<br>  )<br>  .<span class="hljs-title function_">then</span>(<br>    <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved2()&#x27;</span>, value)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onRejected2()&#x27;</span>, reason)<br>    &#125;<br>  )<br><span class="hljs-comment">// onResolved1() 1</span><br><span class="hljs-comment">// 对应输出如上所示</span><br></code></pre></td></tr></table></figure><h5 id="5-promise-如何串联多个操作任务？"><a href="#5-promise-如何串联多个操作任务？" class="headerlink" title="5.promise 如何串联多个操作任务？"></a>5.promise 如何串联多个操作任务？</h5><p>(1)promise 的 then() 返回一个新的 promise，可以并成 then() 的链式调用</p><p>(2)通过 then 的链式调用串联多个同步/异步任务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行任务1(异步)&#x27;</span>)<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>)<br>  &#125;, <span class="hljs-number">1000</span>)<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;任务1的结果&#x27;</span>, value)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行任务2(同步)&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> <span class="hljs-comment">// 同步任务直接return返回结果</span><br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;任务2的结果&#x27;</span>, value)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 异步任务需要包裹在Promise对象中</span><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行任务3(异步)&#x27;</span>)<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>)<br>      &#125;, <span class="hljs-number">1000</span>)<br>    &#125;)<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;任务3的结果&#x27;</span>, value)<br>  &#125;)<br><span class="hljs-comment">// 执行任务1(异步)</span><br><span class="hljs-comment">// 任务1的结果 1</span><br><span class="hljs-comment">// 执行任务2(同步)</span><br><span class="hljs-comment">// 任务2的结果 2</span><br><span class="hljs-comment">// 执行任务3(异步)</span><br><span class="hljs-comment">// 任务3的结果 3</span><br></code></pre></td></tr></table></figure><h5 id="6-Promise-异常穿透-传透-？"><a href="#6-Promise-异常穿透-传透-？" class="headerlink" title="6.Promise 异常穿透(传透)？"></a>6.Promise 异常穿透(传透)？</h5><p>(1)当使用 promise 的 then 链式调用时，可以在最后指定失败的回调</p><p>(2)前面任何操作出了异常，都会传到最后失败的回调中处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//resolve(1)</span><br>  <span class="hljs-title function_">reject</span>(<span class="hljs-number">1</span>)<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved1()&#x27;</span>, value)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved2()&#x27;</span>, value)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved3()&#x27;</span>, value)<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onRejected1()&#x27;</span>, reason)<br>  &#125;)<br><span class="hljs-comment">// onRejected1() 1</span><br></code></pre></td></tr></table></figure><p>相当于这种写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//resolve(1)</span><br>  <span class="hljs-title function_">reject</span>(<span class="hljs-number">1</span>)<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<br>    <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved1()&#x27;</span>, value)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">throw</span> reason<br>    &#125; <span class="hljs-comment">// 抛出失败的结果reason</span><br>  )<br>  .<span class="hljs-title function_">then</span>(<br>    <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved2()&#x27;</span>, value)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">throw</span> reason<br>    &#125;<br>  )<br>  .<span class="hljs-title function_">then</span>(<br>    <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved3()&#x27;</span>, value)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">throw</span> reason<br>    &#125;<br>  )<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onRejected1()&#x27;</span>, reason)<br>  &#125;)<br><span class="hljs-comment">// onRejected1() 1</span><br></code></pre></td></tr></table></figure><p>所以失败的结果是一层一层处理下来的，最后传递到 catch 中。</p><p>或者，将 <code>reason =&gt; &#123;throw reason&#125;</code> 替换为 <code>reason =&gt; Promise.reject(reason)</code> 也是一样的</p><h5 id="7-中断-promise-链？"><a href="#7-中断-promise-链？" class="headerlink" title="7.中断 promise 链？"></a>7.中断 promise 链？</h5><p>当使用 promise 的 then 链式调用时，在中间中断，不再调用后面的回调函数</p><p>办法：在回调函数中返回一个 pending 状态的 promise 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//resolve(1)</span><br>  <span class="hljs-title function_">reject</span>(<span class="hljs-number">1</span>)<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved1()&#x27;</span>, value)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved2()&#x27;</span>, value)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved3()&#x27;</span>, value)<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onRejected1()&#x27;</span>, reason)<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<br>    <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved4()&#x27;</span>, value)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onRejected2()&#x27;</span>, reason)<br>    &#125;<br>  )<br><span class="hljs-comment">// onRejected1() 1</span><br><span class="hljs-comment">// onResolved4() undefined</span><br></code></pre></td></tr></table></figure><p>为了在 catch 中就中断执行，可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//resolve(1)</span><br>  <span class="hljs-title function_">reject</span>(<span class="hljs-number">1</span>)<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved1()&#x27;</span>, value)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved2()&#x27;</span>, value)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved3()&#x27;</span>, value)<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onRejected1()&#x27;</span>, reason)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;) <span class="hljs-comment">// 返回一个pending的promise</span><br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<br>    <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved4()&#x27;</span>, value)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onRejected2()&#x27;</span>, reason)<br>    &#125;<br>  )<br><span class="hljs-comment">// onRejected1() 1</span><br></code></pre></td></tr></table></figure><p>在 catch 中返回一个新的 promise，且这个 promise 没有结果。</p><p>由于，返回的新的 promise 结果决定了后面 then 中的结果，所以后面的 then 中也没有结果。</p><p>这就实现了中断 promise 链的效果。</p><h2 id="三、自定义-手写-Promise"><a href="#三、自定义-手写-Promise" class="headerlink" title="三、自定义(手写)Promise"></a>三、自定义(手写)Promise</h2><h3 id="3-1-Promise-js"><a href="#3-1-Promise-js" class="headerlink" title="3.1 Promise.js"></a>3.1 Promise.js</h3><blockquote><p>Promise.js 是 ES5 function 实现 Promise 的完整版</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  自定义Promise函数模块：IIFE</span><br><span class="hljs-comment">*/</span><br>;(<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">window</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PENDING</span> = <span class="hljs-string">&#x27;pending&#x27;</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">RESOLVED</span> = <span class="hljs-string">&#x27;resolved&#x27;</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">REJECTED</span> = <span class="hljs-string">&#x27;rejected&#x27;</span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  Promise构造函数</span><br><span class="hljs-comment">  excutor: 执行器函数(同步执行)</span><br><span class="hljs-comment">*/</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Promise</span>(<span class="hljs-params">excutor</span>) &#123;<br>    <span class="hljs-comment">// 将当前Promise对象保存起来</span><br>    <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span><br>    self.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">PENDING</span> <span class="hljs-comment">// 给promise对象指定status属性，初始值为pending</span><br>    self.<span class="hljs-property">data</span> = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// 给promise对象指定一个用于存储结果数据的属性</span><br>    self.<span class="hljs-property">callbacks</span> = [] <span class="hljs-comment">// 每个元素的结构： &#123;onResolved() &#123;&#125;, onRejected() &#123;&#125;&#125;</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">value</span>) &#123;<br>      <span class="hljs-comment">// 如果当前状态不是pending，直接结束</span><br>      <span class="hljs-keyword">if</span> (self.<span class="hljs-property">status</span> !== <span class="hljs-variable constant_">PENDING</span>) &#123;<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-comment">// 将状态改为resolved</span><br>      self.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">RESOLVED</span><br>      <span class="hljs-comment">// 保存value数据</span><br>      self.<span class="hljs-property">data</span> = value<br>      <span class="hljs-comment">// 如果有待执行的callback函数，立即异步执行回调函数onResolved</span><br>      <span class="hljs-keyword">if</span> (self.<span class="hljs-property">callbacks</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-comment">// 放入队列中执行所有成功的回调</span><br>          self.<span class="hljs-property">callbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">callbacksObj</span> =&gt;</span> &#123;<br>            callbacksObj.<span class="hljs-title function_">onResolved</span>(value)<br>          &#125;)<br>        &#125;)<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">reject</span>(<span class="hljs-params">reason</span>) &#123;<br>      <span class="hljs-comment">// 如果当前状态不是pending，直接结束</span><br>      <span class="hljs-keyword">if</span> (self.<span class="hljs-property">status</span> !== <span class="hljs-variable constant_">PENDING</span>) &#123;<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-comment">// 将状态改为rejected</span><br>      self.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">REJECTED</span><br>      <span class="hljs-comment">// 保存value数据</span><br>      self.<span class="hljs-property">data</span> = reason<br>      <span class="hljs-comment">// 如果有待执行的callback函数，立即异步执行回调函数onRejected</span><br>      <span class="hljs-keyword">if</span> (self.<span class="hljs-property">callbacks</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-comment">// 放入队列中执行所有失败的回调</span><br>          self.<span class="hljs-property">callbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">callbacksObj</span> =&gt;</span> &#123;<br>            callbacksObj.<span class="hljs-title function_">onRejected</span>(reason)<br>          &#125;)<br>        &#125;)<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//立即同步执行excutor函数</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-title function_">excutor</span>(resolve, reject)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-comment">// 如果执行器抛出异常，promise对象变为rejected状态</span><br>      <span class="hljs-title function_">reject</span>(error)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  Promise原型对象的then()</span><br><span class="hljs-comment">  指定成功和失败的回调函数</span><br><span class="hljs-comment">  返回一个新的promise对象</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-title class_">Promise</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">then</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) &#123;<br>    onResolved = <span class="hljs-keyword">typeof</span> onResolved === <span class="hljs-string">&#x27;function&#x27;</span> ? onResolved : <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value <span class="hljs-comment">// 向后传递成功的value</span><br>    <span class="hljs-comment">// 指定默认的失败的回调（实现错误/异常穿透的关键点）</span><br>    onRejected =<br>      <span class="hljs-keyword">typeof</span> onRejected === <span class="hljs-string">&#x27;function&#x27;</span><br>        ? onRejected<br>        : <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">throw</span> reason<br>          &#125; <span class="hljs-comment">// 向后传递失败的reason</span><br>    <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-comment">// 返回一个新的promise对象</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">      调用指定的回调函数处理</span><br><span class="hljs-comment">      */</span><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">callback</span>) &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">          1. 如果抛出异常，return的promise就会失败，reason就是error</span><br><span class="hljs-comment">          2. 如果回调函数执行返回的不是promise，return的promise就会成功，value就是返回的值</span><br><span class="hljs-comment">          3. 如果回调函数执行返回的是promise，return的promise的结果就是这个promise的结果</span><br><span class="hljs-comment">          */</span><br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">callback</span>(self.<span class="hljs-property">data</span>)<br>          <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) &#123;<br>            <span class="hljs-comment">// 第三种情况</span><br>            result.<span class="hljs-title function_">then</span>(<br>              <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-title function_">resolve</span>(value), <span class="hljs-comment">// 当result成功时，让return的promise也成功</span><br>              <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> <span class="hljs-title function_">reject</span>(reason) <span class="hljs-comment">// 当result失败时，让return的promise也失败</span><br>            )<br>            <span class="hljs-comment">// result.then(resolve, reject) // 简洁的写法</span><br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//第二种情况</span><br>            <span class="hljs-title function_">resolve</span>(result)<br>          &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>          <span class="hljs-comment">// 第一种情况</span><br>          <span class="hljs-title function_">reject</span>(error)<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (self.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">PENDING</span>) &#123;<br>        <span class="hljs-comment">// 如果当前状态还是pending状态，将回调函数保存起来</span><br>        self.<span class="hljs-property">callbacks</span>.<span class="hljs-title function_">push</span>(&#123;<br>          <span class="hljs-title function_">onResolved</span>(<span class="hljs-params">value</span>) &#123;<br>            <span class="hljs-title function_">handle</span>(onResolved)<br>          &#125;,<br>          <span class="hljs-title function_">onRejected</span>(<span class="hljs-params">reason</span>) &#123;<br>            <span class="hljs-title function_">handle</span>(onRejected)<br>          &#125;,<br>        &#125;)<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (self.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">RESOLVED</span>) &#123;<br>        <span class="hljs-comment">// 如果当前状态已经改变为resolved状态，异步执行onResolved并改变return的promise状态</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-title function_">handle</span>(onResolved)<br>        &#125;)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果当前状态已经改变为rejected状态，异步执行onRejected并改变return的promise状态</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-title function_">handle</span>(onRejected)<br>        &#125;)<br>      &#125;<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  Promise原型对象的catch()</span><br><span class="hljs-comment">  指定成功和失败的回调函数</span><br><span class="hljs-comment">  返回一个新的promise对象</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-title class_">Promise</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">catch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">onRejected</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">then</span>(<span class="hljs-literal">undefined</span>, onRejected)<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  Promise函数对象的resolve方法</span><br><span class="hljs-comment">  返回一个指定结果的成功的promise</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-title class_">Promise</span>.<span class="hljs-property">resolve</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-comment">// 返回一个成功/失败的promise</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) &#123;<br>        <span class="hljs-comment">// value是promise，使用value的结果作为new的promise的结果</span><br>        value.<span class="hljs-title function_">then</span>(resolve, reject)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// value不是promise =&gt; promise变为成功，数据是value</span><br>        <span class="hljs-title function_">resolve</span>(value)<br>      &#125;<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  Promise函数对象的reject方法</span><br><span class="hljs-comment">  返回一个指定reason的失败的promise</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-title class_">Promise</span>.<span class="hljs-property">reject</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) &#123;<br>    <span class="hljs-comment">// 返回一个失败的promise</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">reject</span>(reason)<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  Promise函数对象的all方法</span><br><span class="hljs-comment">  返回一个promise，只有当所有promise都成功时才成功，否则只要有一个失败的就失败</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-title class_">Promise</span>.<span class="hljs-property">all</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) &#123;<br>    <span class="hljs-comment">// 用来保存成功promise的数量</span><br>    <span class="hljs-keyword">let</span> resolvedCount = <span class="hljs-number">0</span><br>    <span class="hljs-comment">// 用来保存所有成功value的数组</span><br>    <span class="hljs-keyword">const</span> values = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(promises.<span class="hljs-property">length</span>)<br>    <span class="hljs-comment">// 返回一个新的promise</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 遍历promises获取每个promise的结果</span><br>      promises.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">p, index</span>) =&gt;</span> &#123;<br>        <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(p).<span class="hljs-title function_">then</span>(<br>          <span class="hljs-comment">// 将p用Promise.resolve()包裹起来使得p可以是一个值</span><br>          <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>            resolvedCount++ <span class="hljs-comment">// 成功的数量加1</span><br>            <span class="hljs-comment">// p成功，将成功的value按顺序保存到values</span><br>            values[index] = value<br>            <span class="hljs-comment">// 如果全部成功了。将return的promise改为成功</span><br>            <span class="hljs-keyword">if</span> (resolvedCount === promises.<span class="hljs-property">length</span>) &#123;<br>              <span class="hljs-title function_">resolve</span>(values)<br>            &#125;<br>          &#125;,<br>          <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>            <span class="hljs-comment">// 只要有一个失败了，return的promise就失败</span><br>            <span class="hljs-title function_">reject</span>(reason)<br>          &#125;<br>        )<br>      &#125;)<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  Promise函数对象的all方法</span><br><span class="hljs-comment">  返回一个promise，其结果由第一个完成的promise决定</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-title class_">Promise</span>.<span class="hljs-property">race</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) &#123;<br>    <span class="hljs-comment">// 返回一个promise</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 遍历promises获取每个promise的结果</span><br>      promises.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">p, index</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 只有第一次调用的有效果</span><br>        <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(p).<span class="hljs-title function_">then</span>(<br>          <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>            <span class="hljs-comment">// 一旦有成功，将return的promise变为成功</span><br>            <span class="hljs-title function_">resolve</span>(value)<br>          &#125;,<br>          <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>            <span class="hljs-comment">// 一旦有失败，将return的promise变为失败</span><br>            <span class="hljs-title function_">reject</span>(reason)<br>          &#125;<br>        )<br>      &#125;)<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  返回一个promise对象，它在指定的时间后才确定结果</span><br><span class="hljs-comment">  (在Promise.resolve()上加setTimeout)</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-title class_">Promise</span>.<span class="hljs-property">resolveDelay</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">value, time</span>) &#123;<br>    <span class="hljs-comment">// 返回一个成功/失败的promise</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) &#123;<br>          <span class="hljs-comment">// value是promise，使用value的结果作为new的promise的结果</span><br>          value.<span class="hljs-title function_">then</span>(resolve, reject)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// value不是promise =&gt; promise变为成功，数据是value</span><br>          <span class="hljs-title function_">resolve</span>(value)<br>        &#125;<br>      &#125;, time)<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  返回一个promise对象，它在指定的时间后才失败</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-title class_">Promise</span>.<span class="hljs-property">rejectDelay</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">reason, time</span>) &#123;<br>    <span class="hljs-comment">// 返回一个失败的promise</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">reject</span>(reason)<br>      &#125;, time)<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">Promise</span> = <span class="hljs-title class_">Promise</span> <span class="hljs-comment">// 向外暴露Promise</span><br>&#125;)(<span class="hljs-variable language_">window</span>)<br></code></pre></td></tr></table></figure><h3 id="3-2-Promise-class-js"><a href="#3-2-Promise-class-js" class="headerlink" title="3.2 Promise_class.js"></a>3.2 Promise_class.js</h3><blockquote><p>Promise_class.js 是 ES6 class 实现 Promise 的完整版</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  类版本</span><br><span class="hljs-comment">  自定义Promise函数模块：IIFE</span><br><span class="hljs-comment">*/</span><br>;(<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">window</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PENDING</span> = <span class="hljs-string">&#x27;pending&#x27;</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">RESOLVED</span> = <span class="hljs-string">&#x27;resolved&#x27;</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">REJECTED</span> = <span class="hljs-string">&#x27;rejected&#x27;</span><br><br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Promise</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Promise构造函数</span><br><span class="hljs-comment">    excutor: 执行器函数(同步执行)</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">excutor</span>) &#123;<br>      <span class="hljs-comment">// 将当前Promise对象保存起来</span><br>      <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span><br>      self.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">PENDING</span> <span class="hljs-comment">// 给promise对象指定status属性，初始值为pending</span><br>      self.<span class="hljs-property">data</span> = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// 给promise对象指定一个用于存储结果数据的属性</span><br>      self.<span class="hljs-property">callbacks</span> = [] <span class="hljs-comment">// 每个元素的结构： &#123;onResolved() &#123;&#125;, onRejected() &#123;&#125;&#125;</span><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-comment">// 如果当前状态不是pending，直接结束</span><br>        <span class="hljs-keyword">if</span> (self.<span class="hljs-property">status</span> !== <span class="hljs-variable constant_">PENDING</span>) &#123;<br>          <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-comment">// 将状态改为resolved</span><br>        self.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">RESOLVED</span><br>        <span class="hljs-comment">// 保存value数据</span><br>        self.<span class="hljs-property">data</span> = value<br>        <span class="hljs-comment">// 如果有待执行的callback函数，立即异步执行回调函数onResolved</span><br>        <span class="hljs-keyword">if</span> (self.<span class="hljs-property">callbacks</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-comment">// 放入队列中执行所有成功的回调</span><br>            self.<span class="hljs-property">callbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">callbacksObj</span> =&gt;</span> &#123;<br>              callbacksObj.<span class="hljs-title function_">onResolved</span>(value)<br>            &#125;)<br>          &#125;)<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">reject</span>(<span class="hljs-params">reason</span>) &#123;<br>        <span class="hljs-comment">// 如果当前状态不是pending，直接结束</span><br>        <span class="hljs-keyword">if</span> (self.<span class="hljs-property">status</span> !== <span class="hljs-variable constant_">PENDING</span>) &#123;<br>          <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-comment">// 将状态改为rejected</span><br>        self.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">REJECTED</span><br>        <span class="hljs-comment">// 保存value数据</span><br>        self.<span class="hljs-property">data</span> = reason<br>        <span class="hljs-comment">// 如果有待执行的callback函数，立即异步执行回调函数onRejected</span><br>        <span class="hljs-keyword">if</span> (self.<span class="hljs-property">callbacks</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-comment">// 放入队列中执行所有失败的回调</span><br>            self.<span class="hljs-property">callbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">callbacksObj</span> =&gt;</span> &#123;<br>              callbacksObj.<span class="hljs-title function_">onRejected</span>(reason)<br>            &#125;)<br>          &#125;)<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">//立即同步执行excutor函数</span><br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-title function_">excutor</span>(resolve, reject)<br>      &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-comment">// 如果执行器抛出异常，promise对象变为rejected状态</span><br>        <span class="hljs-title function_">reject</span>(error)<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Promise原型对象的then()</span><br><span class="hljs-comment">    指定成功和失败的回调函数</span><br><span class="hljs-comment">    返回一个新的promise对象</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-title function_">then</span>(<span class="hljs-params">onResolved, onRejected</span>) &#123;<br>      onResolved = <span class="hljs-keyword">typeof</span> onResolved === <span class="hljs-string">&#x27;function&#x27;</span> ? onResolved : <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value <span class="hljs-comment">// 向后传递成功的value</span><br>      <span class="hljs-comment">// 指定默认的失败的回调（实现错误/异常穿透的关键点）</span><br>      onRejected =<br>        <span class="hljs-keyword">typeof</span> onRejected === <span class="hljs-string">&#x27;function&#x27;</span><br>          ? onRejected<br>          : <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>              <span class="hljs-keyword">throw</span> reason<br>            &#125; <span class="hljs-comment">// 向后传递失败的reason</span><br>      <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span><br>      <span class="hljs-comment">// 返回一个新的promise对象</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        调用指定的回调函数处理</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">callback</span>) &#123;<br>          <span class="hljs-comment">/*</span><br><span class="hljs-comment">            1. 如果抛出异常，return的promise就会失败，reason就是error</span><br><span class="hljs-comment">            2. 如果回调函数执行返回的不是promise，return的promise就会成功，value就是返回的值</span><br><span class="hljs-comment">            3. 如果回调函数执行返回的是promise，return的promise的结果就是这个promise的结果</span><br><span class="hljs-comment">            */</span><br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">callback</span>(self.<span class="hljs-property">data</span>)<br>            <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) &#123;<br>              <span class="hljs-comment">// 第三种情况</span><br>              result.<span class="hljs-title function_">then</span>(<br>                <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-title function_">resolve</span>(value), <span class="hljs-comment">// 当result成功时，让return的promise也成功</span><br>                <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> <span class="hljs-title function_">reject</span>(reason) <span class="hljs-comment">// 当result失败时，让return的promise也失败</span><br>              )<br>              <span class="hljs-comment">// result.then(resolve, reject) // 简洁的写法</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-comment">//第二种情况</span><br>              <span class="hljs-title function_">resolve</span>(result)<br>            &#125;<br>          &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>            <span class="hljs-comment">// 第一种情况</span><br>            <span class="hljs-title function_">reject</span>(error)<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (self.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">PENDING</span>) &#123;<br>          <span class="hljs-comment">// 如果当前状态还是pending状态，将回调函数保存起来</span><br>          self.<span class="hljs-property">callbacks</span>.<span class="hljs-title function_">push</span>(&#123;<br>            <span class="hljs-title function_">onResolved</span>(<span class="hljs-params">value</span>) &#123;<br>              <span class="hljs-title function_">handle</span>(onResolved)<br>            &#125;,<br>            <span class="hljs-title function_">onRejected</span>(<span class="hljs-params">reason</span>) &#123;<br>              <span class="hljs-title function_">handle</span>(onRejected)<br>            &#125;,<br>          &#125;)<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (self.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">RESOLVED</span>) &#123;<br>          <span class="hljs-comment">// 如果当前状态已经改变为resolved状态，异步执行onResolved并改变return的promise状态</span><br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">handle</span>(onResolved)<br>          &#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 如果当前状态已经改变为rejected状态，异步执行onRejected并改变return的promise状态</span><br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">handle</span>(onRejected)<br>          &#125;)<br>        &#125;<br>      &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Promise原型对象的catch()</span><br><span class="hljs-comment">    指定成功和失败的回调函数</span><br><span class="hljs-comment">    返回一个新的promise对象</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">catch</span>(onRejected) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">then</span>(<span class="hljs-literal">undefined</span>, onRejected)<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Promise函数对象的resolve方法</span><br><span class="hljs-comment">    返回一个指定结果的成功的promise</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">static</span> resolve = <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>      <span class="hljs-comment">// 返回一个成功/失败的promise</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) &#123;<br>          <span class="hljs-comment">// value是promise，使用value的结果作为new的promise的结果</span><br>          value.<span class="hljs-title function_">then</span>(resolve, reject)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// value不是promise =&gt; promise变为成功，数据是value</span><br>          <span class="hljs-title function_">resolve</span>(value)<br>        &#125;<br>      &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Promise函数对象的reject方法</span><br><span class="hljs-comment">    返回一个指定reason的失败的promise</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">static</span> reject = <span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) &#123;<br>      <span class="hljs-comment">// 返回一个失败的promise</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">reject</span>(reason)<br>      &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Promise函数对象的all方法</span><br><span class="hljs-comment">    返回一个promise，只有当所有promise都成功时才成功，否则只要有一个失败的就失败</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">static</span> all = <span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) &#123;<br>      <span class="hljs-comment">// 用来保存成功promise的数量</span><br>      <span class="hljs-keyword">let</span> resolvedCount = <span class="hljs-number">0</span><br>      <span class="hljs-comment">// 用来保存所有成功value的数组</span><br>      <span class="hljs-keyword">const</span> values = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(promises.<span class="hljs-property">length</span>)<br>      <span class="hljs-comment">// 返回一个新的promise</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 遍历promises获取每个promise的结果</span><br>        promises.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">p, index</span>) =&gt;</span> &#123;<br>          <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(p).<span class="hljs-title function_">then</span>(<br>            <span class="hljs-comment">// 将p用Promise.resolve()包裹起来使得p可以是一个值</span><br>            <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>              resolvedCount++ <span class="hljs-comment">// 成功的数量加1</span><br>              <span class="hljs-comment">// p成功，将成功的value按顺序保存到values</span><br>              values[index] = value<br>              <span class="hljs-comment">// 如果全部成功了。将return的promise改为成功</span><br>              <span class="hljs-keyword">if</span> (resolvedCount === promises.<span class="hljs-property">length</span>) &#123;<br>                <span class="hljs-title function_">resolve</span>(values)<br>              &#125;<br>            &#125;,<br>            <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>              <span class="hljs-comment">// 只要有一个失败了，return的promise就失败</span><br>              <span class="hljs-title function_">reject</span>(reason)<br>            &#125;<br>          )<br>        &#125;)<br>      &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Promise函数对象的all方法</span><br><span class="hljs-comment">    返回一个promise，其结果由第一个完成的promise决定</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">static</span> race = <span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) &#123;<br>      <span class="hljs-comment">// 返回一个promise</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 遍历promises获取每个promise的结果</span><br>        promises.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">p, index</span>) =&gt;</span> &#123;<br>          <span class="hljs-comment">// 只有第一次调用的有效果</span><br>          <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(p).<span class="hljs-title function_">then</span>(<br>            <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>              <span class="hljs-comment">// 一旦有成功，将return的promise变为成功</span><br>              <span class="hljs-title function_">resolve</span>(value)<br>            &#125;,<br>            <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>              <span class="hljs-comment">// 一旦有失败，将return的promise变为失败</span><br>              <span class="hljs-title function_">reject</span>(reason)<br>            &#125;<br>          )<br>        &#125;)<br>      &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    返回一个promise对象，它在指定的时间后才确定结果</span><br><span class="hljs-comment">    (在Promise.resolve()上加setTimeout)</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">static</span> resolveDelay = <span class="hljs-keyword">function</span> (<span class="hljs-params">value, time</span>) &#123;<br>      <span class="hljs-comment">// 返回一个成功/失败的promise</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) &#123;<br>            <span class="hljs-comment">// value是promise，使用value的结果作为new的promise的结果</span><br>            value.<span class="hljs-title function_">then</span>(resolve, reject)<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// value不是promise =&gt; promise变为成功，数据是value</span><br>            <span class="hljs-title function_">resolve</span>(value)<br>          &#125;<br>        &#125;, time)<br>      &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    返回一个promise对象，它在指定的时间后才失败</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">static</span> rejectDelay = <span class="hljs-keyword">function</span> (<span class="hljs-params">reason, time</span>) &#123;<br>      <span class="hljs-comment">// 返回一个失败的promise</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-title function_">reject</span>(reason)<br>        &#125;, time)<br>      &#125;)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">Promise</span> = <span class="hljs-title class_">Promise</span> <span class="hljs-comment">// 向外暴露Promise</span><br>&#125;)(<span class="hljs-variable language_">window</span>)<br></code></pre></td></tr></table></figure><h3 id="3-3-then-js"><a href="#3-3-then-js" class="headerlink" title="3.3 then.js"></a>3.3 then.js</h3><blockquote><p>then.js 是第二次重写的 then()方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  Promise原型对象的then()</span><br><span class="hljs-comment">  指定成功和失败的回调函数</span><br><span class="hljs-comment">  返回一个新的promise对象</span><br><span class="hljs-comment">  返回promise的结果由onResolved/onRejected执行结果决定</span><br><span class="hljs-comment">  */</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">then</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) &#123;<br>  <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span><br>  <span class="hljs-comment">// 指定回调函数的默认值（必须是函数）</span><br>  onResolved = <span class="hljs-keyword">typeof</span> onResolved === <span class="hljs-string">&#x27;function&#x27;</span> ? onResolved : <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value<br>  onRejected =<br>    <span class="hljs-keyword">typeof</span> onRejected === <span class="hljs-string">&#x27;function&#x27;</span><br>      ? onRejected<br>      : <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">throw</span> reason<br>        &#125;<br>  <span class="hljs-comment">// 返回一个新的promise</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     执行指定的回调函数</span><br><span class="hljs-comment">     根据执行的结果改变这个新返回的promise的状态和数据</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">callback</span>) &#123;<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        上面新返回的promise的结果由onResolved/onRejected执行结果决定</span><br><span class="hljs-comment">        1.抛出异常，将要返回的promise的结果为失败，reason为异常</span><br><span class="hljs-comment">        2.如果onResolved()返回的是一个promise，这个返回的promise的结果就是这个将要返回的promise的结果</span><br><span class="hljs-comment">        3.如果onResolved()返回的不是promise，将要返回的promise为成功，value为返回值</span><br><span class="hljs-comment">        */</span><br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">callback</span>(self.<span class="hljs-property">data</span>)<br>        <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) &#123;<br>          <span class="hljs-comment">//2.</span><br>          <span class="hljs-comment">// result.then(</span><br>          <span class="hljs-comment">//   value =&gt; resolve(value),</span><br>          <span class="hljs-comment">//   reason =&gt; reject(reason)</span><br>          <span class="hljs-comment">// )</span><br>          result.<span class="hljs-title function_">then</span>(resolve.<span class="hljs-property">reject</span>) <span class="hljs-comment">//简洁的写法</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">//3.</span><br>          <span class="hljs-title function_">resolve</span>(result)<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-title function_">reject</span>(error)<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (self.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">RESOLVED</span>) &#123;<br>      <span class="hljs-comment">//当前promise的状态是resolved</span><br>      <span class="hljs-comment">// 立即异步执行成功的回调函数</span><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">handle</span>(onResolved)<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (self.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">REJECTED</span>) &#123;<br>      <span class="hljs-comment">//当前promise的状态是rejected</span><br>      <span class="hljs-comment">// 立即异步执行成功的回调函数</span><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">handle</span>(onRejected)<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">//当前promise的状态是pending</span><br>      <span class="hljs-comment">// 将成功和失败的回调函数保存到callbacks容器中缓存起来</span><br>      self.<span class="hljs-property">callbacks</span>.<span class="hljs-title function_">push</span>(&#123;<br>        <span class="hljs-comment">//在resolve()/reject()中等待调用这两个函数</span><br>        <span class="hljs-title function_">onResolved</span>(<span class="hljs-params">value</span>) &#123;<br>          <span class="hljs-comment">//这里使用ES6中的对象字面量特性省略function</span><br>          <span class="hljs-title function_">handle</span>(onResolved)<br>        &#125;,<br>        <span class="hljs-title function_">onRejected</span>(<span class="hljs-params">reason</span>) &#123;<br>          <span class="hljs-title function_">handle</span>(onRejected)<br>        &#125;,<br>      &#125;)<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-Promise-html"><a href="#3-4-Promise-html" class="headerlink" title="3.4 Promise.html"></a>3.4 Promise.html</h3><blockquote><p>自定义 Promise.html 文件用来测试</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;script src=&quot;Promise.js&quot;&gt;&lt;/script&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;Promise_class.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- &lt;script&gt;</span><br><span class="hljs-comment">    /*</span><br><span class="hljs-comment">    测试.then()和.catch()</span><br><span class="hljs-comment">    Promise.resolve(value)</span><br><span class="hljs-comment">    value是将被Promise对象解析的参数，可以是一个成功/失败的Promise对象或值</span><br><span class="hljs-comment">    Promise.reject(reason)</span><br><span class="hljs-comment">    reason表示被拒绝的原因，不能是Promise对象</span><br><span class="hljs-comment">    */</span><br><span class="hljs-comment">    const p = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="hljs-comment">      setTimeout(() =&gt; &#123;</span><br><span class="hljs-comment">        //resolve(1)</span><br><span class="hljs-comment">        reject(2)</span><br><span class="hljs-comment">        //console.log(&#x27;reject()改变状态之后&#x27;)</span><br><span class="hljs-comment">      &#125;, 100)</span><br><span class="hljs-comment">    &#125;).then(</span><br><span class="hljs-comment">      value =&gt; &#123;</span><br><span class="hljs-comment">        console.log(&#x27;onResolved1()&#x27;, value)</span><br><span class="hljs-comment">      &#125;,</span><br><span class="hljs-comment">      reason =&gt; &#123;</span><br><span class="hljs-comment">        console.log(&#x27;onRejected1()&#x27;, reason)</span><br><span class="hljs-comment">        //return 3</span><br><span class="hljs-comment">        //throw 4</span><br><span class="hljs-comment">        return new Promise((resolve, reject) =&gt; &#123;reject(5)&#125;)</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    ).then(</span><br><span class="hljs-comment">      value =&gt; &#123;</span><br><span class="hljs-comment">        console.log(&#x27;onResolved2()&#x27;, value)</span><br><span class="hljs-comment">      &#125;,</span><br><span class="hljs-comment">      reason =&gt; &#123;</span><br><span class="hljs-comment">        console.log(&#x27;onRejected2()&#x27;, reason)</span><br><span class="hljs-comment">        throw 6</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    ).catch(</span><br><span class="hljs-comment">      reason =&gt; &#123;</span><br><span class="hljs-comment">        console.log(&#x27;onRejected3()&#x27;, reason)</span><br><span class="hljs-comment">        return new Promise(() =&gt; &#123;&#125;) // 中断promise链</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    ).then(</span><br><span class="hljs-comment">      value =&gt; &#123;</span><br><span class="hljs-comment">        console.log(&#x27;onResolved4()&#x27;, value)</span><br><span class="hljs-comment">      &#125;,</span><br><span class="hljs-comment">      reason =&gt; &#123;</span><br><span class="hljs-comment">        console.log(&#x27;onRejected4()&#x27;, reason)</span><br><span class="hljs-comment">        throw 6</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    )</span><br><span class="hljs-comment">  &lt;/script&gt; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;script&gt;</span><br><span class="hljs-comment">    /*</span><br><span class="hljs-comment">    测试Promise.resolve(value)和Promise.reject(reason)</span><br><span class="hljs-comment">    语法</span><br><span class="hljs-comment">    1.Promise.resolve(value)</span><br><span class="hljs-comment">    value是将被Promise对象解析的参数，可以是一个成功/失败的Promise对象或值</span><br><span class="hljs-comment">    2.Promise.reject(reason)</span><br><span class="hljs-comment">    reason表示被拒绝的原因，不能是Promise对象</span><br><span class="hljs-comment">    */</span><br><span class="hljs-comment">    const p1 = Promise.resolve(2) // 如果是一般值，p1成功，value就是这个值</span><br><span class="hljs-comment">    const p2 = Promise.resolve(Promise.resolve(3)) // 如果是成功的promise，p2成功，value就是这个promise的value</span><br><span class="hljs-comment">    const p3 = Promise.resolve(Promise.reject(4)) // 如果是失败的promise，p3失败，reason就是这个promise的reason</span><br><span class="hljs-comment">    p1.then(value =&gt; &#123;</span><br><span class="hljs-comment">      console.log(&#x27;p1&#x27;, value)</span><br><span class="hljs-comment">    &#125;)</span><br><span class="hljs-comment">    p2.then(value =&gt; &#123;</span><br><span class="hljs-comment">      console.log(&#x27;p2&#x27;, value)</span><br><span class="hljs-comment">    &#125;)</span><br><span class="hljs-comment">    p3.catch(reason =&gt; &#123;</span><br><span class="hljs-comment">      console.log(&#x27;p3&#x27;, reason)</span><br><span class="hljs-comment">    &#125;)</span><br><span class="hljs-comment">  &lt;/script&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">    测试Promise.all(value)和Promise.race(reason)</span></span><br><span class="hljs-comment"><span class="language-javascript">    语法</span></span><br><span class="hljs-comment"><span class="language-javascript">    1.Promise.resolve(value)</span></span><br><span class="hljs-comment"><span class="language-javascript">    value是将被Promise对象解析的参数，可以是一个成功/失败的Promise对象或值</span></span><br><span class="hljs-comment"><span class="language-javascript">    2.Promise.reject(reason)</span></span><br><span class="hljs-comment"><span class="language-javascript">    reason表示被拒绝的原因，不能是Promise对象</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> p1 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 如果是一般值，p1成功，value就是这个值</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> p2 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>)) <span class="hljs-comment">// 如果是成功的promise，p2成功，value就是这个promise的value</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> p3 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-number">4</span>)) <span class="hljs-comment">// 如果是失败的promise，p3失败，reason就是这个promise的reason(只返回第一个失败的reason)</span></span><br><span class="language-javascript">      <span class="hljs-comment">/*const p4 = new Promise((resolve, reject) =&gt;</span></span><br><span class="hljs-comment"><span class="language-javascript">      setTimeout(() =&gt; &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">        resolve(5)</span></span><br><span class="hljs-comment"><span class="language-javascript">      &#125;, 1000)</span></span><br><span class="hljs-comment"><span class="language-javascript">    )*/</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> p4 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolveDelay</span>(<span class="hljs-number">5</span>, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 新的写法</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> p5 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-number">6</span>)</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> pAll = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p4, <span class="hljs-number">7</span>, p1, p2])</span><br><span class="language-javascript">      pAll.<span class="hljs-title function_">then</span>(</span><br><span class="language-javascript">        <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;all onResolved()&#x27;</span>, value)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;all onRejected()&#x27;</span>, reason)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      )</span><br><span class="language-javascript">      <span class="hljs-comment">/*const pRace = Promise.race([p4, 7, p1, p2])</span></span><br><span class="hljs-comment"><span class="language-javascript">    pRace.then(</span></span><br><span class="hljs-comment"><span class="language-javascript">      value =&gt; &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">        console.log(&#x27;race onResolved()&#x27;, value)</span></span><br><span class="hljs-comment"><span class="language-javascript">      &#125;,</span></span><br><span class="hljs-comment"><span class="language-javascript">      reason =&gt; &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">        console.log(&#x27;race onRejected()&#x27;, reason)</span></span><br><span class="hljs-comment"><span class="language-javascript">      &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">    )*/</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">    测试自定义的两个函数</span></span><br><span class="hljs-comment"><span class="language-javascript">    Promise.resolveDelay()和Promise.rejectDelay()</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> p6 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolveDelay</span>(<span class="hljs-number">66</span>, <span class="hljs-number">2000</span>)</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> p7 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">rejectDelay</span>(<span class="hljs-number">77</span>, <span class="hljs-number">3000</span>)</span><br><span class="language-javascript">      p6.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;p6&#x27;</span>, value)</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">      p7.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;p7&#x27;</span>, reason)</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="四、async-与-await"><a href="#四、async-与-await" class="headerlink" title="四、async 与 await"></a>四、async 与 await</h2><h3 id="4-1-async-函数"><a href="#4-1-async-函数" class="headerlink" title="4.1 async 函数"></a>4.1 async 函数</h3><ol><li>函数的返回值为 promise 对象</li><li>promise 对象的结果由 async 函数执行的返回值决定</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//return 1</span><br>  <span class="hljs-comment">// 返回一个Promise对象（PromiseStatus为resolved，PromiseValue为1）</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-number">2</span><br>  <span class="hljs-comment">// 返回一个Promise对象（PromiseStatus为rejected，PromiseValue为2）</span><br>&#125;<br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">fn1</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br></code></pre></td></tr></table></figure><p>这时，可以将 result.then()：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//return 1</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">fn1</span>()<br>result.<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved()&#x27;</span>, value)<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onRejected()&#x27;</span>, reason)<br>  &#125;<br>)<br><span class="hljs-comment">// onRejected() 2</span><br></code></pre></td></tr></table></figure><p>也可以在异步函数中返回一个 promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//return Promise.reject(3)</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>)<br>&#125;<br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">fn1</span>()<br>result.<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved()&#x27;</span>, value)<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onRejected()&#x27;</span>, reason)<br>  &#125;<br>)<br><span class="hljs-comment">// onResolved() 3</span><br></code></pre></td></tr></table></figure><p>也就是说，一旦在函数前加 async，它返回的值都将被包裹在 Promise 中，这个 Promise 的结果由函数执行的结果决定。</p><p>上面的栗子都是立即成功/失败的 promise，也可以返回延迟成功/失败的 promise：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-number">4</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">fn1</span>()<br>result.<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 过1s后才异步执行回调函数 onResolved()</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onResolved()&#x27;</span>, value)<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onRejected()&#x27;</span>, reason)<br>  &#125;<br>)<br><span class="hljs-comment">// onResolved() 4</span><br></code></pre></td></tr></table></figure><h3 id="4-2-await-表达式"><a href="#4-2-await-表达式" class="headerlink" title="4.2 await 表达式"></a>4.2 await 表达式</h3><h4 id="MDN"><a href="#MDN" class="headerlink" title="MDN"></a>MDN</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function">async</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await">await</a></p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>[return_value] = await expression;</p><p><strong>表达式</strong></p><p>一个 <code>Promise</code> 对象或者任何要<strong>等待</strong>的<code>值</code>。</p><p><strong>返回值</strong></p><p>返回 Promise 对象的处理结果。如果<strong>等待</strong>的不是 Promise 对象，则返回该值本身。</p><p><strong>解释</strong></p><p><strong>await 表达式会暂停当前 async function 的执行，等待 Promise 处理完成。</strong></p><ol><li>await 右侧的表达式一般为 promise 对象，但也可以是其他的值</li><li>如果表达式是 promise 对象，await 返回的是 promise 成功的值</li><li>如果表达式是其他值，直接将此值作为 await 的返回值</li></ol><p>注意：</p><p>await 必须写在 async 函数中，但 async 函数中可以没有 await</p><p>如果 await 的 promise 失败了，就会抛出异常，需要通过 try…catch 来捕获处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-number">5</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn4</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">6</span><br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn3</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//const p = fn2() // 这种写法只能得到一个promise对象</span><br>  <span class="hljs-keyword">const</span> value = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fn2</span>() <span class="hljs-comment">// value 5</span><br>  <span class="hljs-comment">//const value = await fn4() // value 6</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;value&#x27;</span>, value)<br>&#125;<br><span class="hljs-title function_">fn3</span>()<br></code></pre></td></tr></table></figure><p>不写 await，只能得到一个 promise 对象。在表达式前面加上 await，1s 后将得到 promise 的结果 5，但是要用 await 必须在函数上声明 async。</p><p>await 右侧表达式 fn2() 为 promise，得到的结果就是 promise 成功的 value；await 右侧表达式 fn4() 不是 promise，得到的结果就是这个值本身。</p><p>Promise 对象的结果也有可能失败：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">reject</span>(<span class="hljs-number">5</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn3</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> value = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fn2</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;value&#x27;</span>, value)<br>&#125;<br><span class="hljs-title function_">fn3</span>()<br><span class="hljs-comment">// 报错：Uncaught (in promise) 5</span><br></code></pre></td></tr></table></figure><p>await 只能得到成功的结果，要想得到失败的结果就要用 try/catch：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">reject</span>(<span class="hljs-number">5</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn3</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> value = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fn2</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;value&#x27;</span>, value)<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;得到失败的结果&#x27;</span>, error)<br>  &#125;<br>&#125;<br><span class="hljs-title function_">fn3</span>()<br><span class="hljs-comment">// 得到失败的结果 5</span><br></code></pre></td></tr></table></figure><p>下面这个栗子中，fn1 是第 2 种情况，fn2 是第 3 种情况，fn3 也是第 3 种情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//async声明的异步回调函数将返回一个promise</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn3</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-number">3</span> <span class="hljs-comment">// 抛出异常</span><br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn3</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> value = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fn1</span>() <span class="hljs-comment">// value 1</span><br>    <span class="hljs-comment">//const value = await fn2() // value 2</span><br>    <span class="hljs-comment">//const value = await fn3() // 得到失败的结果 3</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;value&#x27;</span>, value)<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;得到失败的结果&#x27;</span>, error)<br>  &#125;<br>&#125;<br><span class="hljs-title function_">fn3</span>()<br></code></pre></td></tr></table></figure><h2 id="五、JS-异步之宏队列与微队列"><a href="#五、JS-异步之宏队列与微队列" class="headerlink" title="五、JS 异步之宏队列与微队列"></a>五、JS 异步之宏队列与微队列</h2><p><img src="https://img-blog.csdnimg.cn/20200703144207979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTA4ODMy,size_16,color_FFFFFF,t_70" alt="img"></p><ol><li><p>JS 中用来存储待执行回调函数的队列包含 2 个不同特定的队列</p></li><li><p>宏队列：用来保存待执行的宏任务（回调），比如：定时器回调/DOM 事件回调/ajax 回调</p></li><li><p>微队列：用来保存待执行的微任务（回调），比如：promise 的回调/MutationObserver 的回调</p></li><li><p>JS 执行时会区别这 2 个队列</p><p>(1) JS 引擎首先必须执行所有的初始化同步任务代码</p><p>(2) 每次准备取出第一个宏任务前，都要将所有的微任务一个一个取出来执行</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 会立即被放入宏队列</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;timeout callback1()&#x27;</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 会立即被放入宏队列</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;timeout callback2()&#x27;</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 会立即被放入微队列</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Promise onResolved1()&#x27;</span>, value)<br>&#125;)<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 会立即被放入微队列</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Promise onResolved2()&#x27;</span>, value)<br>&#125;)<br><span class="hljs-comment">// Promise onResolved1() 1</span><br><span class="hljs-comment">// Promise onResolved2() 1</span><br><span class="hljs-comment">// timeout callback1()</span><br><span class="hljs-comment">// timeout callback2()</span><br></code></pre></td></tr></table></figure><p>先执行所有的同步代码，再执行队列代码。队列代码中，微队列中的回调函数优先执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">// 会立即被放入宏队列</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;timeout callback1()&#x27;</span>)<br>  <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123; <span class="hljs-comment">// 会立即被放入微队列</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Promise onResolved3()&#x27;</span>, value)<br>  &#125;<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">// 会立即被放入宏队列</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;timeout callback2()&#x27;</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123; <span class="hljs-comment">// 会立即被放入微队列</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Promise onResolved1()&#x27;</span>, value)<br>  &#125;<br>)<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123; <span class="hljs-comment">// 会立即被放入微队列</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Promise onResolved2()&#x27;</span>, value)<br>  &#125;<br>)<br><span class="hljs-comment">// Promise onResolved1() 1</span><br><span class="hljs-comment">// Promise onResolved2() 1</span><br><span class="hljs-comment">// timeout callback1()</span><br>  <span class="hljs-comment">// Promise onResolved3() 1</span><br><span class="hljs-comment">// timeout callback2()</span><br></code></pre></td></tr></table></figure><p>执行完 <code>timeout callback1()</code> 后 <code>Promise onResolved3()</code> 会立即被放入微队列。在执行 <code>timeout callback2()</code> 前，<code>Promise onResolved3()</code> 已经在微队列中了，所以先执行 <code>Promise onResolved3()</code>。</p><h2 id="六、相关面试题"><a href="#六、相关面试题" class="headerlink" title="六、相关面试题"></a>六、相关面试题</h2><h3 id="6-1-面试题-1"><a href="#6-1-面试题-1" class="headerlink" title="6.1 面试题 1"></a>6.1 面试题 1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>  <span class="hljs-title function_">resolve</span>()<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>)<br>  &#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>)<br><span class="hljs-comment">// 2 5 3 4 1</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">同步：[2,5]</span><br><span class="hljs-comment">异步：</span><br><span class="hljs-comment">宏队列：[1]</span><br><span class="hljs-comment">微队列：[3,4]</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>2 是 excutor 执行器，是同步回调函数，所以在同步代码中。.then() 中的函数才是异步回调</strong></p><p>其中，执行完 2 后改变状态为 resolve，第一个 .then() 中的 3 会放入微队列，但还没执行（promise 是 pending 状态），就不会把结果给第二个 then()，这时，4 就会缓存起来但不会被放入微队列。只有在微队列中的 3 执行完后才把 4 放入微队列。</p><p>所以顺序是：</p><p>1 放入宏队列，2 执行，3 放入微队列，4 缓存起来等待 Promise 的状态改变，5 执行，微队列中的 3 执行，4 放入微队列，微队列中的 4 执行，宏队列中的 1 执行。</p><h3 id="6-2-面试题-2"><a href="#6-2-面试题-2" class="headerlink" title="6.2 面试题 2"></a>6.2 面试题 2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">first</span> = (<span class="hljs-params"></span>) =&gt;<br>  <span class="hljs-comment">// 省略return所以不用&#123;&#125;而用()</span><br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">7</span>)<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>)<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-number">6</span>) <span class="hljs-comment">//没用，状态只能改变一次，在resolve(1)时就改变了</span><br>      &#125;, <span class="hljs-number">0</span>)<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>)<br>    &#125;)<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>)<br>    p.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">arg</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg)<br>    &#125;)<br>  &#125;)<br><span class="hljs-title function_">first</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">arg</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>)<br><span class="hljs-comment">// 3 7 4 1 2 5</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">宏：[5]</span><br><span class="hljs-comment">微：[1,2]</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="6-3-面试题-3"><a href="#6-3-面试题-3" class="headerlink" title="6.3 面试题 3"></a>6.3 面试题 3</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;0&#x27;</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br>  <span class="hljs-title function_">resolve</span>()<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;3&#x27;</span>)<br>      <span class="hljs-title function_">resolve</span>()<br>    &#125;)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;4&#x27;</span>)<br>      &#125;)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;5&#x27;</span>)<br>      &#125;)<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;6&#x27;</span>)<br>  &#125;)<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;7&#x27;</span>)<br>  <span class="hljs-title function_">resolve</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;8&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">// 1 7 2 3 8 4 6 5 0</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">宏：[0]</span><br><span class="hljs-comment">微：[2, 8, 4, 6, 5]</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>顺序：</p><p>0 放入宏队列，同步执行 1，2 放入微队列，6 缓存到内部，同步执行 7，8 放入微队列，取出微队列中的 2 执行，同步执行 3，4 放入微队列，5 缓存到内部，6 放入微队列(因为 6 的前一个 promise 已经执行完了返回成功结果 undefined)，取出微队列中的 8 执行，取出微队列中的 4 执行，5 放入微队列，取出微队列中的 6 执行，取出微队列中的 5 执行，取出宏队列中的 0 执行</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue项目线上页面刷新报404 解决方法</title>
    <link href="/blog/2020/11/21/vue/404/"/>
    <url>/blog/2020/11/21/vue/404/</url>
    
    <content type="html"><![CDATA[<h2 id="vue-项目线上页面刷新报-404-解决方法"><a href="#vue-项目线上页面刷新报-404-解决方法" class="headerlink" title="vue 项目线上页面刷新报 404 解决方法"></a>vue 项目线上页面刷新报 404 解决方法</h2><blockquote><p>在上线 vue 开发的前端网页上线后，刷新页面报 404 错误，因为网页上显示的是静态绝对路径，实际上服务器上是没有改路径的所以刷新汇报错误。</p></blockquote><a id="more"></a><h3 id="vue-框架中解决-404"><a href="#vue-框架中解决-404" class="headerlink" title="vue 框架中解决 404"></a>vue 框架中解决 404</h3><p><code>vue router</code> <code>mode</code> 默认为<code>hash</code>, 这样的<code>url</code>中带有<code>#</code>，如果把<code>mode: &#39;history&#39;</code>就能去掉#号，也可以正常访问，但是再次刷新页面就会出现<code>404</code>错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>url</code>中带有<code>#</code>，让有强迫症的人很不爽，可以去掉，去掉后就需要改<code>nginx</code>配置文件了。</p><h3 id="修改-nginx-配置文件"><a href="#修改-nginx-配置文件" class="headerlink" title="修改 nginx 配置文件"></a>修改 nginx 配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">  location / &#123;<br>  <span class="hljs-comment"># ...</span><br>  <span class="hljs-comment"># 增加下列命令，index.html可换为项目中使用的其它文件名</span><br>  try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html;<br>&#125;<br></code></pre></td></tr></table></figure><p>将上面代码放入<code>nginx</code>配置文件中</p><p>保存退出</p><p>. ./nginx -t – 验证<code>nginx</code>配置文件是否正确<br>. ./nginx -s reload – 重启<code>nginx</code><br>记得修改完<code>nginx</code>配置文件一定要重启<code>nginx</code> 不然没有效果！！！</p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>按需引入ElementUI 和 AntD</title>
    <link href="/blog/2020/11/21/vue/elementandt/"/>
    <url>/blog/2020/11/21/vue/elementandt/</url>
    
    <content type="html"><![CDATA[<h2 id="vue-按需引入-Element-UI-的方法"><a href="#vue-按需引入-Element-UI-的方法" class="headerlink" title="vue 按需引入 Element UI 的方法"></a>vue 按需引入 Element UI 的方法</h2><blockquote><p>在我们的实际项目开发中，多数是采用按需引入的模式来进行开发的，那么具体应该如何操作呢，可能会有许多新人傻傻分不清楚，具体将在下文讲到。</p></blockquote><ol><li>按需引入</li></ol><p>借助 <code>babel-plugin-component</code>，我们可以只引入需要的组件，以达到减小项目体积的目的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install babel-plugin-component -D<br></code></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>更改.babelrc 文件</li></ol><p>配置 babel，修改 babel.config.js/.babelrc 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>],<br>  <span class="hljs-attr">plugins</span>: [<br>    [<br>      <span class="hljs-string">&#x27;component&#x27;</span>,<br>      &#123;<br>        <span class="hljs-attr">libraryName</span>: <span class="hljs-string">&#x27;element-ui&#x27;</span>,<br>        <span class="hljs-attr">styleLibraryName</span>: <span class="hljs-string">&#x27;theme-chalk&#x27;</span>,<br>      &#125;,<br>    ],<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>第三步</p></li><li><p>在 <code>src</code> 文件夹中新建我们的 <code>element</code> 文件夹，并在里面新建一个 <code>index.js</code> 文件</p></li><li><p>在<code>index</code>文件中去书写我们需要引入的部分组件</p></li><li><p>在 <code>main.js</code> 中使用该文件，就大功告成了</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// element/index.js</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span>, <span class="hljs-title class_">Select</span>, <span class="hljs-title class_">Switch</span>, <span class="hljs-title class_">MessageBox</span>, <span class="hljs-title class_">Message</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-keyword">const</span> element = &#123;<br>  <span class="hljs-attr">install</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">Vue</span>) &#123;<br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Button</span>)<br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Switch</span>)<br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Select</span>)<br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$msgbox</span> = <span class="hljs-title class_">MessageBox</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$alert</span> = <span class="hljs-title class_">MessageBox</span>.<span class="hljs-property">alert</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$confirm</span> = <span class="hljs-title class_">MessageBox</span>.<span class="hljs-property">confirm</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$message</span> = <span class="hljs-title class_">Message</span><br>  &#125;,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> element<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> element <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./element/index&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(element)<br></code></pre></td></tr></table></figure><h2 id="vue-按需引入-Antd-vue-的方法"><a href="#vue-按需引入-Antd-vue-的方法" class="headerlink" title="vue 按需引入 Antd-vue 的方法"></a>vue 按需引入 Antd-vue 的方法</h2><ol><li>从 <code>yarn</code> 或 <code>npm</code> 安装并引入 <code>ant-design-vue</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">//npm<br> npm install ant-design-vue --save<br>//yarn<br> yarn add ant-design-vue<br></code></pre></td></tr></table></figure><ol start="2"><li>开始配置按需引入配置</li></ol><p><code>babel-plugin-import</code>是一个用于按需加载组件代码和样式的 <code>babel</code> 插件，如果需要样式自动加载那么要先装这个插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install babel-plugin-import --dev<br></code></pre></td></tr></table></figure><p>安装完后需要配置<code>babel.plugin.config</code>文件<br>这里要注意 <code>style：true</code>会报错 ，把<code>true</code>换成<code>css</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>],<br>  <span class="hljs-attr">plugins</span>: [[<span class="hljs-string">&#x27;import&#x27;</span>, &#123; <span class="hljs-attr">libraryName</span>: <span class="hljs-string">&#x27;ant-design-vue&#x27;</span>, <span class="hljs-attr">libraryDirectory</span>: <span class="hljs-string">&#x27;es&#x27;</span>, <span class="hljs-attr">style</span>: <span class="hljs-string">&#x27;css&#x27;</span> &#125;]],<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>新建一个文件，把需要的组件引入进来</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ant-design-vue&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Button</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue.config.js</title>
    <link href="/blog/2020/11/21/vue/vue.config/"/>
    <url>/blog/2020/11/21/vue/vue.config/</url>
    
    <content type="html"><![CDATA[<h2 id="vue-config-js-常用配置"><a href="#vue-config-js-常用配置" class="headerlink" title="vue.config.js 常用配置"></a>vue.config.js 常用配置</h2><div class="note note-success">            <p>使用<code>vue-cli</code>3.0 搭建项目比之前更简洁，没有了<code>build</code>和<code>config</code>文件夹。<br><code>vue-cli3</code>的一些服务配置都迁移到<code>CLI Service</code>里面了，对于一些基础配置和一些扩展配置需要在根目录新建一个<code>vue.config.js</code>文件进行配置</p>          </div><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 选项...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="publicPath"><a href="#publicPath" class="headerlink" title="publicPath"></a>publicPath</h3><p><code>baseUrl</code>从 Vue CLI 3.3 起已弃用使用<code>publicPath</code>来替代。</p><p>在开发环境下，如果想把开发服务器架设在根路径，可以使用一个条件式的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">publicPath</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span> ? <span class="hljs-string">&#x27;/production-sub-path/&#x27;</span> : <span class="hljs-string">&#x27;/&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-success">            <p><code>Type: string</code><br><code>Default</code>: ‘/‘<br>  部署应用包时的基本 <code>URL</code>， 用法和 <code>webpack</code> 本身的  <code>output.publicPath</code>一致。<br>这个值也可以被设置为空字符串 (‘’) 或是相对路径 (‘./‘)，这样所有的资源都会被链接为相对路径，这样打出来的包可以被部署在任意路径。</p>          </div><h3 id="outputDir"><a href="#outputDir" class="headerlink" title="outputDir"></a>outputDir</h3><div class="note note-success">            <p><code>Type: string</code><br>Default: ‘<code>dist</code>‘<br>输出文件目录，当运行  <code>vue-cli-service build</code>  时生成的生产环境构建文件的目录。注意目标目录在构建之前会被清除 (构建时传入  –no-clean  可关闭该行为)。</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">outputDir</span>: <span class="hljs-string">&#x27;dist&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="assetsDir"><a href="#assetsDir" class="headerlink" title="assetsDir"></a>assetsDir</h3><div class="note note-success">            <p><code>Type: string</code><br>Default: ‘’<br>放置生成的静态资源 (<code>js</code>、<code>css</code>、<code>img</code>、<code>fonts</code>) 的目录。</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">assetsDir</span>: <span class="hljs-string">&#x27;assets&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：从生成的资源覆写 filename 或 chunkFilename 时，assetsDir 会被忽略。</p></blockquote><h3 id="indexPath"><a href="#indexPath" class="headerlink" title="indexPath"></a>indexPath</h3><div class="note note-success">            <p>Type: <code>string</code><br>Default: ‘<code>index.html</code>‘<br>指定生成的 <code>index.html</code> 的输出路径 (相对于 <code>outputDir</code>)。也可以是一个绝对路径。</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">indexPath</span>: <span class="hljs-string">&#x27;index.html&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="filenameHashing"><a href="#filenameHashing" class="headerlink" title="filenameHashing"></a>filenameHashing</h3><div class="note note-success">            <p>Type: <code>boolean</code><br>Default: <code>true</code><br>默认情况下，生成的静态资源在它们的文件名中包含了 <code>hash</code> 以便更好的控制缓存。然而，这也要求 <code>index</code> 的 <code>HTML</code> 是被 <code>Vue CLI</code>自动生成的。如果你无法使用 <code>Vue CLI</code> 生成的 <code>index HTML</code>，你可以通过将这个选项设为  false  来关闭文件名哈希。</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">filenameHashing</span>: <span class="hljs-literal">true</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h3><div class="note note-success">            <p>Type: <code>Object</code><br>Default: <code>undefined</code><br>在 <code>multi-page</code>（多页）模式下构建应用。每个“<code>page</code>”应该有一个对应的 <code>JavaScript</code> 入口文件。</p>          </div><p>其值应该是一个对象，对象的 key 是入口的名字，value 是：</p><div class="note note-success">            <p>一个指定了 <code>entry</code>, <code>template</code>, <code>filename</code>, <code>title</code> 和 <code>chunks</code> 的对象 (除了 <code>entry</code> 之外都是可选的)；<br>或一个指定其 <code>entry</code> 的字符串。</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br> <span class="hljs-comment">//用于多页配置 默认是undefined</span><br> <span class="hljs-attr">pages</span>:&#123;<br>  <span class="hljs-attr">index</span>:&#123;<br>   <span class="hljs-comment">//page的入口文件</span><br>   entry：<span class="hljs-string">&#x27;src/index/main.js&#x27;</span>,<br>   <span class="hljs-comment">//模板文件</span><br>   <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;index.html&#x27;</span>,<br>   <span class="hljs-comment">//在dist/index.html输出的文件</span><br>   <span class="hljs-attr">filename</span>:<span class="hljs-string">&#x27;index.html&#x27;</span>,<br>   <span class="hljs-comment">//当使用页面title选项时，</span><br>   <span class="hljs-comment">//template中的title标签需要&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br>   <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;标题&#x27;</span>,<br>   <span class="hljs-comment">//在这个页面中包含的块，默认情况下会包含</span><br>   <span class="hljs-comment">//提取出来的同意chunk和vendor chunk</span><br>   <span class="hljs-attr">chunk</span>:[<span class="hljs-string">&#x27;chunk-vendors&#x27;</span>,<span class="hljs-string">&#x27;chunk-common&#x27;</span>,<span class="hljs-string">&#x27;index&#x27;</span>]<br>  &#125;,<br>  <span class="hljs-comment">//当使用只有入口的字符串格式时</span><br>  <span class="hljs-comment">//模板文件默认是`public/subpage.html`,</span><br>  <span class="hljs-comment">//如果不存在，就回退到`public/index.html`,</span><br>  <span class="hljs-comment">//输入文件默认是`subpage.html`.</span><br>  <span class="hljs-attr">subpage</span>:<span class="hljs-string">&#x27;src/subpage/main.js&#x27;</span><br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：当在 多页应用 模式下构建时，<code>webpack</code> 配置会包含不一样的插件 (这时会存在多个  html-webpack-plugin  和  <code>preload-webpack-plugin</code>的实例)。如果你试图修改这些插件的选项，请确认运行  <code>vue inspect</code>。</p></blockquote><h3 id="lintOnSave"><a href="#lintOnSave" class="headerlink" title="lintOnSave"></a>lintOnSave</h3><div class="note note-success">            <p>Type: <code>boolean | &#39;error&#39;</code><br>Default: <code>true</code><br>是否在保存的时候使用 <code>eslint-loader</code> 进行检查。 有效的值：<code>ture</code> | <code>false</code> | <code>&quot;error&quot;</code>  当设置为 <code>&quot;error&quot;</code> 时，检查出的错误会触发编译失败。</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">lintOnSave</span>: <span class="hljs-literal">true</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="runtimeCompiler"><a href="#runtimeCompiler" class="headerlink" title="runtimeCompiler"></a>runtimeCompiler</h3><div class="note note-success">            <p>Type: <code>boolean</code><br>Default: <code>false</code><br>是否使用包含运行时编译器的 <code>Vue</code> 构建版本。设置为  <code>true</code>  后你就可以在 <code>Vue</code> 组件中使用  <code>template</code>  选项了，但是这会让你的应用额外增加 <code>10kb</code> 左右。</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">runtimeCompiler</span>: <span class="hljs-literal">false</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="transpileDependenciesCDN"><a href="#transpileDependenciesCDN" class="headerlink" title="transpileDependenciesCDN"></a>transpileDependenciesCDN</h3><div class="note note-success">            <p>Type: <code>Array&lt;string | RegExp&gt;</code><br>Default: []<br>默认情况下  <code>babel-loader</code>  会忽略所有  <code>node_modules</code>  中的文件。如果你想要通过 <code>Babel</code> 显式转译一个依赖，可以在这个选项中列出来。</p>          </div><h3 id="productionSourceMap"><a href="#productionSourceMap" class="headerlink" title="productionSourceMap"></a>productionSourceMap</h3><div class="note note-success">            <p>Type: <code>boolean</code><br>Default: <code>true</code><br>如果你不需要生产环境的 <code>source map</code>，可以将其设置为 <code>false</code> 以加速生产环境构建。</p>          </div><h3 id="crossorigin"><a href="#crossorigin" class="headerlink" title="crossorigin"></a>crossorigin</h3><div class="note note-success">            <p>Type: <code>string</code><br>Default: <code>undefined</code><br>设置生成的 <code>HTML</code> 中  <code>&lt;link rel=&quot;stylesheet&quot;&gt;</code>  和  <code>&lt;script&gt;</code>  标签的  <code>crossorigin</code>  属性。</p>          </div><h3 id="integrity"><a href="#integrity" class="headerlink" title="integrity"></a>integrity</h3><div class="note note-success">            <p>Type: <code>boolean</code><br>Default: <code>false</code><br>在生成的 <code>HTML</code> 中的  <code>&lt;link rel=&quot;stylesheet&quot;&gt;</code>和  <code>&lt;script&gt;</code>  标签上启用  <code>Subresource</code> <code>Integrity</code> (SRI)。如果你构建后的文件是部署在 <code>CDN</code> 上的，启用该选项可以提供额外的安全性。</p>          </div><h2 id="Webpack-相关配置"><a href="#Webpack-相关配置" class="headerlink" title="Webpack 相关配置"></a>Webpack 相关配置</h2><h3 id="configureWebpack"><a href="#configureWebpack" class="headerlink" title="configureWebpack"></a>configureWebpack</h3><div class="note note-success">            <p>Type: <code>Object | Function</code><br>如果这个值是一个对象，则会通过<code>webpack-merge</code>  合并到最终的配置中。<br>如果这个值是一个函数，则会接收被解析的配置作为参数。该函数及可以修改配置并不返回任何东西，也可以返回一个被克隆或合并过的配置版本。</p>          </div><h3 id="chainWebpack"><a href="#chainWebpack" class="headerlink" title="chainWebpack"></a>chainWebpack</h3><div class="note note-success">            <p>Type: <code>Function</code><br>是一个函数，会接收一个基于 <code>webpack-chain</code> 的 <code>ChainableConfig</code> 实例。允许对内部的 <code>webpack</code> 配置进行更细粒度的修改。</p>          </div><h2 id="Css-相关配置"><a href="#Css-相关配置" class="headerlink" title="Css 相关配置"></a>Css 相关配置</h2><h3 id="css-modules"><a href="#css-modules" class="headerlink" title="css.modules"></a>css.modules</h3><div class="note note-success">            <p>Type: <code>boolean</code><br>Default: <code>false</code><br>默认情况下，只有  <code>*.module.[ext]</code>结尾的文件才会被视作 <code>CSS</code> <code>Modules</code> 模块。设置为  <code>true</code>  后你就可以去掉文件名中的  <code>.module</code>  并将所有的  <code>*.(css|scss|sass|less|styl(us)?)</code>  文件视为 <code>CSS</code> <code>Modules</code> 模块。</p>          </div><h3 id="css-extract"><a href="#css-extract" class="headerlink" title="css.extract"></a>css.extract</h3><div class="note note-success">            <p>Type: <code>boolean | Object</code><br>Default: 生产环境下是  <code>true</code>，开发环境下是  <code>false</code><br>是否将组件中的 <code>CSS</code> 提取至一个独立的 <code>CSS</code> 文件中 (而不是动态注入到 <code>JavaScript</code> 中的 <code>inline</code> 代码)。</p>          </div><h3 id="css-sourceMap"><a href="#css-sourceMap" class="headerlink" title="css.sourceMap"></a>css.sourceMap</h3><div class="note note-success">            <p>Type: <code>boolean</code><br>Default: <code>false</code><br>是否为 <code>CSS</code> 开启 <code>source map</code>。设置为 <code>true</code> 之后可能会影响构建的性能。</p>          </div><h3 id="css-loaderOptions"><a href="#css-loaderOptions" class="headerlink" title="css.loaderOptions"></a>css.loaderOptions</h3><div class="note note-success">            <p>Type: <code>Object</code><br>Default: {}<br>向 <code>CSS</code> 相关的 <code>loader</code> 传递选项。</p>          </div><p>支持的 <code>loader</code> 有：</p><ul><li><p>css-loader</p></li><li><p>postcss-loader</p></li><li><p>sass-loader</p></li><li><p>less-loader</p></li><li><p>stylus-loader</p></li></ul><h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h3><div class="note note-success">            <p>Type: <code>Object</code><br>所有  <code>webpack-dev-server</code>  的选项都支持。注意：<br>有些值像  <code>host</code>、<code>port</code>  和  <code>https</code>  可能会被命令行参数覆写。<br>有些值像  <code>publicPath</code>  和  <code>historyApiFallback</code>  不应该被修改，因为它们需要和开发服务器的  <code>publicPath</code>  同步以保障正常的工作。</p>          </div><h3 id="devServer-proxy"><a href="#devServer-proxy" class="headerlink" title="devServer.proxy"></a>devServer.proxy</h3><div class="note note-success">            <p>Type: <code>string | Object</code><br>如果你的前端应用和后端 <code>API</code> 服务器没有运行在同一个主机上，你需要在开发环境下将 <code>API</code> 请求代理到 API 服务器。这个问题可以通过  <code>vue.config.js</code>  中的  <code>devServer.proxy</code>  选项来配置。</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">runtimeCompiler</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-comment">// 匹配请求路径中的字符，</span><br>      <span class="hljs-comment">// 如果符合就用这个代理对象代理本次请求，路径为target的网址，</span><br>      <span class="hljs-comment">// changeOrigin为是否跨域，</span><br>      <span class="hljs-comment">// 如果不想始终传递这个前缀，可以重写路径</span><br>      <span class="hljs-comment">// pathRewrite为是否将指定字符串转换一个再发过去。</span><br>      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:9001&#x27;</span>,<br>        <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<br>          <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a>parallel</h3><div class="note note-success">            <p>Type: <code>boolean</code><br>Default: require(‘os’).cpus().length &gt; 1<br>是否为 <code>Babel</code> 或 <code>TypeScript</code> 使用  <code>thread-loader</code>。该选项在系统的 <code>CPU</code> 有多于一个内核时自动启用，仅作用于生产构建。</p>          </div><h3 id="pwa"><a href="#pwa" class="headerlink" title="pwa"></a>pwa</h3><div class="note note-success">            <p>Type: <code>Object</code><br>向 <code>PWA</code> 插件传递选项。</p>          </div><h3 id="pluginOptions"><a href="#pluginOptions" class="headerlink" title="pluginOptions"></a>pluginOptions</h3><div class="note note-success">            <p>Type: <code>Object</code><br>这是一个不进行任何 <code>schema</code> 验证的对象，因此它可以用来传递任何第三方插件选项</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 部署应用时的基本 URL</span><br>  <span class="hljs-attr">publicPath</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span> ? <span class="hljs-string">&#x27;192.168.60.110:8080&#x27;</span> : <span class="hljs-string">&#x27;192.168.60.110:8080&#x27;</span>,<br><br>  <span class="hljs-comment">// build时构建文件的目录 构建时传入 --no-clean 可关闭该行为</span><br>  <span class="hljs-attr">outputDir</span>: <span class="hljs-string">&#x27;dist&#x27;</span>,<br><br>  <span class="hljs-comment">// build时放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录</span><br>  <span class="hljs-attr">assetsDir</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br><br>  <span class="hljs-comment">// 指定生成的 index.html 的输出路径 (相对于 outputDir)。也可以是一个绝对路径。</span><br>  <span class="hljs-attr">indexPath</span>: <span class="hljs-string">&#x27;index.html&#x27;</span>,<br><br>  <span class="hljs-comment">// 默认在生成的静态资源文件名中包含hash以控制缓存</span><br>  <span class="hljs-attr">filenameHashing</span>: <span class="hljs-literal">true</span>,<br><br>  <span class="hljs-comment">// 构建多页面应用，页面的配置</span><br>  <span class="hljs-attr">pages</span>: &#123;<br>    <span class="hljs-attr">index</span>: &#123;<br>      <span class="hljs-comment">// page 的入口</span><br>      <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;src/index/main.js&#x27;</span>,<br>      <span class="hljs-comment">// 模板来源</span><br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;public/index.html&#x27;</span>,<br>      <span class="hljs-comment">// 在 dist/index.html 的输出</span><br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;index.html&#x27;</span>,<br>      <span class="hljs-comment">// 当使用 title 选项时，</span><br>      <span class="hljs-comment">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Index Page&#x27;</span>,<br>      <span class="hljs-comment">// 在这个页面中包含的块，默认情况下会包含</span><br>      <span class="hljs-comment">// 提取出来的通用 chunk 和 vendor chunk。</span><br>      <span class="hljs-attr">chunks</span>: [<span class="hljs-string">&#x27;chunk-vendors&#x27;</span>, <span class="hljs-string">&#x27;chunk-common&#x27;</span>, <span class="hljs-string">&#x27;index&#x27;</span>],<br>    &#125;,<br>    <span class="hljs-comment">// 当使用只有入口的字符串格式时，</span><br>    <span class="hljs-comment">// 模板会被推导为 `public/subpage.html`</span><br>    <span class="hljs-comment">// 并且如果找不到的话，就回退到 `public/index.html`。</span><br>    <span class="hljs-comment">// 输出文件名会被推导为 `subpage.html`。</span><br>    <span class="hljs-attr">subpage</span>: <span class="hljs-string">&#x27;src/subpage/main.js&#x27;</span>,<br>  &#125;,<br><br>  <span class="hljs-comment">// 是否在开发环境下通过 eslint-loader 在每次保存时 lint 代码 (在生产构建时禁用 eslint-loader)</span><br>  <span class="hljs-attr">lintOnSave</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> !== <span class="hljs-string">&#x27;production&#x27;</span>,<br><br>  <span class="hljs-comment">// 是否使用包含运行时编译器的 Vue 构建版本</span><br>  <span class="hljs-attr">runtimeCompiler</span>: <span class="hljs-literal">false</span>,<br><br>  <span class="hljs-comment">// Babel 显式转译列表</span><br>  <span class="hljs-attr">transpileDependencies</span>: [],<br><br>  <span class="hljs-comment">// 如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建</span><br>  <span class="hljs-attr">productionSourceMap</span>: <span class="hljs-literal">true</span>,<br><br>  <span class="hljs-comment">// 设置生成的 HTML 中 &lt;link rel=&quot;stylesheet&quot;&gt; 和 &lt;script&gt; 标签的 crossorigin 属性（注：仅影响构建时注入的标签）</span><br>  <span class="hljs-attr">crossorigin</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br><br>  <span class="hljs-comment">// 在生成的 HTML 中的 &lt;link rel=&quot;stylesheet&quot;&gt; 和 &lt;script&gt; 标签上启用 Subresource Integrity (SRI)</span><br>  <span class="hljs-attr">integrity</span>: <span class="hljs-literal">false</span>,<br><br>  <span class="hljs-comment">// 如果这个值是一个对象，则会通过 webpack-merge 合并到最终的配置中</span><br>  <span class="hljs-comment">// 如果你需要基于环境有条件地配置行为，或者想要直接修改配置，那就换成一个函数 (该函数会在环境变量被设置之后懒执行)。该方法的第一个参数会收到已经解析好的配置。在函数内，你可以直接修改配置，或者返回一个将会被合并的对象</span><br>  <span class="hljs-attr">configureWebpack</span>: &#123;&#125;,<br><br>  <span class="hljs-comment">// 对内部的 webpack 配置（比如修改、增加Loader选项）(链式操作)</span><br>  <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;,<br><br>  <span class="hljs-comment">// css的处理</span><br>  <span class="hljs-attr">css</span>: &#123;<br>    <span class="hljs-comment">// 当为true时，css文件名可省略 module 默认为 false</span><br>    <span class="hljs-attr">modules</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 是否将组件中的 CSS 提取至一个独立的 CSS 文件中,当作为一个库构建时，你也可以将其设置为 false 免得用户自己导入 CSS</span><br>    <span class="hljs-comment">// 默认生产环境下是 true，开发环境下是 false</span><br>    <span class="hljs-attr">extract</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 是否为 CSS 开启 source map。设置为 true 之后可能会影响构建的性能</span><br>    <span class="hljs-attr">sourceMap</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">//向 CSS 相关的 loader 传递选项(支持 css-loader postcss-loader sass-loader less-loader stylus-loader)</span><br>    <span class="hljs-attr">loaderOptions</span>: &#123;<br>      <span class="hljs-attr">css</span>: &#123;&#125;,<br>      <span class="hljs-attr">less</span>: &#123;&#125;,<br>    &#125;,<br>  &#125;,<br><br>  <span class="hljs-comment">// 所有 webpack-dev-server 的选项都支持</span><br>  <span class="hljs-attr">devServer</span>: &#123;&#125;,<br><br>  <span class="hljs-comment">// 是否为 Babel 或 TypeScript 使用 thread-loader</span><br>  <span class="hljs-attr">parallel</span>: <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;os&#x27;</span>).<span class="hljs-title function_">cpus</span>().<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>,<br><br>  <span class="hljs-comment">// 向 PWA 插件传递选项</span><br>  <span class="hljs-attr">pwa</span>: &#123;&#125;,<br><br>  <span class="hljs-comment">// 可以用来传递任何第三方插件选项</span><br>  <span class="hljs-attr">pluginOptions</span>: &#123;&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">dir</span>) &#123;<br>  <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">join</span>(__dirname, dir)<br>&#125;<br><br><span class="hljs-comment">// If your port is set to 80,</span><br><span class="hljs-comment">// use administrator privileges to execute the command line.</span><br><span class="hljs-comment">// For example, Mac: sudo npm run</span><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">9527</span> <span class="hljs-comment">// dev port</span><br><br><span class="hljs-comment">// All configuration item explanations can be find in https://cli.vuejs.org/config/</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * You will need to set publicPath if you plan to deploy your site under a sub path,</span><br><span class="hljs-comment">   * for example GitHub Pages. If you plan to deploy your site to https://foo.github.io/bar/,</span><br><span class="hljs-comment">   * then publicPath should be set to &quot;/bar/&quot;.</span><br><span class="hljs-comment">   * In most cases please use &#x27;/&#x27; !!!</span><br><span class="hljs-comment">   * Detail: https://cli.vuejs.org/config/#publicpath</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>  <span class="hljs-attr">outputDir</span>: <span class="hljs-string">&#x27;dist&#x27;</span>,<br>  <span class="hljs-attr">assetsDir</span>: <span class="hljs-string">&#x27;static&#x27;</span>,<br>  <span class="hljs-attr">lintOnSave</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;development&#x27;</span>,<br>  <span class="hljs-attr">productionSourceMap</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    port,<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">overlay</span>: &#123;<br>      <span class="hljs-attr">warnings</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">errors</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    <span class="hljs-comment">// 配置代理 （以接口 https://www.easy-mock.com/mock/5ce2a7854c85c12abefbae0b/api 说明）</span><br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-comment">// 以 “/api” 开头的 代理到 下边的 target 属性 的值 中</span><br>        <span class="hljs-attr">target</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_URL</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否改变域名</span><br>        <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<br>          <span class="hljs-comment">// 路径重写</span><br>          <span class="hljs-string">&#x27;/api&#x27;</span>: <span class="hljs-string">&#x27;5ce2a7854c85c12abefbae0b/api&#x27;</span>, <span class="hljs-comment">// 这个意思就是以api开头的，定向到哪里, 如果你的后边还有路径的话， 会自动拼接上</span><br>        &#125;,<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-comment">// 下边这个， 如果你是本地自己mock 的话用after这个属性，线上环境一定要干掉</span><br>    <span class="hljs-comment">// after: require(&quot;./mock/mock-server.js&quot;)</span><br>  &#125;,<br>  <span class="hljs-attr">configureWebpack</span>: &#123;<br>    <span class="hljs-comment">// provide the app&#x27;s title in webpack&#x27;s name field, so that</span><br>    <span class="hljs-comment">// it can be accessed in index.html to inject the correct title.</span><br>    <span class="hljs-attr">resolve</span>: &#123;<br>      <span class="hljs-comment">// 配置别名</span><br>      <span class="hljs-attr">alias</span>: &#123;<br>        <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;src&#x27;</span>),<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-comment">// webpack配置覆盖</span><br>  <span class="hljs-title function_">chainWebpack</span>(<span class="hljs-params">config</span>) &#123;<br>    config.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;preload&#x27;</span>) <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> need test</span><br>    config.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;prefetch&#x27;</span>) <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> need test</span><br><br>    <span class="hljs-comment">// set svg-sprite-loader</span><br>    config.<span class="hljs-property">module</span>.<span class="hljs-title function_">rule</span>(<span class="hljs-string">&#x27;svg&#x27;</span>).<span class="hljs-property">exclude</span>.<span class="hljs-title function_">add</span>(<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;src/icons&#x27;</span>)).<span class="hljs-title function_">end</span>()<br>    config.<span class="hljs-property">module</span><br>      .<span class="hljs-title function_">rule</span>(<span class="hljs-string">&#x27;icons&#x27;</span>)<br>      .<span class="hljs-title function_">test</span>(<span class="hljs-regexp">/\.svg$/</span>)<br>      .<span class="hljs-property">include</span>.<span class="hljs-title function_">add</span>(<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;src/icons&#x27;</span>))<br>      .<span class="hljs-title function_">end</span>()<br>      .<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;svg-sprite-loader&#x27;</span>)<br>      .<span class="hljs-title function_">loader</span>(<span class="hljs-string">&#x27;svg-sprite-loader&#x27;</span>)<br>      .<span class="hljs-title function_">options</span>(&#123;<br>        <span class="hljs-attr">symbolId</span>: <span class="hljs-string">&#x27;icon-[name]&#x27;</span>,<br>      &#125;)<br>      .<span class="hljs-title function_">end</span>()<br><br>    <span class="hljs-comment">// set preserveWhitespace</span><br>    config.<span class="hljs-property">module</span><br>      .<span class="hljs-title function_">rule</span>(<span class="hljs-string">&#x27;vue&#x27;</span>)<br>      .<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;vue-loader&#x27;</span>)<br>      .<span class="hljs-title function_">loader</span>(<span class="hljs-string">&#x27;vue-loader&#x27;</span>)<br>      .<span class="hljs-title function_">tap</span>(<span class="hljs-function"><span class="hljs-params">options</span> =&gt;</span> &#123;<br>        options.<span class="hljs-property">compilerOptions</span>.<span class="hljs-property">preserveWhitespace</span> = <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">return</span> options<br>      &#125;)<br>      .<span class="hljs-title function_">end</span>()<br><br>    config<br>      <span class="hljs-comment">// https://webpack.js.org/configuration/devtool/#development</span><br>      .<span class="hljs-title function_">when</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;development&#x27;</span>, <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> config.<span class="hljs-title function_">devtool</span>(<span class="hljs-string">&#x27;cheap-source-map&#x27;</span>))<br><br>    config.<span class="hljs-title function_">when</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> !== <span class="hljs-string">&#x27;development&#x27;</span>, <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>      config<br>        .<span class="hljs-title function_">plugin</span>(<span class="hljs-string">&#x27;ScriptExtHtmlWebpackPlugin&#x27;</span>)<br>        .<span class="hljs-title function_">after</span>(<span class="hljs-string">&#x27;html&#x27;</span>)<br>        .<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;script-ext-html-webpack-plugin&#x27;</span>, [<br>          &#123;<br>            <span class="hljs-comment">// `runtime` must same as runtimeChunk name. default is `runtime`</span><br>            <span class="hljs-attr">inline</span>: <span class="hljs-regexp">/runtime\..*\.js$/</span>,<br>          &#125;,<br>        ])<br>        .<span class="hljs-title function_">end</span>()<br>      config.<span class="hljs-property">optimization</span>.<span class="hljs-title function_">splitChunks</span>(&#123;<br>        <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span>,<br>        <span class="hljs-attr">cacheGroups</span>: &#123;<br>          <span class="hljs-attr">libs</span>: &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;chunk-libs&#x27;</span>,<br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/]/</span>,<br>            <span class="hljs-attr">priority</span>: <span class="hljs-number">10</span>,<br>            <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;initial&#x27;</span>, <span class="hljs-comment">// only package third parties that are initially dependent</span><br>          &#125;,<br>          <span class="hljs-attr">elementUI</span>: &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;chunk-elementUI&#x27;</span>, <span class="hljs-comment">// split elementUI into a single package</span><br>            <span class="hljs-attr">priority</span>: <span class="hljs-number">20</span>, <span class="hljs-comment">// the weight needs to be larger than libs and app or it will be packaged into libs or app</span><br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/]_?element-ui(.*)/</span>, <span class="hljs-comment">// in order to adapt to cnpm</span><br>          &#125;,<br>          <span class="hljs-attr">commons</span>: &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;chunk-commons&#x27;</span>,<br>            <span class="hljs-attr">test</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;src/components&#x27;</span>), <span class="hljs-comment">// can customize your rules</span><br>            <span class="hljs-attr">minChunks</span>: <span class="hljs-number">3</span>, <span class="hljs-comment">//  minimum common number</span><br>            <span class="hljs-attr">priority</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-attr">reuseExistingChunk</span>: <span class="hljs-literal">true</span>,<br>          &#125;,<br>        &#125;,<br>      &#125;)<br>      config.<span class="hljs-property">optimization</span>.<span class="hljs-title function_">runtimeChunk</span>(<span class="hljs-string">&#x27;single&#x27;</span>)<br>    &#125;)<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.config</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuex</title>
    <link href="/blog/2020/11/15/vue/vuex/"/>
    <url>/blog/2020/11/15/vue/vuex/</url>
    
    <content type="html"><![CDATA[<h1 id="vuex-概述"><a href="#vuex-概述" class="headerlink" title="vuex 概述"></a>vuex 概述</h1><p>目标：</p><ul><li>了解 vuex 的应用场景 (在哪用)</li><li>掌握 vuex 的基本使用 (怎么用)</li></ul><p><strong>vuex 是一个 vue 的状态管理工具, 状态即数据</strong></p><a id="more"></a><h2 id="回顾-组件之间共享状态-组件通信方案"><a href="#回顾-组件之间共享状态-组件通信方案" class="headerlink" title="回顾-组件之间共享状态 (组件通信方案)"></a>回顾-组件之间共享状态 (组件通信方案)</h2><p>默认组件的数据, 是独立的, 每个组件有着自己的状态(数据)</p><blockquote><p>状态 === 数据</p></blockquote><p>组件之间共享状态的两种典型方式：</p><ul><li><p>父子之间 : props + $emit</p><p>父传子：props 属性绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">son1</span> <span class="hljs-attr">msg</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">son1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子传父：$emit 事件绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;event-name&#x27;)&quot;</span>&gt;</span>通知父组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>非父子之间：EventBus 事件总线</p><ul><li><p>创建一个都能访问到的事件总线</p></li><li><p>在 A 组件中, bus.$emit</p></li><li><p>在 B 组件中, bus.$on</p></li></ul></li></ul><p>如果某个状态需要在很多个组件来使用，或者要实现多个组件共同维护一份数据又应该怎么做呢 ？</p><p>这里就要引入 Vuex 了。</p><h2 id="vuex-基本概念"><a href="#vuex-基本概念" class="headerlink" title="vuex 基本概念"></a>vuex 基本概念</h2><p><a href="https://vuex.vuejs.org/zh/guide/">中文文档</a></p><p>vuex 是 vue 的状态管理工具，<strong>状态即数据</strong>。 状态管理就是集中管理 vue 中通用的一些数据</p><p>注意：</p><ul><li>不是所有的场景都适用于 vuex，只有在必要的时候才使用 vuex</li><li>使用了 vuex 之后，会附加更多的框架中的概念进来，增加了项目的复杂度</li></ul><p>Vuex 就像近视眼镜, 你自然会知道什么时候需要用它~</p><h2 id="vuex-的优点-方便的解决多组件的共享状态"><a href="#vuex-的优点-方便的解决多组件的共享状态" class="headerlink" title="vuex 的优点: 方便的解决多组件的共享状态"></a>vuex 的优点: 方便的解决多组件的共享状态</h2><p>vuex 的作用是解决多组件状态共享的问题。</p><ul><li><p>它是独立于组件而单独存在的，所有的组件都可以把它当作一座桥梁来进行通讯。</p></li><li><p>与事件总线（EventBus）相比，它具备额外的特点：</p><ul><li><strong>响应式</strong></li><li>操作更简洁</li></ul><p>代码量非常少, 但是需要熟悉</p></li></ul><h2 id="什么数据适合存到-vuex-中"><a href="#什么数据适合存到-vuex-中" class="headerlink" title="什么数据适合存到 vuex 中"></a>什么数据适合存到 vuex 中</h2><p>一般情况下，只有 <strong>多个组件均需要共享的数据</strong> ，才有必要存储在 vuex 中，</p><p>对于某个组件中的私有数据，依旧存储在组件自身的 data 中。</p><p>例如：</p><ul><li>对于所有组件而言，当前登陆的用户信息是需要在全体组件之间共享的，则它可以放在 vuex 中</li><li>对于文章详情页组件来说，当前的用户浏览的文章列表数据则应该属于这个组件的私有数据，应该要放在这个组件 data 中。</li></ul><h2 id="概述小结"><a href="#概述小结" class="headerlink" title="概述小结"></a>概述小结</h2><ol><li>vuex 解决什么问题? 可以解决多组件共享状态的问题</li><li>什么样的数据, 适合存放到 vuex? 多组件都需要用到的数据, 才往 vuex 中存</li></ol><p>vuex 是响应式的, 只要 vuex 中的数据改了, 那么所有用到这个数据的地方, 都会更新!!!</p><h1 id="vuex-入门"><a href="#vuex-入门" class="headerlink" title="vuex 入门"></a>vuex 入门</h1><h2 id="需求-多组件共享数据"><a href="#需求-多组件共享数据" class="headerlink" title="需求: 多组件共享数据"></a>需求: 多组件共享数据</h2><p>对于如下三个组件（一个父组件，两个子组件）</p><p>效果是三个组件共享一份数据:</p><ul><li>任意一个组件都可以修改数据</li><li>三个组件的数据是同步的</li></ul><p>1 创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vue create 03-vuex-demo<br></code></pre></td></tr></table></figure><p>2 创建三个组件, 目录如下</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|-components</span><br><span class="hljs-string">|--add-item.vue</span><br><span class="hljs-string">|--sub-item.vue</span><br><span class="hljs-string">|-App.vue</span><br></code></pre></td></tr></table></figure><p>3 源代码如下</p><p><code>App.vue</code></p><p>在入口组件中引入 add-item 和 sub-item 这两个子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>根组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">add-item</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">add-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sub-item</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sub-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">AddItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/add-item.vue&#x27;</span></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">SubItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/sub-item.vue&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;&#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title class_">AddItem</span>,</span><br><span class="language-javascript">      <span class="hljs-title class_">SubItem</span>,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-id">#app</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>sub-item.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子组件 sub<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    从父组件中获取的值: <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>值-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;SubItem&#x27;</span>,</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;css&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>add-item.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子组件 add<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    从父组件中获取的值:<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>值+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;AddItem&#x27;</span>,</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;css&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="vuex-的使用-创建仓库"><a href="#vuex-的使用-创建仓库" class="headerlink" title="vuex 的使用 - 创建仓库"></a>vuex 的使用 - 创建仓库</h2><p>1 安装 vuex, 与 vue-router 类似，vuex 是一个独立存在的插件，如果脚手架初始化没有选 vuex，就需要额外安装。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yarn <span class="hljs-built_in">add</span> vuex<br></code></pre></td></tr></table></figure><p>2 新建 <code>store/index.js</code> 专门存放 vuex</p><p>​ 为了维护项目目录的整洁，在 src 目录下新建一个 store 目录其下放置一个 index.js 文件。 (和 <code>router/index.js</code> 类似)</p><p>3 创建仓库 <code>store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入 vue</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 导入 vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">// vuex也是vue的插件, 需要use一下, 进行插件的安装初始化</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">// 创建仓库 store</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>()<br><br><span class="hljs-comment">// 导出仓库</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><p>4 在 main.js 中导入挂载到 Vue 实例上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>  store,<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>此刻起, 就成功创建了一个空仓库!!</p><h2 id="核心概念-state-状态"><a href="#核心概念-state-状态" class="headerlink" title="核心概念 - state 状态"></a>核心概念 - state 状态</h2><p><code>State</code>提供唯一的公共数据源，所有共享的数据都要统一放到<code>Store</code>中的<code>State</code>中存储。</p><p>打开项目中的<code>store.js</code>文件，在<code>state</code>对象中可以添加我们要共享的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建仓库 `store`</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-comment">// state 状态, 即数据, 类似于vue组件中的data,</span><br>  <span class="hljs-comment">// 区别在于 data 是组件自己的数据, 而 state 中的数据整个vue项目的组件都能访问到</span><br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">101</span>,<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>问题: 如何在组件中获取 count?</p><ol><li>插值表达式 =&gt; <code>$store.state.count</code></li><li><code>mapState</code> 映射计算属性 =&gt; <code>count</code></li></ol><p><strong>1 原始形式- 插值表达式</strong></p><p><strong><code>App.vue</code></strong></p><p>组件中可以使用 <strong><code>this.$store</code></strong> 获取到 vuex 中的 store 对象实例，可通过**<code>state</code><strong>属性属性获取</strong>count**， 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;h1&gt;state的数据 - &#123;&#123; $store.state.count &#125;&#125;&lt;/h1&gt;<br></code></pre></td></tr></table></figure><p><strong>计算属性</strong> - 将<code>state</code>属性定义在计算属性中 <a href="https://vuex.vuejs.org/zh/guide/">https://vuex.vuejs.org/zh/guide/</a><code>state</code>.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 把state中数据，定义在组件内的计算属性中</span><br>  <span class="hljs-attr">computed</span>: &#123;<br>    count () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;h1&gt;state的数据 - &#123;&#123; count &#125;&#125;&lt;/h1&gt;<br></code></pre></td></tr></table></figure><p>但是每次, 都这样一个个的提供计算属性, 太麻烦了, 所以我们需要辅助函数 <code>mapState</code> 帮我们简化语法</p><p><strong>2 辅助函数 - mapState</strong></p><blockquote><p><code>mapState</code>是辅助函数，帮助我们把 store 中的数据映射到 组件的计算属性中, 它属于一种方便的用法</p></blockquote><p>用法 ：</p><p>第一步：导入<code>mapState</code> (mapState 是 vuex 中的一个函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></td></tr></table></figure><p>第二步：采用数组形式引入<code>state</code>属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;count&#x27;</span>])<br></code></pre></td></tr></table></figure><blockquote><p>上面代码的最终得到的是 <strong>类似于</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">count () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span><br>&#125;<br></code></pre></td></tr></table></figure><p>第三步：利用<strong>展开运算符</strong>将导出的状态映射给计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>  ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;count&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div&gt; state的数据：&#123;&#123; count &#125;&#125;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h2 id="核心概念-mutations"><a href="#核心概念-mutations" class="headerlink" title="核心概念 - mutations"></a>核心概念 - <code>mutations</code></h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>通过 <code>strict: true</code> 可以开启严格模式</p><blockquote><p><strong><code>state</code>数据的修改只能通过<code>mutations</code>，并且<code>mutations</code>必须是同步的</strong></p></blockquote><p><strong>定义 mutations</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 定义mutations</span><br>  <span class="hljs-attr">mutations</span>: &#123;&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>格式说明</strong></p><p><code>mutations</code>是一个对象，对象中存放修改 state 的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">// 方法里参数 第一个参数是当前store的state属性</span><br>    <span class="hljs-comment">// payload 载荷 运输参数 调用mutaiions的时候 可以传递参数 传递载荷</span><br>    addCount (state) &#123;<br>      state.<span class="hljs-property">count</span> += <span class="hljs-number">1</span><br>    &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure><p>组件中提交 <code>mutations</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addCount&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>解决问题: 两个子组件, 添加操作 add, addN 实现</strong></p><h3 id="带参数的-mutation"><a href="#带参数的-mutation" class="headerlink" title="带参数的 mutation"></a>带参数的 <code>mutation</code></h3><p>需求: 父组件也希望能改到数据</p><p>提交 <code>mutation</code> 是可以传递参数的 <code>this.$store.commit(&#39;xxx&#39;,  参数)</code></p><p>1 提供<code>mutation</code>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>: &#123;<br>  ...<br>  inputCount (state, count) &#123;<br>    state.<span class="hljs-property">count</span> = count<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>2 注册事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;count&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;handleInput&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>3 提交<code>mutation</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">handleInput (e) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;inputCount&#x27;</span>, +e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小 tips: 提交的参数只能是一个, 如果有多个参数要传, 可以传递一个对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;inputCount&#x27;</span>, &#123;<br>  <span class="hljs-attr">count</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>,<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>解决问题: addN 的实现</strong></p><h3 id="辅助函数-mapMutations"><a href="#辅助函数-mapMutations" class="headerlink" title="辅助函数 - mapMutations"></a><strong>辅助函数</strong> - <code>mapMutations</code></h3><blockquote><p><code>mapMutations</code>和<code>mapState</code>很像，它把位于<code>mutations</code>中的方法提取了出来，我们可以将它导入</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span>  &#123; mapMutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;addCount&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>上面代码的含义是将<code>mutations</code>的方法导入了<code>methods</code>中，等价于</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>      <span class="hljs-comment">// commit(方法名, 载荷参数)</span><br>      addCount () &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addCount&#x27;</span>)<br>      &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>此时，就可以直接通过<code>this.addCount</code>调用了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addCount&quot;</span>&gt;</span>值+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是请注意： <code>Vuex</code>中<code>mutations</code>中要求不能写异步代码，如果有异步的<code>ajax</code>请求，应该放置在<code>actions</code>中</p><h2 id="核心概念-actions"><a href="#核心概念-actions" class="headerlink" title="核心概念-actions"></a>核心概念-<code>actions</code></h2><blockquote><p><code>state</code>是存放数据的，mutations 是同步更新数据 (便于监测数据的变化, 更新视图等, 方便于调试工具查看变化)，</p><p><code>actions</code>则负责进行异步操作</p></blockquote><p><strong>需求: 一秒钟之后, 要给一个数 去修改<code>state</code></strong></p><p><strong>定义<code>actions</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">actions</span>: &#123;<br>  setAsyncCount (context, num) &#123;<br>    <span class="hljs-comment">// 一秒后, 给一个数, 去修改 num</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;inputCount&#x27;</span>, num)<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p><strong>原始调用</strong> - <code>$store</code> (支持传参)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">setAsyncCount () &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;setAsyncCount&#x27;</span>, <span class="hljs-number">200</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>辅助函数</strong> -<code>mapActions</code></p><blockquote><p><code>actions</code>也有辅助函数，可以将<code>action</code>导入到组件中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapActions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;setAsyncCount&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p>直接通过 <code>this.</code>方法 就可以调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;setAsyncCount(200)&quot;</span>&gt;</span>+异步<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="核心概念-getters"><a href="#核心概念-getters" class="headerlink" title="核心概念-getters"></a>核心概念-<code>getters</code></h2><blockquote><p>除了<code>state</code>之外，有时我们还需要从<code>state</code>中派生出一些状态，这些状态是依赖<code>state</code>的，此时会用到 getters</p></blockquote><p>例如，<code>state</code>中定义了<code>list</code>，为 1-10 的数组，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">state</span>: &#123;<br>  <span class="hljs-attr">list</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>组件中，需要显示所有大于 5 的数据，正常的方式，是需要<code>list</code>在组件中进行再一步的处理，但是<code>getters</code>可以帮助我们实现它</p><p><strong>定义 getters</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">getters</span>: &#123;<br>  <span class="hljs-comment">// getters函数的第一个参数是 state</span><br>  <span class="hljs-comment">// 必须要有返回值</span><br>  <span class="hljs-attr">filterList</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">list</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">5</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>getters</code></p><p><strong>原始方式</strong> -<code>$store</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; $store.getters.filterList &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>辅助函数</strong> - <code>mapGetters</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapGetters</span>([<span class="hljs-string">&#x27;filterList&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; filterList &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="核心概念-模块-module-进阶拓展"><a href="#核心概念-模块-module-进阶拓展" class="headerlink" title="核心概念 - 模块 module (进阶拓展)"></a>核心概念 - 模块 <code>module</code> (进阶拓展)</h2><blockquote><p><strong>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，<code>store</code> 对象就有可能变得相当臃肿。</strong></p></blockquote><p>这句话的意思是，如果把所有的状态都放在<code>state</code>中，当项目变得越来越大的时候，<code>Vuex</code>会变得越来越难以维护</p><p>由此，又有了<code>Vuex</code>的模块化</p><h3 id="模块定义-准备-state"><a href="#模块定义-准备-state" class="headerlink" title="模块定义 - 准备 state"></a><strong>模块定义</strong> - 准备 <code>state</code></h3><p>定义两个模块 <strong><code>user</code></strong> 和 <strong><code>setting</code></strong></p><p><code>user</code>中管理用户的信息状态 <code>userInfo</code> <code>modules/user.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> state = &#123;<br>  <span class="hljs-attr">userInfo</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><br><span class="hljs-keyword">const</span> getters = &#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  state,<br>  mutations,<br>  actions,<br>  getters,<br>&#125;<br></code></pre></td></tr></table></figure><p><code>setting</code>中管理项目应用的名称 <code>title</code>, <code>desc</code> <code>modules/setting.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> state = &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;这是大标题&#x27;</span>,<br>  <span class="hljs-attr">desc</span>: <span class="hljs-string">&#x27;描述真呀真不错&#x27;</span>,<br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><br><span class="hljs-keyword">const</span> getters = &#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  state,<br>  mutations,<br>  actions,<br>  getters,<br>&#125;<br></code></pre></td></tr></table></figure><p>使用模块中的数据, 可以直接通过模块名访问 <code>$store.state.模块名.xxx</code> =&gt; <code>$store.state.setting.title</code></p><p>使用模块中的数据, 也可以在全局上定义一些 <code>getters</code> 便于访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> user <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/user.js&#x27;</span><br><span class="hljs-keyword">import</span> setting <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/setting.js&#x27;</span><br><br><span class="hljs-attr">getters</span>: &#123;<br>  ...<br>  <span class="hljs-attr">title</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">setting</span>.<span class="hljs-property">title</span>,<br>  <span class="hljs-attr">desc</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">setting</span>.<span class="hljs-property">desc</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">user</span>.<span class="hljs-property">userInfo</span>.<span class="hljs-property">name</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">user</span>.<span class="hljs-property">userInfo</span>.<span class="hljs-property">age</span><br>&#125;,<br><span class="hljs-comment">// 模块</span><br><span class="hljs-attr">modules</span>: &#123;<br>  <span class="hljs-comment">// 子模块 (对象)</span><br>  user,<br>  setting<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="命名空间-namespaced"><a href="#命名空间-namespaced" class="headerlink" title="命名空间 namespaced"></a>命名空间 <code>namespaced</code></h3><p>默认情况下，模块内部的 <code>action</code>、<code>mutation</code> 和 <code>getter</code> 是注册在<strong>全局命名空间</strong>的</p><p>这句话的意思是 刚才的<code>user</code>模块还是<code>setting</code>模块，它的 <code>action</code>、<code>mutation</code> 和 <code>getter</code> 其实并没有区分，都可以直接通过全局的方式调用, 如下图所示:</p><p>但是，如果我们想保证内部模块的高封闭性，我们可以采用<code>namespaced</code>来进行设置</p><p><code>modules/user.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> state = &#123;<br>  <span class="hljs-attr">userInfo</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  &#125;,<br>  <span class="hljs-attr">myMsg</span>: <span class="hljs-string">&#x27;我的数据&#x27;</span>,<br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;<br>  <span class="hljs-title function_">updateMsg</span>(<span class="hljs-params">state, msg</span>) &#123;<br>    state.<span class="hljs-property">myMsg</span> = msg<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><br><span class="hljs-keyword">const</span> getters = &#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  state,<br>  mutations,<br>  actions,<br>  getters,<br>&#125;<br></code></pre></td></tr></table></figure><p>提交模块中的<code>mutation</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">全局的: <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;mutation函数名&#x27;</span>, 参数)<br><br>模块中的: <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;模块名/mutation函数名&#x27;</span>, 参数)<br></code></pre></td></tr></table></figure><p><code>namespaced: true</code> 后, 要添加映射, 可以加上模块名, 找对应模块的<code>state/mutations/actions/getters</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">// 全局的</span><br>  ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;count&#x27;</span>]),<br>  <span class="hljs-comment">// 模块中的</span><br>  ...<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&#x27;user&#x27;</span>, [<span class="hljs-string">&#x27;myMsg&#x27;</span>]),<br>&#125;,<br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-comment">// 全局的</span><br>  ...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;addCount&#x27;</span>])<br>  <span class="hljs-comment">// 模块中的</span><br>  ...<span class="hljs-title function_">mapMutations</span>(<span class="hljs-string">&#x27;user&#x27;</span>, [<span class="hljs-string">&#x27;updateMsg&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vuex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.JS请求工具Axios的封装</title>
    <link href="/blog/2020/11/13/vue/axios/"/>
    <url>/blog/2020/11/13/vue/axios/</url>
    
    <content type="html"><![CDATA[<h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1.前期准备"></a>1.前期准备</h2><p>创建一个<code>js</code>文件，命名自定。我这里定义为<code>request.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span> <span class="hljs-comment">//导入原生的axios</span><br><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;qs&#x27;</span> <span class="hljs-comment">//导入qs,做字符串的序列化，为了后面不同的场景使用。</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MessageBox</span>, <span class="hljs-title class_">Message</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span> <span class="hljs-comment">//引入element-ui的两个组件，分别是消息框和消息提示</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store&#x27;</span> <span class="hljs-comment">//引入状态管理仓库</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/router&#x27;</span> <span class="hljs-comment">//引入路由</span><br><br><span class="hljs-keyword">import</span> &#123; getToken &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span> <span class="hljs-comment">//根据业务需求，这个方法是用来获取Token</span><br></code></pre></td></tr></table></figure><h2 id="2-创建实例"><a href="#2-创建实例" class="headerlink" title="2.创建实例"></a>2.创建实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建一个axios实例</span><br><span class="hljs-keyword">const</span> service = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;XXXXXX&#x27;</span>, <span class="hljs-comment">// url = base url + request url</span><br>  <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 当跨域请求时发送cookie</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">15000</span>, <span class="hljs-comment">// 请求时间</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="3-请求拦截器"><a href="#3-请求拦截器" class="headerlink" title="3.请求拦截器"></a>3.请求拦截器</h2><p>在发送请求之前做些什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (store.<span class="hljs-property">getters</span>.<span class="hljs-property">token</span>) &#123;<br>      <span class="hljs-comment">// 让每个请求携带令牌——[&#x27;Has-Token&#x27;]作为自定义密钥。</span><br>      <span class="hljs-comment">// 请根据实际情况修改。</span><br>      config.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;Has-Token&#x27;</span>] = <span class="hljs-title function_">getToken</span>()<br>    &#125;<br>    <span class="hljs-comment">//在这里根据自己相关的需求做不同请求头的切换，我司是需要使用这两种请求头。</span><br>    <span class="hljs-keyword">if</span> (config.<span class="hljs-property">json</span>) &#123;<br>      config.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      config.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span><br>      config.<span class="hljs-property">data</span> = qs.<span class="hljs-title function_">stringify</span>(config.<span class="hljs-property">data</span>) <span class="hljs-comment">//利用qs做json序列化</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> config<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 处理请求错误</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error) <span class="hljs-comment">// 调试</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><h2 id="4-响应拦截器"><a href="#4-响应拦截器" class="headerlink" title="4.响应拦截器"></a>4.响应拦截器</h2><p>在收到相应后做些什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript">service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> res = response.<span class="hljs-property">data</span> <span class="hljs-comment">//这是响应返回后的结果</span><br>    <span class="hljs-comment">//在这里可以根据返回的状态码对存在响应错误的请求做拦截，提前做处理。</span><br><br>    <span class="hljs-comment">//以下为我司的处理规则</span><br>    <span class="hljs-comment">// 如果自定义代码不是200，则判断为错误。</span><br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-property">code</span> == <span class="hljs-number">200</span> || res.<span class="hljs-property">code</span> == <span class="hljs-number">300</span>) &#123;<br>      <span class="hljs-comment">// 重新登陆</span><br>      <span class="hljs-title class_">MessageBox</span>.<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;您的登录状态存在问题，您可以取消以停留在此页面，或再次登录&#x27;</span>, <span class="hljs-string">&#x27;系统提示&#x27;</span>, &#123;<br>        <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&#x27;重新登录&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;warning&#x27;</span>,<br>      &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/resetToken&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          location.<span class="hljs-title function_">reload</span>()<br>        &#125;)<br>      &#125;)<br>      <span class="hljs-keyword">return</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (res.<span class="hljs-property">code</span> == <span class="hljs-number">700</span>) &#123;<br>        <span class="hljs-title class_">Message</span>.<span class="hljs-title function_">warning</span>(<span class="hljs-string">&#x27;您没有获取请求的权限！&#x27;</span>)<br>        router.<span class="hljs-title function_">replace</span>(&#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/401&#x27;</span>,<br>        &#125;)<br>        <span class="hljs-keyword">return</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> res<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//end</span><br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;err&#x27;</span> + error)<br>    <span class="hljs-title class_">Message</span>(&#123;<br>      <span class="hljs-attr">message</span>: error.<span class="hljs-property">message</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>      <span class="hljs-attr">duration</span>: <span class="hljs-number">5</span> * <span class="hljs-number">1000</span>,<br>    &#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><h2 id="5-抛出实例"><a href="#5-抛出实例" class="headerlink" title="5.抛出实例"></a>5.抛出实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service<br></code></pre></td></tr></table></figure><h2 id="6-如何调用"><a href="#6-如何调用" class="headerlink" title="6.如何调用"></a>6.如何调用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getCity</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/getCity/findParentId&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    data,<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-完整代码"><a href="#7-完整代码" class="headerlink" title="7.完整代码"></a>7.完整代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;qs&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MessageBox</span>, <span class="hljs-title class_">Message</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/router&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getToken &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span><br><br><span class="hljs-comment">// 创建一个axios实例</span><br><span class="hljs-keyword">const</span> service = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;XXXXX&#x27;</span>,<br>  <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">15000</span>,<br>&#125;)<br><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (store.<span class="hljs-property">getters</span>.<span class="hljs-property">token</span>) &#123;<br>      <span class="hljs-comment">// 让每个请求携带令牌——[&#x27;Has-Token&#x27;]作为自定义密钥。</span><br>      <span class="hljs-comment">// 请根据实际情况修改。</span><br>      config.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;Has-Token&#x27;</span>] = <span class="hljs-title function_">getToken</span>()<br>    &#125;<br>    <span class="hljs-comment">//在这里根据自己相关的需求做不同请求头的切换，我司是需要使用这两种请求头。</span><br>    <span class="hljs-keyword">if</span> (config.<span class="hljs-property">json</span>) &#123;<br>      config.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      config.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span><br>      config.<span class="hljs-property">data</span> = qs.<span class="hljs-title function_">stringify</span>(config.<span class="hljs-property">data</span>) <span class="hljs-comment">//利用qs做json序列化</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> config<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 处理请求错误</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error) <span class="hljs-comment">// 调试</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;<br>)<br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> res = response.<span class="hljs-property">data</span> <span class="hljs-comment">//这是响应返回后的结果</span><br>    <span class="hljs-comment">//在这里可以根据返回的状态码对存在响应错误的请求做拦截，提前做处理。</span><br><br>    <span class="hljs-comment">//以下为我司的处理规则</span><br>    <span class="hljs-comment">// 如果自定义代码不是200，则判断为错误。</span><br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-property">code</span> == <span class="hljs-number">200</span> || res.<span class="hljs-property">code</span> == <span class="hljs-number">300</span>) &#123;<br>      <span class="hljs-comment">// 重新登陆</span><br>      <span class="hljs-title class_">MessageBox</span>.<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;您的登录状态存在问题，您可以取消以停留在此页面，或再次登录&#x27;</span>, <span class="hljs-string">&#x27;系统提示&#x27;</span>, &#123;<br>        <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&#x27;重新登录&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;warning&#x27;</span>,<br>      &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/resetToken&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          location.<span class="hljs-title function_">reload</span>()<br>        &#125;)<br>      &#125;)<br>      <span class="hljs-keyword">return</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (res.<span class="hljs-property">code</span> == <span class="hljs-number">700</span>) &#123;<br>        <span class="hljs-title class_">Message</span>.<span class="hljs-title function_">warning</span>(<span class="hljs-string">&#x27;您没有获取请求的权限！&#x27;</span>)<br>        router.<span class="hljs-title function_">replace</span>(&#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/401&#x27;</span>,<br>        &#125;)<br>        <span class="hljs-keyword">return</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> res<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//end</span><br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;err&#x27;</span> + error)<br>    <span class="hljs-title class_">Message</span>(&#123;<br>      <span class="hljs-attr">message</span>: error.<span class="hljs-property">message</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>      <span class="hljs-attr">duration</span>: <span class="hljs-number">5</span> * <span class="hljs-number">1000</span>,<br>    &#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;<br>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>deepClone 对象深度克隆</title>
    <link href="/blog/2020/11/05/JS/deepClone/"/>
    <url>/blog/2020/11/05/JS/deepClone/</url>
    
    <content type="html"><![CDATA[<h1 id="deepClone-对象深度克隆"><a href="#deepClone-对象深度克隆" class="headerlink" title="deepClone 对象深度克隆"></a>deepClone 对象深度克隆</h1><div class="note note-success">            <p>注意</p><p>由于<code>JS</code>对象包括的范围非常广，加上<code>ES6</code>又有众多的新特性，很难、也没必要做到囊括所有的类型和情况，这里说的”对象”，指的是普通的对象，不包括修改对象原型链， 或者为”<code>Function</code>“，”<code>Promise</code>“等的情况，请留意。</p>          </div><a id="more"></a><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>我们平时可能会遇到需要通过<code>console.log</code>打印一个对象，至执行打印的时刻，此对象为空，后面的逻辑<br>中对此对象进行了修改赋值，但是我们在控制台直接看到的打印结果 却是修改后的值，这让人匪夷所思，虽然我们可以通过<br><code>console.log(JSON.parse(JSON.stringify(object)))</code>的形式处理，但是需要写这长长的一串，难免让人心生抵触。</p><p>当我们将一个对象(变量 A)赋值给另一个变量(变量 B)时，修改变量 B，因为对象引用的特性，导致 A 也同时被修改，所以有时候我们需要将 A 克隆给 B，这样修改 B 的时候，就不会 导致 A 也被修改。</p><p><code>deepClone(object = &#123;&#125;)</code></p><ul><li><code>object</code> <Object> 需要被克隆的对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>&#125;<br><br><span class="hljs-comment">// 直接赋值，为对象引用，即修改b等于修改a，因为a和b为同一个值</span><br><br><span class="hljs-keyword">let</span> b = a<br><br>b.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;小明&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b) <span class="hljs-comment">// 结果为 &#123;name: &#x27;小明&#x27;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 结果为 &#123;name: &#x27;小明&#x27;&#125;</span><br><br><span class="hljs-comment">// 深度克隆</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-title function_">deepClone</span>(a)<br><br>b.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;小红&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b) <span class="hljs-comment">// 结果为 &#123;name: &#x27;小红&#x27;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 结果为 &#123;name: &#x27;小明&#x27;&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 判断arr是否为一个数组，返回一个bool值</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isArray</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(arr) === <span class="hljs-string">&#x27;[object Array]&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// 深度克隆</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-comment">// 对常见的“非”值，直接返回原来值</span><br>  <span class="hljs-keyword">if</span> ([<span class="hljs-literal">null</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-title class_">NaN</span>, <span class="hljs-literal">false</span>].<span class="hljs-title function_">includes</span>(obj)) <span class="hljs-keyword">return</span> obj<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-comment">//原始类型直接返回</span><br>    <span class="hljs-keyword">return</span> obj<br>  &#125;<br>  <span class="hljs-keyword">var</span> o = <span class="hljs-title function_">isArray</span>(obj) ? [] : &#123;&#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(i)) &#123;<br>      o[i] = <span class="hljs-keyword">typeof</span> obj[i] === <span class="hljs-string">&#x27;object&#x27;</span> ? <span class="hljs-title function_">deepClone</span>(obj[i]) : obj[i]<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> o<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>deepMerge 对象深度合并</title>
    <link href="/blog/2020/11/05/JS/deepMerge/"/>
    <url>/blog/2020/11/05/JS/deepMerge/</url>
    
    <content type="html"><![CDATA[<h2 id="deepMerge-对象深度合并"><a href="#deepMerge-对象深度合并" class="headerlink" title="deepMerge 对象深度合并"></a>deepMerge 对象深度合并</h2><div class="note note-success">            <p>注意</p><p>由于<code>JS</code>对象包括的范围非常广，加上<code>ES6</code>又有众多的新特性，很难、也没必要做到囊括所有的类型和情况，这里说的”对象”，指的是普通的对象，不包括修改对象原型链， 或者为”<code>Function</code>“，”<code>Promise</code>“等的情况，请留意。</p>          </div><p>在 ES6 中，我们可以很方便的使用<code>Object.assign</code>进行对象合并，但这只是浅层的合并，如果对象的属性为数组或者对象的时候，会导致属性内部的值丢失。</p><p><strong>注意</strong>： 此处合并不同于<code>Object.assign</code>，因为<code>Object.assign(a, b)</code>会修改<code>a</code>的值为最终的结果(这往往不是我们所期望的)，但是<code>deepMerge(a, b)</code>并不会修改<code>a</code>的值。</p><p><code>deepMerge(target = &#123;&#125;, source = &#123;&#125;)</code></p><ul><li><p><code>target</code> <Object> 目标对象</p></li><li><p><code>source</code> <Object> 源对象</p></li></ul><p><code>Object.assign</code>浅合并示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = &#123;<br>  <span class="hljs-attr">info</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;mary&#x27;</span>,<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">let</span> b = &#123;<br>  <span class="hljs-attr">info</span>: &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;22&#x27;</span>,<br>  &#125;,<br>&#125;<br><br><span class="hljs-comment">// 使用Object.assign进行合并，注意此时a被修改了</span><br><span class="hljs-keyword">let</span> c = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(a, b)<br><br><span class="hljs-comment">// 我们期望的结果为：</span><br>c = &#123;<br>  <span class="hljs-attr">info</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;mary&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;22&#x27;</span>,<br>  &#125;,<br>&#125;<br><br><span class="hljs-comment">// 事实上，我们得到的结果却为：</span><br>c = &#123;<br>  <span class="hljs-attr">info</span>: &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;22&#x27;</span>,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>深度合并示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = &#123;<br>  <span class="hljs-attr">info</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;mary&#x27;</span>,<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">let</span> b = &#123;<br>  <span class="hljs-attr">info</span>: &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;22&#x27;</span>,<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">let</span> c = <span class="hljs-title function_">deepMerge</span>(a, b)<br><br><span class="hljs-comment">// c为我们期望的结果</span><br>c = &#123;<br>  <span class="hljs-attr">info</span>: &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;22&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;mary&#x27;</span>,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// JS对象深度合并</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepMerge</span>(<span class="hljs-params">target = &#123;&#125;, source = &#123;&#125;</span>) &#123;<br>  target = <span class="hljs-title function_">deepClone</span>(target)<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target !== <span class="hljs-string">&#x27;object&#x27;</span> || <span class="hljs-keyword">typeof</span> source !== <span class="hljs-string">&#x27;object&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> source) &#123;<br>    <span class="hljs-keyword">if</span> (!source.<span class="hljs-title function_">hasOwnProperty</span>(prop)) <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> (prop <span class="hljs-keyword">in</span> target) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target[prop] !== <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>        target[prop] = source[prop]<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> source[prop] !== <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>          target[prop] = source[prop]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">if</span> (target[prop].<span class="hljs-property">concat</span> &amp;&amp; source[prop].<span class="hljs-property">concat</span>) &#123;<br>            target[prop] = target[prop].<span class="hljs-title function_">concat</span>(source[prop])<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[prop] = <span class="hljs-title function_">deepMerge</span>(target[prop], source[prop])<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      target[prop] = source[prop]<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> target<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>md5加密</title>
    <link href="/blog/2020/11/05/JS/md5/"/>
    <url>/blog/2020/11/05/JS/md5/</url>
    
    <content type="html"><![CDATA[<h2 id="md5-加密"><a href="#md5-加密" class="headerlink" title="md5 加密"></a>md5 加密</h2><p>该<code>md5</code>加密方法，需要手动<code>import</code>库函数，调用<code>md5</code>方法即可使用，可以对字符串加密为<code>32</code>位的字符串结果，如需进一步了解， 详见<a href="https://baike.baidu.com/item/MD5"><code>MD5</code>百度百科</a></p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> md5Libs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;common/md5&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(md5Libs.<span class="hljs-title function_">md5</span>(<span class="hljs-string">&#x27;123456&#x27;</span>))<br>    <span class="hljs-comment">// 结果为：32位乱码</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>common/md5.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message</span><br><span class="hljs-comment"> * Digest Algorithm, as defined in RFC 1321.</span><br><span class="hljs-comment"> * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009</span><br><span class="hljs-comment"> * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet</span><br><span class="hljs-comment"> * Distributed under the BSD License</span><br><span class="hljs-comment"> * See http://pajhome.org.uk/crypt/md5 for more info.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Configurable variables. You may need to tweak these to be compatible with</span><br><span class="hljs-comment"> * the server-side, but the defaults work in most cases.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> hexcase = <span class="hljs-number">0</span> <span class="hljs-comment">/* hex output format. 0 - lowercase; 1 - uppercase        */</span><br><span class="hljs-keyword">var</span> b64pad = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">/* base-64 pad character. &quot;=&quot; for strict RFC compliance   */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * These are the functions you&#x27;ll usually want to call</span><br><span class="hljs-comment"> * They take string arguments and return either hex or base-64 encoded strings</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hex_md5</span>(<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">rstr2hex</span>(<span class="hljs-title function_">rstr_md5</span>(<span class="hljs-title function_">str2rstr_utf8</span>(s)))<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">b64_md5</span>(<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">rstr2b64</span>(<span class="hljs-title function_">rstr_md5</span>(<span class="hljs-title function_">str2rstr_utf8</span>(s)))<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">any_md5</span>(<span class="hljs-params">s, e</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">rstr2any</span>(<span class="hljs-title function_">rstr_md5</span>(<span class="hljs-title function_">str2rstr_utf8</span>(s)), e)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hex_hmac_md5</span>(<span class="hljs-params">k, d</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">rstr2hex</span>(<span class="hljs-title function_">rstr_hmac_md5</span>(<span class="hljs-title function_">str2rstr_utf8</span>(k), <span class="hljs-title function_">str2rstr_utf8</span>(d)))<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">b64_hmac_md5</span>(<span class="hljs-params">k, d</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">rstr2b64</span>(<span class="hljs-title function_">rstr_hmac_md5</span>(<span class="hljs-title function_">str2rstr_utf8</span>(k), <span class="hljs-title function_">str2rstr_utf8</span>(d)))<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">any_hmac_md5</span>(<span class="hljs-params">k, d, e</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">rstr2any</span>(<span class="hljs-title function_">rstr_hmac_md5</span>(<span class="hljs-title function_">str2rstr_utf8</span>(k), <span class="hljs-title function_">str2rstr_utf8</span>(d)), e)<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Perform a simple self-test to see if the VM is working</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">md5_vm_test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">hex_md5</span>(<span class="hljs-string">&#x27;abc&#x27;</span>).<span class="hljs-title function_">toLowerCase</span>() == <span class="hljs-string">&#x27;900150983cd24fb0d6963f7d28e17f72&#x27;</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Calculate the MD5 of a raw string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rstr_md5</span>(<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">binl2rstr</span>(<span class="hljs-title function_">binl_md5</span>(<span class="hljs-title function_">rstr2binl</span>(s), s.<span class="hljs-property">length</span> * <span class="hljs-number">8</span>))<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Calculate the HMAC-MD5, of a key and some data (raw strings)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rstr_hmac_md5</span>(<span class="hljs-params">key, data</span>) &#123;<br>  <span class="hljs-keyword">var</span> bkey = <span class="hljs-title function_">rstr2binl</span>(key)<br>  <span class="hljs-keyword">if</span> (bkey.<span class="hljs-property">length</span> &gt; <span class="hljs-number">16</span>) bkey = <span class="hljs-title function_">binl_md5</span>(bkey, key.<span class="hljs-property">length</span> * <span class="hljs-number">8</span>)<br><br>  <span class="hljs-keyword">var</span> ipad = <span class="hljs-title class_">Array</span>(<span class="hljs-number">16</span>),<br>    opad = <span class="hljs-title class_">Array</span>(<span class="hljs-number">16</span>)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) &#123;<br>    ipad[i] = bkey[i] ^ <span class="hljs-number">0x36363636</span><br>    opad[i] = bkey[i] ^ <span class="hljs-number">0x5c5c5c5c</span><br>  &#125;<br><br>  <span class="hljs-keyword">var</span> hash = <span class="hljs-title function_">binl_md5</span>(ipad.<span class="hljs-title function_">concat</span>(<span class="hljs-title function_">rstr2binl</span>(data)), <span class="hljs-number">512</span> + data.<span class="hljs-property">length</span> * <span class="hljs-number">8</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">binl2rstr</span>(<span class="hljs-title function_">binl_md5</span>(opad.<span class="hljs-title function_">concat</span>(hash), <span class="hljs-number">512</span> + <span class="hljs-number">128</span>))<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Convert a raw string to a hex string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rstr2hex</span>(<span class="hljs-params">input</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    hexcase<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    hexcase = <span class="hljs-number">0</span><br>  &#125;<br>  <span class="hljs-keyword">var</span> hex_tab = hexcase ? <span class="hljs-string">&#x27;0123456789ABCDEF&#x27;</span> : <span class="hljs-string">&#x27;0123456789abcdef&#x27;</span><br>  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">var</span> x<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; input.<span class="hljs-property">length</span>; i++) &#123;<br>    x = input.<span class="hljs-title function_">charCodeAt</span>(i)<br>    output += hex_tab.<span class="hljs-title function_">charAt</span>((x &gt;&gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0f</span>) + hex_tab.<span class="hljs-title function_">charAt</span>(x &amp; <span class="hljs-number">0x0f</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> output<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Convert a raw string to a base-64 string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rstr2b64</span>(<span class="hljs-params">input</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    b64pad<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    b64pad = <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;<br>  <span class="hljs-keyword">var</span> tab = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">var</span> len = input.<span class="hljs-property">length</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i += <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-keyword">var</span> triplet =<br>      (input.<span class="hljs-title function_">charCodeAt</span>(i) &lt;&lt; <span class="hljs-number">16</span>) |<br>      (i + <span class="hljs-number">1</span> &lt; len ? input.<span class="hljs-title function_">charCodeAt</span>(i + <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">8</span> : <span class="hljs-number">0</span>) |<br>      (i + <span class="hljs-number">2</span> &lt; len ? input.<span class="hljs-title function_">charCodeAt</span>(i + <span class="hljs-number">2</span>) : <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>      <span class="hljs-keyword">if</span> (i * <span class="hljs-number">8</span> + j * <span class="hljs-number">6</span> &gt; input.<span class="hljs-property">length</span> * <span class="hljs-number">8</span>) output += b64pad<br>      <span class="hljs-keyword">else</span> output += tab.<span class="hljs-title function_">charAt</span>((triplet &gt;&gt;&gt; (<span class="hljs-number">6</span> * (<span class="hljs-number">3</span> - j))) &amp; <span class="hljs-number">0x3f</span>)<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> output<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Convert a raw string to an arbitrary string encoding</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rstr2any</span>(<span class="hljs-params">input, encoding</span>) &#123;<br>  <span class="hljs-keyword">var</span> divisor = encoding.<span class="hljs-property">length</span><br>  <span class="hljs-keyword">var</span> i, j, q, x, quotient<br><br>  <span class="hljs-comment">/* Convert to an array of 16-bit big-endian values, forming the dividend */</span><br>  <span class="hljs-keyword">var</span> dividend = <span class="hljs-title class_">Array</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(input.<span class="hljs-property">length</span> / <span class="hljs-number">2</span>))<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; dividend.<span class="hljs-property">length</span>; i++) &#123;<br>    dividend[i] = (input.<span class="hljs-title function_">charCodeAt</span>(i * <span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-number">8</span>) | input.<span class="hljs-title function_">charCodeAt</span>(i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Repeatedly perform a long division. The binary array forms the dividend,</span><br><span class="hljs-comment">   * the length of the encoding is the divisor. Once computed, the quotient</span><br><span class="hljs-comment">   * forms the dividend for the next step. All remainders are stored for later</span><br><span class="hljs-comment">   * use.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">var</span> full_length = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>((input.<span class="hljs-property">length</span> * <span class="hljs-number">8</span>) / (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">log</span>(encoding.<span class="hljs-property">length</span>) / <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)))<br>  <span class="hljs-keyword">var</span> remainders = <span class="hljs-title class_">Array</span>(full_length)<br>  <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; full_length; j++) &#123;<br>    quotient = <span class="hljs-title class_">Array</span>()<br>    x = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; dividend.<span class="hljs-property">length</span>; i++) &#123;<br>      x = (x &lt;&lt; <span class="hljs-number">16</span>) + dividend[i]<br>      q = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(x / divisor)<br>      x -= q * divisor<br>      <span class="hljs-keyword">if</span> (quotient.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> || q &gt; <span class="hljs-number">0</span>) quotient[quotient.<span class="hljs-property">length</span>] = q<br>    &#125;<br>    remainders[j] = x<br>    dividend = quotient<br>  &#125;<br><br>  <span class="hljs-comment">/* Convert the remainders to the output string */</span><br>  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> (i = remainders.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) output += encoding.<span class="hljs-title function_">charAt</span>(remainders[i])<br><br>  <span class="hljs-keyword">return</span> output<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Encode a string as utf-8.</span><br><span class="hljs-comment"> * For efficiency, this assumes the input is valid utf-16.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">str2rstr_utf8</span>(<span class="hljs-params">input</span>) &#123;<br>  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">var</span> i = -<span class="hljs-number">1</span><br>  <span class="hljs-keyword">var</span> x, y<br><br>  <span class="hljs-keyword">while</span> (++i &lt; input.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-comment">/* Decode utf-16 surrogate pairs */</span><br>    x = input.<span class="hljs-title function_">charCodeAt</span>(i)<br>    y = i + <span class="hljs-number">1</span> &lt; input.<span class="hljs-property">length</span> ? input.<span class="hljs-title function_">charCodeAt</span>(i + <span class="hljs-number">1</span>) : <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0xd800</span> &lt;= x &amp;&amp; x &lt;= <span class="hljs-number">0xdbff</span> &amp;&amp; <span class="hljs-number">0xdc00</span> &lt;= y &amp;&amp; y &lt;= <span class="hljs-number">0xdfff</span>) &#123;<br>      x = <span class="hljs-number">0x10000</span> + ((x &amp; <span class="hljs-number">0x03ff</span>) &lt;&lt; <span class="hljs-number">10</span>) + (y &amp; <span class="hljs-number">0x03ff</span>)<br>      i++<br>    &#125;<br><br>    <span class="hljs-comment">/* Encode output as utf-8 */</span><br>    <span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">0x7f</span>) output += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(x)<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">0x7ff</span>) output += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">0xc0</span> | ((x &gt;&gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0x1f</span>), <span class="hljs-number">0x80</span> | (x &amp; <span class="hljs-number">0x3f</span>))<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">0xffff</span>)<br>      output += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">0xe0</span> | ((x &gt;&gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x0f</span>), <span class="hljs-number">0x80</span> | ((x &gt;&gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0x3f</span>), <span class="hljs-number">0x80</span> | (x &amp; <span class="hljs-number">0x3f</span>))<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">0x1fffff</span>)<br>      output += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<br>        <span class="hljs-number">0xf0</span> | ((x &gt;&gt;&gt; <span class="hljs-number">18</span>) &amp; <span class="hljs-number">0x07</span>),<br>        <span class="hljs-number">0x80</span> | ((x &gt;&gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x3f</span>),<br>        <span class="hljs-number">0x80</span> | ((x &gt;&gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0x3f</span>),<br>        <span class="hljs-number">0x80</span> | (x &amp; <span class="hljs-number">0x3f</span>)<br>      )<br>  &#125;<br>  <span class="hljs-keyword">return</span> output<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Encode a string as utf-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">str2rstr_utf16le</span>(<span class="hljs-params">input</span>) &#123;<br>  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; input.<span class="hljs-property">length</span>; i++)<br>    output += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(input.<span class="hljs-title function_">charCodeAt</span>(i) &amp; <span class="hljs-number">0xff</span>, (input.<span class="hljs-title function_">charCodeAt</span>(i) &gt;&gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>)<br>  <span class="hljs-keyword">return</span> output<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">str2rstr_utf16be</span>(<span class="hljs-params">input</span>) &#123;<br>  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; input.<span class="hljs-property">length</span>; i++)<br>    output += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((input.<span class="hljs-title function_">charCodeAt</span>(i) &gt;&gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>, input.<span class="hljs-title function_">charCodeAt</span>(i) &amp; <span class="hljs-number">0xff</span>)<br>  <span class="hljs-keyword">return</span> output<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Convert a raw string to an array of little-endian words</span><br><span class="hljs-comment"> * Characters &gt;255 have their high-byte silently ignored.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rstr2binl</span>(<span class="hljs-params">input</span>) &#123;<br>  <span class="hljs-keyword">var</span> output = <span class="hljs-title class_">Array</span>(input.<span class="hljs-property">length</span> &gt;&gt; <span class="hljs-number">2</span>)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; output.<span class="hljs-property">length</span>; i++) output[i] = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; input.<span class="hljs-property">length</span> * <span class="hljs-number">8</span>; i += <span class="hljs-number">8</span>) output[i &gt;&gt; <span class="hljs-number">5</span>] |= (input.<span class="hljs-title function_">charCodeAt</span>(i / <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>) &lt;&lt; i % <span class="hljs-number">32</span><br>  <span class="hljs-keyword">return</span> output<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Convert an array of little-endian words to a string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">binl2rstr</span>(<span class="hljs-params">input</span>) &#123;<br>  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; input.<span class="hljs-property">length</span> * <span class="hljs-number">32</span>; i += <span class="hljs-number">8</span>) output += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((input[i &gt;&gt; <span class="hljs-number">5</span>] &gt;&gt;&gt; i % <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xff</span>)<br>  <span class="hljs-keyword">return</span> output<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Calculate the MD5 of an array of little-endian words, and a bit length.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">binl_md5</span>(<span class="hljs-params">x, len</span>) &#123;<br>  <span class="hljs-comment">/* append padding */</span><br>  x[len &gt;&gt; <span class="hljs-number">5</span>] |= <span class="hljs-number">0x80</span> &lt;&lt; len % <span class="hljs-number">32</span><br>  x[(((len + <span class="hljs-number">64</span>) &gt;&gt;&gt; <span class="hljs-number">9</span>) &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">14</span>] = len<br><br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1732584193</span><br>  <span class="hljs-keyword">var</span> b = -<span class="hljs-number">271733879</span><br>  <span class="hljs-keyword">var</span> c = -<span class="hljs-number">1732584194</span><br>  <span class="hljs-keyword">var</span> d = <span class="hljs-number">271733878</span><br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; x.<span class="hljs-property">length</span>; i += <span class="hljs-number">16</span>) &#123;<br>    <span class="hljs-keyword">var</span> olda = a<br>    <span class="hljs-keyword">var</span> oldb = b<br>    <span class="hljs-keyword">var</span> oldc = c<br>    <span class="hljs-keyword">var</span> oldd = d<br><br>    a = <span class="hljs-title function_">md5_ff</span>(a, b, c, d, x[i + <span class="hljs-number">0</span>], <span class="hljs-number">7</span>, -<span class="hljs-number">680876936</span>)<br>    d = <span class="hljs-title function_">md5_ff</span>(d, a, b, c, x[i + <span class="hljs-number">1</span>], <span class="hljs-number">12</span>, -<span class="hljs-number">389564586</span>)<br>    c = <span class="hljs-title function_">md5_ff</span>(c, d, a, b, x[i + <span class="hljs-number">2</span>], <span class="hljs-number">17</span>, <span class="hljs-number">606105819</span>)<br>    b = <span class="hljs-title function_">md5_ff</span>(b, c, d, a, x[i + <span class="hljs-number">3</span>], <span class="hljs-number">22</span>, -<span class="hljs-number">1044525330</span>)<br>    a = <span class="hljs-title function_">md5_ff</span>(a, b, c, d, x[i + <span class="hljs-number">4</span>], <span class="hljs-number">7</span>, -<span class="hljs-number">176418897</span>)<br>    d = <span class="hljs-title function_">md5_ff</span>(d, a, b, c, x[i + <span class="hljs-number">5</span>], <span class="hljs-number">12</span>, <span class="hljs-number">1200080426</span>)<br>    c = <span class="hljs-title function_">md5_ff</span>(c, d, a, b, x[i + <span class="hljs-number">6</span>], <span class="hljs-number">17</span>, -<span class="hljs-number">1473231341</span>)<br>    b = <span class="hljs-title function_">md5_ff</span>(b, c, d, a, x[i + <span class="hljs-number">7</span>], <span class="hljs-number">22</span>, -<span class="hljs-number">45705983</span>)<br>    a = <span class="hljs-title function_">md5_ff</span>(a, b, c, d, x[i + <span class="hljs-number">8</span>], <span class="hljs-number">7</span>, <span class="hljs-number">1770035416</span>)<br>    d = <span class="hljs-title function_">md5_ff</span>(d, a, b, c, x[i + <span class="hljs-number">9</span>], <span class="hljs-number">12</span>, -<span class="hljs-number">1958414417</span>)<br>    c = <span class="hljs-title function_">md5_ff</span>(c, d, a, b, x[i + <span class="hljs-number">10</span>], <span class="hljs-number">17</span>, -<span class="hljs-number">42063</span>)<br>    b = <span class="hljs-title function_">md5_ff</span>(b, c, d, a, x[i + <span class="hljs-number">11</span>], <span class="hljs-number">22</span>, -<span class="hljs-number">1990404162</span>)<br>    a = <span class="hljs-title function_">md5_ff</span>(a, b, c, d, x[i + <span class="hljs-number">12</span>], <span class="hljs-number">7</span>, <span class="hljs-number">1804603682</span>)<br>    d = <span class="hljs-title function_">md5_ff</span>(d, a, b, c, x[i + <span class="hljs-number">13</span>], <span class="hljs-number">12</span>, -<span class="hljs-number">40341101</span>)<br>    c = <span class="hljs-title function_">md5_ff</span>(c, d, a, b, x[i + <span class="hljs-number">14</span>], <span class="hljs-number">17</span>, -<span class="hljs-number">1502002290</span>)<br>    b = <span class="hljs-title function_">md5_ff</span>(b, c, d, a, x[i + <span class="hljs-number">15</span>], <span class="hljs-number">22</span>, <span class="hljs-number">1236535329</span>)<br><br>    a = <span class="hljs-title function_">md5_gg</span>(a, b, c, d, x[i + <span class="hljs-number">1</span>], <span class="hljs-number">5</span>, -<span class="hljs-number">165796510</span>)<br>    d = <span class="hljs-title function_">md5_gg</span>(d, a, b, c, x[i + <span class="hljs-number">6</span>], <span class="hljs-number">9</span>, -<span class="hljs-number">1069501632</span>)<br>    c = <span class="hljs-title function_">md5_gg</span>(c, d, a, b, x[i + <span class="hljs-number">11</span>], <span class="hljs-number">14</span>, <span class="hljs-number">643717713</span>)<br>    b = <span class="hljs-title function_">md5_gg</span>(b, c, d, a, x[i + <span class="hljs-number">0</span>], <span class="hljs-number">20</span>, -<span class="hljs-number">373897302</span>)<br>    a = <span class="hljs-title function_">md5_gg</span>(a, b, c, d, x[i + <span class="hljs-number">5</span>], <span class="hljs-number">5</span>, -<span class="hljs-number">701558691</span>)<br>    d = <span class="hljs-title function_">md5_gg</span>(d, a, b, c, x[i + <span class="hljs-number">10</span>], <span class="hljs-number">9</span>, <span class="hljs-number">38016083</span>)<br>    c = <span class="hljs-title function_">md5_gg</span>(c, d, a, b, x[i + <span class="hljs-number">15</span>], <span class="hljs-number">14</span>, -<span class="hljs-number">660478335</span>)<br>    b = <span class="hljs-title function_">md5_gg</span>(b, c, d, a, x[i + <span class="hljs-number">4</span>], <span class="hljs-number">20</span>, -<span class="hljs-number">405537848</span>)<br>    a = <span class="hljs-title function_">md5_gg</span>(a, b, c, d, x[i + <span class="hljs-number">9</span>], <span class="hljs-number">5</span>, <span class="hljs-number">568446438</span>)<br>    d = <span class="hljs-title function_">md5_gg</span>(d, a, b, c, x[i + <span class="hljs-number">14</span>], <span class="hljs-number">9</span>, -<span class="hljs-number">1019803690</span>)<br>    c = <span class="hljs-title function_">md5_gg</span>(c, d, a, b, x[i + <span class="hljs-number">3</span>], <span class="hljs-number">14</span>, -<span class="hljs-number">187363961</span>)<br>    b = <span class="hljs-title function_">md5_gg</span>(b, c, d, a, x[i + <span class="hljs-number">8</span>], <span class="hljs-number">20</span>, <span class="hljs-number">1163531501</span>)<br>    a = <span class="hljs-title function_">md5_gg</span>(a, b, c, d, x[i + <span class="hljs-number">13</span>], <span class="hljs-number">5</span>, -<span class="hljs-number">1444681467</span>)<br>    d = <span class="hljs-title function_">md5_gg</span>(d, a, b, c, x[i + <span class="hljs-number">2</span>], <span class="hljs-number">9</span>, -<span class="hljs-number">51403784</span>)<br>    c = <span class="hljs-title function_">md5_gg</span>(c, d, a, b, x[i + <span class="hljs-number">7</span>], <span class="hljs-number">14</span>, <span class="hljs-number">1735328473</span>)<br>    b = <span class="hljs-title function_">md5_gg</span>(b, c, d, a, x[i + <span class="hljs-number">12</span>], <span class="hljs-number">20</span>, -<span class="hljs-number">1926607734</span>)<br><br>    a = <span class="hljs-title function_">md5_hh</span>(a, b, c, d, x[i + <span class="hljs-number">5</span>], <span class="hljs-number">4</span>, -<span class="hljs-number">378558</span>)<br>    d = <span class="hljs-title function_">md5_hh</span>(d, a, b, c, x[i + <span class="hljs-number">8</span>], <span class="hljs-number">11</span>, -<span class="hljs-number">2022574463</span>)<br>    c = <span class="hljs-title function_">md5_hh</span>(c, d, a, b, x[i + <span class="hljs-number">11</span>], <span class="hljs-number">16</span>, <span class="hljs-number">1839030562</span>)<br>    b = <span class="hljs-title function_">md5_hh</span>(b, c, d, a, x[i + <span class="hljs-number">14</span>], <span class="hljs-number">23</span>, -<span class="hljs-number">35309556</span>)<br>    a = <span class="hljs-title function_">md5_hh</span>(a, b, c, d, x[i + <span class="hljs-number">1</span>], <span class="hljs-number">4</span>, -<span class="hljs-number">1530992060</span>)<br>    d = <span class="hljs-title function_">md5_hh</span>(d, a, b, c, x[i + <span class="hljs-number">4</span>], <span class="hljs-number">11</span>, <span class="hljs-number">1272893353</span>)<br>    c = <span class="hljs-title function_">md5_hh</span>(c, d, a, b, x[i + <span class="hljs-number">7</span>], <span class="hljs-number">16</span>, -<span class="hljs-number">155497632</span>)<br>    b = <span class="hljs-title function_">md5_hh</span>(b, c, d, a, x[i + <span class="hljs-number">10</span>], <span class="hljs-number">23</span>, -<span class="hljs-number">1094730640</span>)<br>    a = <span class="hljs-title function_">md5_hh</span>(a, b, c, d, x[i + <span class="hljs-number">13</span>], <span class="hljs-number">4</span>, <span class="hljs-number">681279174</span>)<br>    d = <span class="hljs-title function_">md5_hh</span>(d, a, b, c, x[i + <span class="hljs-number">0</span>], <span class="hljs-number">11</span>, -<span class="hljs-number">358537222</span>)<br>    c = <span class="hljs-title function_">md5_hh</span>(c, d, a, b, x[i + <span class="hljs-number">3</span>], <span class="hljs-number">16</span>, -<span class="hljs-number">722521979</span>)<br>    b = <span class="hljs-title function_">md5_hh</span>(b, c, d, a, x[i + <span class="hljs-number">6</span>], <span class="hljs-number">23</span>, <span class="hljs-number">76029189</span>)<br>    a = <span class="hljs-title function_">md5_hh</span>(a, b, c, d, x[i + <span class="hljs-number">9</span>], <span class="hljs-number">4</span>, -<span class="hljs-number">640364487</span>)<br>    d = <span class="hljs-title function_">md5_hh</span>(d, a, b, c, x[i + <span class="hljs-number">12</span>], <span class="hljs-number">11</span>, -<span class="hljs-number">421815835</span>)<br>    c = <span class="hljs-title function_">md5_hh</span>(c, d, a, b, x[i + <span class="hljs-number">15</span>], <span class="hljs-number">16</span>, <span class="hljs-number">530742520</span>)<br>    b = <span class="hljs-title function_">md5_hh</span>(b, c, d, a, x[i + <span class="hljs-number">2</span>], <span class="hljs-number">23</span>, -<span class="hljs-number">995338651</span>)<br><br>    a = <span class="hljs-title function_">md5_ii</span>(a, b, c, d, x[i + <span class="hljs-number">0</span>], <span class="hljs-number">6</span>, -<span class="hljs-number">198630844</span>)<br>    d = <span class="hljs-title function_">md5_ii</span>(d, a, b, c, x[i + <span class="hljs-number">7</span>], <span class="hljs-number">10</span>, <span class="hljs-number">1126891415</span>)<br>    c = <span class="hljs-title function_">md5_ii</span>(c, d, a, b, x[i + <span class="hljs-number">14</span>], <span class="hljs-number">15</span>, -<span class="hljs-number">1416354905</span>)<br>    b = <span class="hljs-title function_">md5_ii</span>(b, c, d, a, x[i + <span class="hljs-number">5</span>], <span class="hljs-number">21</span>, -<span class="hljs-number">57434055</span>)<br>    a = <span class="hljs-title function_">md5_ii</span>(a, b, c, d, x[i + <span class="hljs-number">12</span>], <span class="hljs-number">6</span>, <span class="hljs-number">1700485571</span>)<br>    d = <span class="hljs-title function_">md5_ii</span>(d, a, b, c, x[i + <span class="hljs-number">3</span>], <span class="hljs-number">10</span>, -<span class="hljs-number">1894986606</span>)<br>    c = <span class="hljs-title function_">md5_ii</span>(c, d, a, b, x[i + <span class="hljs-number">10</span>], <span class="hljs-number">15</span>, -<span class="hljs-number">1051523</span>)<br>    b = <span class="hljs-title function_">md5_ii</span>(b, c, d, a, x[i + <span class="hljs-number">1</span>], <span class="hljs-number">21</span>, -<span class="hljs-number">2054922799</span>)<br>    a = <span class="hljs-title function_">md5_ii</span>(a, b, c, d, x[i + <span class="hljs-number">8</span>], <span class="hljs-number">6</span>, <span class="hljs-number">1873313359</span>)<br>    d = <span class="hljs-title function_">md5_ii</span>(d, a, b, c, x[i + <span class="hljs-number">15</span>], <span class="hljs-number">10</span>, -<span class="hljs-number">30611744</span>)<br>    c = <span class="hljs-title function_">md5_ii</span>(c, d, a, b, x[i + <span class="hljs-number">6</span>], <span class="hljs-number">15</span>, -<span class="hljs-number">1560198380</span>)<br>    b = <span class="hljs-title function_">md5_ii</span>(b, c, d, a, x[i + <span class="hljs-number">13</span>], <span class="hljs-number">21</span>, <span class="hljs-number">1309151649</span>)<br>    a = <span class="hljs-title function_">md5_ii</span>(a, b, c, d, x[i + <span class="hljs-number">4</span>], <span class="hljs-number">6</span>, -<span class="hljs-number">145523070</span>)<br>    d = <span class="hljs-title function_">md5_ii</span>(d, a, b, c, x[i + <span class="hljs-number">11</span>], <span class="hljs-number">10</span>, -<span class="hljs-number">1120210379</span>)<br>    c = <span class="hljs-title function_">md5_ii</span>(c, d, a, b, x[i + <span class="hljs-number">2</span>], <span class="hljs-number">15</span>, <span class="hljs-number">718787259</span>)<br>    b = <span class="hljs-title function_">md5_ii</span>(b, c, d, a, x[i + <span class="hljs-number">9</span>], <span class="hljs-number">21</span>, -<span class="hljs-number">343485551</span>)<br><br>    a = <span class="hljs-title function_">safe_add</span>(a, olda)<br>    b = <span class="hljs-title function_">safe_add</span>(b, oldb)<br>    c = <span class="hljs-title function_">safe_add</span>(c, oldc)<br>    d = <span class="hljs-title function_">safe_add</span>(d, oldd)<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>(a, b, c, d)<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * These functions implement the four basic operations the algorithm uses.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">md5_cmn</span>(<span class="hljs-params">q, a, b, x, s, t</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">safe_add</span>(<span class="hljs-title function_">bit_rol</span>(<span class="hljs-title function_">safe_add</span>(<span class="hljs-title function_">safe_add</span>(a, q), <span class="hljs-title function_">safe_add</span>(x, t)), s), b)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">md5_ff</span>(<span class="hljs-params">a, b, c, d, x, s, t</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">md5_cmn</span>((b &amp; c) | (~b &amp; d), a, b, x, s, t)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">md5_gg</span>(<span class="hljs-params">a, b, c, d, x, s, t</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">md5_cmn</span>((b &amp; d) | (c &amp; ~d), a, b, x, s, t)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">md5_hh</span>(<span class="hljs-params">a, b, c, d, x, s, t</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">md5_cmn</span>(b ^ c ^ d, a, b, x, s, t)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">md5_ii</span>(<span class="hljs-params">a, b, c, d, x, s, t</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">md5_cmn</span>(c ^ (b | ~d), a, b, x, s, t)<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Add integers, wrapping at 2^32. This uses 16-bit operations internally</span><br><span class="hljs-comment"> * to work around bugs in some JS interpreters.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">safe_add</span>(<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">var</span> lsw = (x &amp; <span class="hljs-number">0xffff</span>) + (y &amp; <span class="hljs-number">0xffff</span>)<br>  <span class="hljs-keyword">var</span> msw = (x &gt;&gt; <span class="hljs-number">16</span>) + (y &gt;&gt; <span class="hljs-number">16</span>) + (lsw &gt;&gt; <span class="hljs-number">16</span>)<br>  <span class="hljs-keyword">return</span> (msw &lt;&lt; <span class="hljs-number">16</span>) | (lsw &amp; <span class="hljs-number">0xffff</span>)<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Bitwise rotate a 32-bit number to the left.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bit_rol</span>(<span class="hljs-params">num, cnt</span>) &#123;<br>  <span class="hljs-keyword">return</span> (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (<span class="hljs-number">32</span> - cnt))<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">md5</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">hex_md5</span>(str)<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test 规则校验</title>
    <link href="/blog/2020/11/05/JS/test/"/>
    <url>/blog/2020/11/05/JS/test/</url>
    
    <content type="html"><![CDATA[<h1 id="test-规则校验"><a href="#test-规则校验" class="headerlink" title="test 规则校验"></a>test 规则校验</h1><div class="note note-success">            <p>里面有一些常用的规则校验 如是否手机号，邮箱号，URL 等</p>          </div><p><strong>首先引入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//main.js</span><br><br><span class="hljs-keyword">import</span> test <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./common/test.js&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$test</span> = test<br></code></pre></td></tr></table></figure><a id="more"></a><h2 id="是否验证码"><a href="#是否验证码" class="headerlink" title="是否验证码"></a>是否验证码</h2><p><code>code(value, len = 6)</code></p><p>校验是否验证码(要求为数字)，返回<code>true</code>或者<code>false</code></p><ul><li><code>value</code> <String> 验证码字符串</li><li><code>len</code> <Number> 验证码长度，默认为 6</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">code</span>(<span class="hljs-string">&#x27;4567&#x27;</span>, <span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><h2 id="是否数组"><a href="#是否数组" class="headerlink" title="是否数组"></a>是否数组</h2><p><code>array(array)</code></p><p>校验是否数组，返回<code>true</code>或者<code>false</code>。</p><ul><li><code>array</code> <Array> 数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))<br></code></pre></td></tr></table></figure><h2 id="是否-Json-字符串"><a href="#是否-Json-字符串" class="headerlink" title="是否 Json 字符串"></a>是否 Json 字符串</h2><p><code>jsonString(json)</code></p><p>校验是否<code>Json</code>，返回<code>true</code>或者<code>false</code>。</p><ul><li><code>json</code> <Json> Json 字符串</li></ul><p>注意：请留意<code>json</code>字符串的要求：</p><ol><li>整体为一个字符串</li><li>字符串对象内的属性需要用<code>&quot;&quot;</code>双引号包含</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">jsonString</span>(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: 1&#125;&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="是否对象"><a href="#是否对象" class="headerlink" title="是否对象"></a>是否对象</h2><p><code>object(object)</code></p><p>校验是否对象，返回<code>true</code>或者<code>false</code>。</p><ul><li><code>object</code> <Object> 对象</li></ul><p>注意：请留意<code>json</code>字符串的要求：</p><ol><li>整体为一个字符串</li><li>字符串对象内的属性需要用<code>&quot;&quot;</code>双引号包含</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">object</span>(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;))<br></code></pre></td></tr></table></figure><h2 id="是否邮箱号"><a href="#是否邮箱号" class="headerlink" title="是否邮箱号"></a>是否邮箱号</h2><p><code>email(email)</code></p><p>校验是否邮箱号，返回<code>true</code>或者<code>false</code>。</p><ul><li><code>email</code> <String> 字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">email</span>(<span class="hljs-string">&#x27;123465798@gmail.com&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="是否手机号"><a href="#是否手机号" class="headerlink" title="是否手机号"></a>是否手机号</h2><p><code>mobile(mobile)</code></p><p>校验是否手机号，返回<code>true</code>或者<code>false</code>。</p><ul><li><code>mobile</code> <String> 字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">mobile</span>(<span class="hljs-string">&#x27;13845678900&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="是否-URL"><a href="#是否-URL" class="headerlink" title="是否 URL"></a>是否 URL</h2><p><code>url(url)</code></p><p>校验是否 URL 链接，返回<code>true</code>或者<code>false</code>。</p><ul><li><code>url</code> <String> 字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">url</span>(<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="是否为空"><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h2><p>这里指的“空”，包含如下几种情况：</p><ul><li>值为<code>undefined</code>(一种类型)，非字符串”<code>undefined</code>“</li><li>字符串长度为<code>0</code>，也即空字符串</li><li>值为<code>false</code>(布尔类型)，非字符串”<code>false</code>“</li><li>值为数值<code>0</code>(非字符串”<code>0</code>“)，或者<code>NaN</code></li><li>值为<code>null</code>，空对象<code>&#123;&#125;</code>，或者长度为<code>0</code>的数组</li></ul><p><code>isEmpty(value)</code></p><p>校验值是否为空，返回<code>true</code>或者<code>false</code>。<br>此方法等同于<code>empty</code>名称，但是为了更语义化，推荐用<code>isEmpty</code>名称。</p><ul><li><code>value</code> <any> 字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">isEmpty</span>(<span class="hljs-literal">false</span>))<br></code></pre></td></tr></table></figure><h2 id="是否普通日期"><a href="#是否普通日期" class="headerlink" title="是否普通日期"></a>是否普通日期</h2><p>验证一个字符串是否日期，返回<code>true</code>或者<code>false</code>，如下行为正确</p><ul><li><code>2020-02-10</code>、<code>2020-02-10 08:32:10</code>、<code>2020/02/10 3:10</code>、<code>2020/02/10 03:10</code>、<code>2020/02-10 3:10</code></li></ul><p>如下为错误：</p><ul><li><code>2020年02月10日、2020-02-10 25:32</code></li></ul><p>总的来说，年月日之间可以用”/“或者”-“分隔(不能用中文分隔)，时分秒之间用”:”分隔，数值不能超出范围，如月份不能为 13，则检验成功，否则失败。</p><p><code>date(date)</code></p><ul><li><code>date</code> <String> 日期字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">date</span>(<span class="hljs-string">&#x27;2020-02-10 08:32:10&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="是否十进制数值"><a href="#是否十进制数值" class="headerlink" title="是否十进制数值"></a>是否十进制数值</h2><p>整数，小数，负数，带千分位数(2,359.08)等可以检验通过，返回<code>true</code>或者<code>false</code>。</p><p><code>number(number)</code></p><ul><li><code>number</code> <String> 数字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">number</span>(<span class="hljs-string">&#x27;2020&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="是否整数"><a href="#是否整数" class="headerlink" title="是否整数"></a>是否整数</h2><p>所有字符都在<code>0-9</code>之间，才校验通过，结果返回<code>true</code>或者<code>false</code>。</p><p><code>digits(number)</code></p><ul><li><code>number</code> <String> 数字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">digits</span>(<span class="hljs-string">&#x27;2020&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="是否身份证号"><a href="#是否身份证号" class="headerlink" title="是否身份证号"></a>是否身份证号</h2><p>身份证号，包括尾数为”X”的类型，可以校验通过，结果返回<code>true</code>或者<code>false</code>。</p><p><code>idCard(idCard)</code></p><ul><li><code>idCard</code> <String> 身份证号</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">idCard</span>(<span class="hljs-string">&#x27;110101199003070134&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="是否车牌号"><a href="#是否车牌号" class="headerlink" title="是否车牌号"></a>是否车牌号</h2><p>可以校验旧车牌号和新能源类型车牌号，结果返回<code>true</code>或者<code>false</code>。</p><p><code>carNo(carNo)</code></p><ul><li><code>carNo</code> <String> 车牌号</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">carNo</span>(<span class="hljs-string">&#x27;京A88888&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="是否金额"><a href="#是否金额" class="headerlink" title="是否金额"></a>是否金额</h2><p>最多两位小数，可以带千分位，结果返回<code>true</code>或者<code>false</code>。</p><p><code>amount(amount)</code></p><ul><li><code>amount</code> <String> 金额字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">amount</span>(<span class="hljs-string">&#x27;3,233.08&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="是否字母或者数字"><a href="#是否字母或者数字" class="headerlink" title="是否字母或者数字"></a>是否字母或者数字</h2><p>只能是字母或者数字，结果返回<code>true</code>或者<code>false</code>。</p><p><code>enOrNum(str)</code></p><ul><li><code>str</code> <String> 字母或者数字字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">enOrNum</span>(<span class="hljs-string">&#x27;sas&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="是否包含某个值"><a href="#是否包含某个值" class="headerlink" title="是否包含某个值"></a>是否包含某个值</h2><p>字符串中是否包含某一个子字符串，区分大小写，结果返回<code>true</code>或者<code>false</code>。</p><p><code>contains(str, subStr)</code></p><ul><li><code>str</code> <String> 字母或者数字字符串</li><li><code>subStr</code> <String> 子字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;sas&#x27;</span>, <span class="hljs-string">&#x27;sa&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="数值是否在某个范围内"><a href="#数值是否在某个范围内" class="headerlink" title="数值是否在某个范围内"></a>数值是否在某个范围内</h2><p>如 30 在”29-35”这个范围内，不在”25-28”这个范围内，结果返回<code>true</code>或者<code>false</code></p><p><code>range(number, range)</code></p><ul><li><code>number</code> <Number> 数值</li><li><code>range</code> <Array> 如”[25-35]”</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">range</span>(<span class="hljs-number">35</span>, [<span class="hljs-number">30</span>, <span class="hljs-number">34</span>]))<br></code></pre></td></tr></table></figure><h2 id="字符串长度是否在某个范围内"><a href="#字符串长度是否在某个范围内" class="headerlink" title="字符串长度是否在某个范围内"></a>字符串长度是否在某个范围内</h2><p>如”<code>abc</code>“长度为 3，范围在”2-5”这个区间，结果返回<code>true</code>或者<code>false</code></p><p><code>rangeLength(str, range)</code></p><ul><li><code>str</code> <String> 数值</li><li><code>range</code> <Array> 如”[25-35]”</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$test</span>.<span class="hljs-title function_">rangeLength</span>(<span class="hljs-string">&#x27;abc&#x27;</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">10</span>]))<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证电子邮箱格式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">email</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/</span>.<span class="hljs-title function_">test</span>(value)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证手机格式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mobile</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^1[23456789]\d&#123;9&#125;$/</span>.<span class="hljs-title function_">test</span>(value)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证URL格式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">url</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^((https|http|ftp|rtsp|mms):\/\/)(([0-9a-zA-Z_!~*&#x27;().&amp;=+$%-]+: )?[0-9a-zA-Z_!~*&#x27;().&amp;=+$%-]+@)?(([0-9]&#123;1,3&#125;.)&#123;3&#125;[0-9]&#123;1,3&#125;|([0-9a-zA-Z_!~*&#x27;()-]+.)*([0-9a-zA-Z][0-9a-zA-Z-]&#123;0,61&#125;)?[0-9a-zA-Z].[a-zA-Z]&#123;2,6&#125;)(:[0-9]&#123;1,4&#125;)?((\/?)|(\/[0-9a-zA-Z_!~*&#x27;().;?:@&amp;=+$,%#-]+)+\/?)$/</span>.<span class="hljs-title function_">test</span>(<br>    value<br>  )<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证日期格式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">date</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> !<span class="hljs-regexp">/Invalid|NaN/</span>.<span class="hljs-title function_">test</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(value).<span class="hljs-title function_">toString</span>())<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证ISO类型的日期格式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">dateISO</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^\d&#123;4&#125;[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/</span>.<span class="hljs-title function_">test</span>(value)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证十进制数字</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">number</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^(?:-?\d+|-?\d&#123;1,3&#125;(?:,\d&#123;3&#125;)+)?(?:\.\d+)?$/</span>.<span class="hljs-title function_">test</span>(value)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证整数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">digits</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^\d+$/</span>.<span class="hljs-title function_">test</span>(value)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证身份证号码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">idCard</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;([0-9]|X)$/</span>.<span class="hljs-title function_">test</span>(value)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否车牌号</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">carNo</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-comment">// 新能源车牌</span><br>  <span class="hljs-keyword">const</span> xreg =<br>    <span class="hljs-regexp">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;(([0-9]&#123;5&#125;[DF]$)|([DF][A-HJ-NP-Z0-9][0-9]&#123;4&#125;$))/</span><br>  <span class="hljs-comment">// 旧车牌</span><br>  <span class="hljs-keyword">const</span> creg =<br>    <span class="hljs-regexp">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-HJ-NP-Z0-9]&#123;4&#125;[A-HJ-NP-Z0-9挂学警港澳]&#123;1&#125;$/</span><br>  <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> === <span class="hljs-number">7</span>) &#123;<br>    <span class="hljs-keyword">return</span> creg.<span class="hljs-title function_">test</span>(value)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> === <span class="hljs-number">8</span>) &#123;<br>    <span class="hljs-keyword">return</span> xreg.<span class="hljs-title function_">test</span>(value)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 金额,只允许2位小数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">amount</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-comment">//金额，只允许保留两位小数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^[1-9]\d*(,\d&#123;3&#125;)*(\.\d&#123;1,2&#125;)?$|^0\.\d&#123;1,2&#125;$/</span>.<span class="hljs-title function_">test</span>(value)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 中文</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">chinese</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/^[\u4e00-\u9fa5]+$/gi</span><br>  <span class="hljs-keyword">return</span> reg.<span class="hljs-title function_">test</span>(value)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 只能输入字母</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">letter</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^[a-zA-Z]*$/</span>.<span class="hljs-title function_">test</span>(value)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 只能是字母或者数字</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">enOrNum</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-comment">//英文或者数字</span><br>  <span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/^[0-9a-zA-Z]*$/g</span><br>  <span class="hljs-keyword">return</span> reg.<span class="hljs-title function_">test</span>(value)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证是否包含某个值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">contains</span>(<span class="hljs-params">value, param</span>) &#123;<br>  <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">indexOf</span>(param) &gt;= <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证一个值范围[min, max]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">range</span>(<span class="hljs-params">value, param</span>) &#123;<br>  <span class="hljs-keyword">return</span> value &gt;= param[<span class="hljs-number">0</span>] &amp;&amp; value &lt;= param[<span class="hljs-number">1</span>]<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证一个长度范围[min, max]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rangeLength</span>(<span class="hljs-params">value, param</span>) &#123;<br>  <span class="hljs-keyword">return</span> value.<span class="hljs-property">length</span> &gt;= param[<span class="hljs-number">0</span>] &amp;&amp; value.<span class="hljs-property">length</span> &lt;= param[<span class="hljs-number">1</span>]<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否固定电话</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">landline</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/^\d&#123;3,4&#125;-\d&#123;7,8&#125;(-\d&#123;3,4&#125;)?$/</span><br>  <span class="hljs-keyword">return</span> reg.<span class="hljs-title function_">test</span>(value)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否为空</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">empty</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">typeof</span> value) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;undefined&#x27;</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;string&#x27;</span>:<br>      <span class="hljs-keyword">if</span> (value.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(^[ \t\n\r]*)|([ \t\n\r]*$)/g</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;boolean&#x27;</span>:<br>      <span class="hljs-keyword">if</span> (!value) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;number&#x27;</span>:<br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> === value || <span class="hljs-built_in">isNaN</span>(value)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;object&#x27;</span>:<br>      <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> === value || value.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> value) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否json字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">jsonString</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value == <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(value)<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj == <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">array</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Array</span>.<span class="hljs-property">isArray</span> === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(value) === <span class="hljs-string">&#x27;[object Array]&#x27;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(value) === <span class="hljs-string">&#x27;[object Object]&#x27;</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否短信验证码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">code</span>(<span class="hljs-params">value, len = <span class="hljs-number">6</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">`^\\d&#123;<span class="hljs-subst">$&#123;len&#125;</span>&#125;$`</span>).<span class="hljs-title function_">test</span>(value)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  email,<br>  mobile,<br>  url,<br>  date,<br>  dateISO,<br>  number,<br>  digits,<br>  idCard,<br>  carNo,<br>  amount,<br>  chinese,<br>  letter,<br>  enOrNum,<br>  contains,<br>  range,<br>  rangeLength,<br>  empty,<br>  <span class="hljs-attr">isEmpty</span>: empty,<br>  jsonString,<br>  landline,<br>  object,<br>  array,<br>  code,<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>throttle &amp; debounce节流防抖</title>
    <link href="/blog/2020/11/05/JS/throttle/"/>
    <url>/blog/2020/11/05/JS/throttle/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是节流和防抖？"><a href="#什么是节流和防抖？" class="headerlink" title="什么是节流和防抖？"></a>什么是节流和防抖？</h2><ul><li>节流</li></ul><p>节流的意思是，规定时间内，只触发一次。比如我们设定 500ms，在这个时间内，无论点击按钮多少次，它都只会触发一次。</p><blockquote><p>具体场景可以是抢购时候，由于有无数人 快速点击按钮，如果每次点击都发送请求，就会给服务器造成巨大的压力，但是我们进行节流后，就会大大减少请求的次数。</p></blockquote><ul><li>防抖</li></ul><p>防抖的意思是，在连续的操作中，无论进行了多长时间，只有某一次的操作后在指定的时间内没有再操作，这一次才被判定有效。</p><blockquote><p>具体场景可以搜索框输入关键字过程中实时 请求服务器匹配搜索结果，如果不进行处理，那么就是输入框内容一直变化，导致一直发送请求。如果进行防抖处理，结果就是当我们输入内容完成后，一定时间(比如 500ms)没有再 输入内容，这时再触发请求。</p></blockquote><!-- more  --><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p><code>throttle(func, wait = 500, immediate = true)</code></p><p>规定时间内，只触发一次，可以通过设置<code>immediate</code>来决定触发的时机在这个时间的开始，还是结束的时候执行。</p><ul><li><p><code>func</code> <Function> 触发回调执行的函数</p></li><li><p><code>wait</code> <Number> 时间间隔，单位 ms</p></li><li><p><code>immediate</code> <Number> 在开始还是结束处触发，比如设置 wait 为 1000ms，如果在一秒内进行了 5 次操作，只触发一次，如果 immediate 为<code>true</code>，那么就会在第一次操作 触发回调，如果为<code>false</code>,就会在第 5 次操作触发回调。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> timer, flag<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 节流原理：在一定时间内，只能触发一次</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Function</span>&#125; func 要执行的回调函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Number</span>&#125; wait 延时的时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Boolean</span>&#125; immediate 是否立即执行</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> <span class="hljs-variable">null</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">func, wait = <span class="hljs-number">500</span>, immediate = <span class="hljs-literal">true</span></span>) &#123;<br>  <span class="hljs-keyword">if</span> (immediate) &#123;<br>    <span class="hljs-keyword">if</span> (!flag) &#123;<br>      flag = <span class="hljs-literal">true</span><br>      <span class="hljs-comment">// 如果是立即执行，则在wait毫秒内开始时执行</span><br>      <span class="hljs-keyword">typeof</span> func === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; <span class="hljs-title function_">func</span>()<br>      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        flag = <span class="hljs-literal">false</span><br>      &#125;, wait)<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (!flag) &#123;<br>      flag = <span class="hljs-literal">true</span><br>      <span class="hljs-comment">// 如果是非立即执行，则在wait毫秒内的结束处执行</span><br>      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        flag = <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">typeof</span> func === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; <span class="hljs-title function_">func</span>()<br>      &#125;, wait)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p><code>debounce(func, wait = 500, immediate = false)</code></p><p>在连续的操作中，无论进行了多长时间，只有某一次的操作后在指定的时间内没有再操作，这一次才被判定有效</p><ul><li><p><code>func</code> <Function> 触发回调执行的函数</p></li><li><p><code>wait</code> <Number> 时间间隔，单位 ms</p></li><li><p><code>immediate</code> <Number> 在开始还是结束处触发，如非特殊情况，一般默认为<code>false</code>即可</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> timeout = <span class="hljs-literal">null</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 防抖原理：一定时间内，只有最后一次操作，再过wait毫秒后才执行函数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Function</span>&#125; func 要执行的回调函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Number</span>&#125; wait 延时的时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Boolean</span>&#125; immediate 是否立即执行</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> <span class="hljs-variable">null</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">func, wait = <span class="hljs-number">500</span>, immediate = <span class="hljs-literal">false</span></span>) &#123;<br>  <span class="hljs-comment">// 清除定时器</span><br>  <span class="hljs-keyword">if</span> (timeout !== <span class="hljs-literal">null</span>) <span class="hljs-built_in">clearTimeout</span>(timeout)<br>  <span class="hljs-comment">// 立即执行，此类情况一般用不到</span><br>  <span class="hljs-keyword">if</span> (immediate) &#123;<br>    <span class="hljs-keyword">var</span> callNow = !timeout<br>    timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      timeout = <span class="hljs-literal">null</span><br>    &#125;, wait)<br>    <span class="hljs-keyword">if</span> (callNow) <span class="hljs-keyword">typeof</span> func === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; <span class="hljs-title function_">func</span>()<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 设置定时器，当最后一次操作后，timeout不会再被清除，所以在延时wait毫秒后执行func回调方法</span><br>    timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">typeof</span> func === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; <span class="hljs-title function_">func</span>()<br>    &#125;, wait)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>trim 去除空格</title>
    <link href="/blog/2020/11/05/JS/trim/"/>
    <url>/blog/2020/11/05/JS/trim/</url>
    
    <content type="html"><![CDATA[<h2 id="trim-去除空格"><a href="#trim-去除空格" class="headerlink" title="trim 去除空格"></a>trim 去除空格</h2><div class="note note-success">            <p><code>trim(str, pos)</code></p><p>该方法可以去除空格，分别可以去除所有空格，两端空格，左边空格，右边空格，默认为去除两端空格</p>          </div><ul><li><p><code>str</code> <String> 字符串</p></li><li><p><code>pos</code> <String> 去除那些位置的空格，可选为：<code>both</code>-默认值，去除两端空格，<code>left</code>-去除左边空格，<code>right</code>-去除右边空格，<code>all</code>-去除包括中间和两端的所有空格</p></li></ul><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> trim <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;trim.js&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">trim</span>(<span class="hljs-string">&#x27;abc    b &#x27;</span>, <span class="hljs-string">&#x27;all&#x27;</span>)) <span class="hljs-comment">// 去除所有空格</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">trim</span>(<span class="hljs-string">&#x27; abc &#x27;</span>)) <span class="hljs-comment">// 去除两端空格</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">trim</span>(<span class="hljs-params">str, pos = <span class="hljs-string">&#x27;both&#x27;</span></span>) &#123;<br>  <span class="hljs-keyword">if</span> (pos == <span class="hljs-string">&#x27;both&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\s+|\s+$/g</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pos == <span class="hljs-string">&#x27;left&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\s*/</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pos == <span class="hljs-string">&#x27;right&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(\s*$)/g</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pos == <span class="hljs-string">&#x27;all&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s+/g</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> str<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> trim<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uniApp常用js函数</title>
    <link href="/blog/2020/11/05/uniApp/all/"/>
    <url>/blog/2020/11/05/uniApp/all/</url>
    
    <content type="html"><![CDATA[<h2 id="uniApp-常用-js-函数"><a href="#uniApp-常用-js-函数" class="headerlink" title="uniApp 常用 js 函数"></a>uniApp 常用 js 函数</h2><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// common/all.js</span><br><br><span class="hljs-comment">// 图片路径</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">preview1</span>(<span class="hljs-params">e</span>) &#123;<br>  uni.<span class="hljs-title function_">previewImage</span>(&#123;<br>    <span class="hljs-attr">urls</span>: [e],<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 图片数组，图片路径</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">preview2</span>(<span class="hljs-params">e, q</span>) &#123;<br>  uni.<span class="hljs-title function_">previewImage</span>(&#123;<br>    <span class="hljs-attr">urls</span>: e,<br>    <span class="hljs-attr">current</span>: q,<br>    <span class="hljs-attr">indicator</span>: <span class="hljs-string">&#x27;number&#x27;</span>,<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">previewLB</span>(<span class="hljs-params">e</span>) &#123;<br>  uni.<span class="hljs-title function_">previewImage</span>(&#123;<br>    <span class="hljs-attr">urls</span>: [<span class="hljs-title function_">getApp</span>().<span class="hljs-property">globalData</span>.<span class="hljs-property">baseUrl</span> + e.<span class="hljs-property">image</span>],<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 加载中</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loading</span>(<span class="hljs-params"></span>) &#123;<br>  uni.<span class="hljs-title function_">showLoading</span>(&#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;努力加载中~&#x27;</span>,<br>    <span class="hljs-attr">mask</span>: <span class="hljs-literal">true</span>,<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">img</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">getApp</span>().<span class="hljs-property">globalData</span>.<span class="hljs-property">baseUrl</span> + e<br>&#125;<br><br><span class="hljs-comment">// 隐藏银行卡 19位</span><br><span class="hljs-comment">// replace(/^(\w&#123;3&#125;)\w&#123;4&#125;(.*)$/, &#x27;$1****$2&#x27;  正则修改手机号</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeBank</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>  e = <span class="hljs-string">&#x27;&#x27;</span> + e<br>  <span class="hljs-keyword">var</span> ary = e.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>  ary.<span class="hljs-title function_">splice</span>(<span class="hljs-number">4</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&#x27; **** **** **** &#x27;</span>)<br>  <span class="hljs-keyword">var</span> num = ary.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>  <span class="hljs-keyword">return</span> num<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 13位时间戳转标准时间,如果10位则*1000</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 在main.js中</span><br><span class="hljs-comment"> 配置全局时间格式</span><br><span class="hljs-comment"> import formatTime from &#x27;./plugins/utils/filters&#x27;</span><br><span class="hljs-comment"> Vue.prototype.formatTime=formatTime</span><br><span class="hljs-comment"> 在页面中</span><br><span class="hljs-comment"> console.log(this.formatTime(this.time*1000,&#x27;YYYY-MM-DD hh:mm:ss&#x27;));</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> *  filters.js</span><br><span class="hljs-comment"> * 对Date的扩展，将 Date 转化为指定格式的String  默认是2019-11-25 14:00:00 需要格式则后续传值</span><br><span class="hljs-comment"> * 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，</span><br><span class="hljs-comment"> * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)</span><br><span class="hljs-comment"> * (new Date()).Format(&quot;yyyy-MM-dd hh:mm:ss.S&quot;) ==&gt; 2019-11-25 08:09:04.423</span><br><span class="hljs-comment"> * (new Date()).Format(&quot;yyyy-M-d h:m:s.S&quot;)      ==&gt; 2019-11-25 8:9:4.18</span><br><span class="hljs-comment"> * 使用格式,dom上 &#123;&#123;formatTime(time,&#x27;YYYY-MM-DD&#x27;)&#125;&#125;</span><br><span class="hljs-comment"> * 在script中 this.formatTime(this.time,&quot;hh:mm:ss&quot;)</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-title class_">Date</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">Format</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fmt</span>) &#123;<br>  <span class="hljs-keyword">var</span> o = &#123;<br>    <span class="hljs-string">&#x27;M+&#x27;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>, <span class="hljs-comment">//月份</span><br>    <span class="hljs-string">&#x27;D+&#x27;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getDate</span>(), <span class="hljs-comment">//日</span><br>    <span class="hljs-string">&#x27;h+&#x27;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getHours</span>(), <span class="hljs-comment">//小时</span><br>    <span class="hljs-string">&#x27;m+&#x27;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMinutes</span>(), <span class="hljs-comment">//分</span><br>    <span class="hljs-string">&#x27;s+&#x27;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSeconds</span>(), <span class="hljs-comment">//秒</span><br>    <span class="hljs-string">&#x27;q+&#x27;</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">3</span>) / <span class="hljs-number">3</span>), <span class="hljs-comment">//季度</span><br>    <span class="hljs-attr">S</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMilliseconds</span>(), <span class="hljs-comment">//毫秒</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/(Y+)/</span>.<span class="hljs-title function_">test</span>(fmt)) fmt = fmt.<span class="hljs-title function_">replace</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>, (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getFullYear</span>() + <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">substr</span>(<span class="hljs-number">4</span> - <span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>.<span class="hljs-property">length</span>))<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> o)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;(&#x27;</span> + k + <span class="hljs-string">&#x27;)&#x27;</span>).<span class="hljs-title function_">test</span>(fmt))<br>      fmt = fmt.<span class="hljs-title function_">replace</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>, <span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>.<span class="hljs-property">length</span> == <span class="hljs-number">1</span> ? o[k] : (<span class="hljs-string">&#x27;00&#x27;</span> + o[k]).<span class="hljs-title function_">substr</span>((<span class="hljs-string">&#x27;&#x27;</span> + o[k]).<span class="hljs-property">length</span>))<br>  <span class="hljs-keyword">return</span> fmt<br>&#125;<br><span class="hljs-keyword">const</span> formatTime = <span class="hljs-keyword">function</span> (<span class="hljs-params">times, pattern</span>) &#123;<br>  <span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(times).<span class="hljs-title class_">Format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD hh:mm:ss&#x27;</span>)<br>  <span class="hljs-keyword">if</span> (pattern) &#123;<br>    d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(times).<span class="hljs-title class_">Format</span>(pattern)<br>  &#125;<br>  <span class="hljs-keyword">return</span> d.<span class="hljs-title function_">toLocaleString</span>()<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">num</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">if</span> (e &gt; <span class="hljs-number">9999</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;9999+&#x27;</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> e<br>  &#125;<br>&#125;<br><span class="hljs-comment">// this.$all.toast(&#x27;none&#x27;, &#x27;&#x27;, 2000, false, &#x27;center&#x27;);</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">toast</span>(<span class="hljs-params">icon, text, duration = <span class="hljs-number">1500</span>, mask = <span class="hljs-literal">false</span>, position = <span class="hljs-string">&#x27;bottom&#x27;</span></span>) &#123;<br>  uni.<span class="hljs-title function_">showToast</span>(&#123;<br>    <span class="hljs-attr">icon</span>: icon,<br>    <span class="hljs-attr">title</span>: text,<br>    <span class="hljs-attr">duration</span>: duration,<br>    <span class="hljs-attr">mask</span>: mask,<br>    <span class="hljs-attr">position</span>: position,<br>  &#125;)<br>&#125;<br><span class="hljs-comment">// 秒转时分秒</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeTime</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-built_in">parseInt</span>(value)<br>  <span class="hljs-comment">// 　　let h = Math.floor(result / 3600) &lt; 10 ? &#x27;0&#x27; + Math.floor(result / 3600) : Math.floor(result / 3600)</span><br>  <span class="hljs-keyword">let</span> m = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((result / <span class="hljs-number">60</span>) % <span class="hljs-number">60</span>) &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((result / <span class="hljs-number">60</span>) % <span class="hljs-number">60</span>) : <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((result / <span class="hljs-number">60</span>) % <span class="hljs-number">60</span>)<br>  <span class="hljs-keyword">let</span> s = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(result % <span class="hljs-number">60</span>) &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(result % <span class="hljs-number">60</span>) : <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(result % <span class="hljs-number">60</span>)<br>  <span class="hljs-comment">// 　　result = `$&#123;h&#125;:$&#123;m&#125;:$&#123;s&#125;`</span><br>  result = <span class="hljs-string">`<span class="hljs-subst">$&#123;m&#125;</span>:<span class="hljs-subst">$&#123;s&#125;</span>`</span><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-comment">// 上传单图</span><br><br><span class="hljs-comment">//调用</span><br><span class="hljs-comment">// this.$all.uploadImage(src =&gt; &#123;</span><br><span class="hljs-comment">//  console.log(src) //图片路径</span><br><span class="hljs-comment">// &#125;)</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">uploadImage</span>(<span class="hljs-params">callback</span>) &#123;<br>  uni.<span class="hljs-title function_">chooseImage</span>(&#123;<br>    <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> tempFilePaths = res.<span class="hljs-property">tempFilePaths</span><br>      uni.<span class="hljs-title function_">showLoading</span>(&#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;上传中&#x27;</span>,<br>        <span class="hljs-attr">mask</span>: <span class="hljs-literal">true</span>,<br>      &#125;)<br>      uni.<span class="hljs-title function_">uploadFile</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-title function_">getApp</span>().<span class="hljs-property">globalData</span>.<span class="hljs-property">baseUrl</span> + <span class="hljs-string">&#x27;/api/video.Video/qiniu&#x27;</span>, <span class="hljs-comment">//后台上传图片路径 可改</span><br>        <span class="hljs-attr">filePath</span>: tempFilePaths[<span class="hljs-number">0</span>],<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;file&#x27;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(res.<span class="hljs-property">data</span>))<br>          <span class="hljs-keyword">if</span> (<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(res.<span class="hljs-property">data</span>).<span class="hljs-property">code</span> == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-title function_">callback</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(res.<span class="hljs-property">data</span>).<span class="hljs-property">data</span>.<span class="hljs-property">url</span>) <span class="hljs-comment">//后台上传图片字段 可改</span><br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            uni.<span class="hljs-title function_">showToast</span>(&#123;<br>              <span class="hljs-attr">title</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(res.<span class="hljs-property">data</span>).<span class="hljs-property">msg</span>,<br>              <span class="hljs-attr">mask</span>: <span class="hljs-literal">true</span>,<br>            &#125;)<br>          &#125;<br>        &#125;,<br>        <span class="hljs-attr">complete</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>          uni.<span class="hljs-title function_">hideLoading</span>()<br>        &#125;,<br>      &#125;)<br>    &#125;,<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 上传多图</span><br><br><span class="hljs-comment">//调用</span><br><br><span class="hljs-comment">// this.$all.uploadImage2(imgList =&gt; &#123;</span><br><span class="hljs-comment">//  console.log(imgList)</span><br><span class="hljs-comment">// &#125;)</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">uploadImage2</span>(<span class="hljs-params">success, count = <span class="hljs-number">9</span></span>) &#123;<br>  uni.<span class="hljs-title function_">chooseImage</span>(&#123;<br>    <span class="hljs-attr">count</span>: count,<br>    <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      uni.<span class="hljs-title function_">showLoading</span>(&#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;上传中&#x27;</span>,<br>        <span class="hljs-attr">mask</span>: <span class="hljs-literal">true</span>,<br>      &#125;)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>      <span class="hljs-keyword">if</span> (res.<span class="hljs-property">tempFilePaths</span>.<span class="hljs-property">length</span> &gt; count) &#123;<br>        uni.<span class="hljs-title function_">showToast</span>(&#123;<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">`最多上传<span class="hljs-subst">$&#123;count&#125;</span>张图片`</span>,<br>          <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span>,<br>        &#125;)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">var</span> imgList = []<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k = <span class="hljs-number">0</span>; k &lt; res.<span class="hljs-property">tempFilePaths</span>.<span class="hljs-property">length</span>; k++) &#123;<br>          <span class="hljs-comment">// 上传评价图片</span><br>          uni.<span class="hljs-title function_">uploadFile</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-title function_">getApp</span>().<span class="hljs-property">globalData</span>.<span class="hljs-property">baseUrl</span> + <span class="hljs-string">&#x27;/api/video.Video/qiniu&#x27;</span>, <span class="hljs-comment">//后台上传图片路径 可改</span><br>            <span class="hljs-attr">filePath</span>: res.<span class="hljs-property">tempFilePaths</span>[k],<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;file&#x27;</span>,<br>            <span class="hljs-attr">fileType</span>: <span class="hljs-string">&#x27;image&#x27;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>              uni.<span class="hljs-title function_">hideLoading</span>()<br>              <span class="hljs-keyword">if</span> (<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(res.<span class="hljs-property">data</span>).<span class="hljs-property">code</span> == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;上传成功&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(res.<span class="hljs-property">data</span>))<br>                <span class="hljs-keyword">let</span> url_href = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(res.<span class="hljs-property">data</span>).<span class="hljs-property">data</span>.<span class="hljs-property">url</span> <span class="hljs-comment">//后台上传图片字段 可改</span><br>                imgList.<span class="hljs-title function_">push</span>(url_href)<br>                <span class="hljs-title function_">success</span>(imgList) <span class="hljs-comment">//返回图片数组</span><br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                uni.<span class="hljs-title function_">showToast</span>(&#123;<br>                  <span class="hljs-attr">title</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(res.<span class="hljs-property">data</span>).<span class="hljs-property">msg</span>,<br>                  <span class="hljs-attr">mask</span>: <span class="hljs-literal">true</span>,<br>                &#125;)<br>              &#125;<br>            &#125;,<br>            <span class="hljs-attr">complete</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>              uni.<span class="hljs-title function_">hideLoading</span>()<br>            &#125;,<br>          &#125;)<br>        &#125;<br>      &#125;<br>    &#125;,<br>  &#125;)<br>&#125;<br><span class="hljs-comment">// 字符串转数组</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeList</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">if</span> (e == <span class="hljs-literal">null</span> || e == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> []<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> e.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 切割时间</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">splitTime</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">if</span> (e) &#123;<br>    <span class="hljs-keyword">return</span> e.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断用户输入的内容是否为纯数字</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[0-9]*$/</span><br>  <span class="hljs-keyword">return</span> reg.<span class="hljs-title function_">test</span>(obj)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  validate,<br>  preview1,<br>  preview2,<br>  previewLB,<br>  img,<br>  formatTime,<br>  changeBank,<br>  num,<br>  toast,<br>  changeTime,<br>  changeList,<br>  splitTime,<br>  uploadImage,<br>  uploadImage2,<br>  loading,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><br><span class="hljs-keyword">import</span> all <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./common/all.js&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$all</span> = all<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>uniApp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>utils</tag>
      
      <tag>uniApp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高德地图地理编码与逆编码</title>
    <link href="/blog/2020/11/05/uniApp/amap/"/>
    <url>/blog/2020/11/05/uniApp/amap/</url>
    
    <content type="html"><![CDATA[<h2 id="高德地图地理编码与逆编码"><a href="#高德地图地理编码与逆编码" class="headerlink" title="高德地图地理编码与逆编码"></a>高德地图地理编码与逆编码</h2><ul><li>获取地理位置</li></ul><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">uni.<span class="hljs-title function_">request</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://restapi.amap.com/v3/geocode/regeo&#x27;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;your key&#x27;</span>,<br>    <span class="hljs-attr">location</span>: <span class="hljs-string">&#x27;116.481488,39.990464&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">header</span>: &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><!-- more --><ul><li>获取经纬度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">uni.<span class="hljs-title function_">request</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://restapi.amap.com/v3/geocode/geo&#x27;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;your key&#x27;</span>,<br>    <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;北京市朝阳区阜通东大街6号&#x27;</span>,<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;北京&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">header</span>: &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>uniApp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>utils</tag>
      
      <tag>uniApp</tag>
      
      <tag>地图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uniApp小程序 腾讯地图/百度地图 地理编码与逆编码</title>
    <link href="/blog/2020/11/05/uniApp/bmap/"/>
    <url>/blog/2020/11/05/uniApp/bmap/</url>
    
    <content type="html"><![CDATA[<h2 id="uniApp-小程序-腾讯地图-百度地图-地理编码与逆编码"><a href="#uniApp-小程序-腾讯地图-百度地图-地理编码与逆编码" class="headerlink" title="uniApp 小程序 腾讯地图/百度地图 地理编码与逆编码"></a>uniApp 小程序 腾讯地图/百度地图 地理编码与逆编码</h2><h3 id="腾讯地图"><a href="#腾讯地图" class="headerlink" title="腾讯地图"></a>腾讯地图</h3><ol><li><p>申请开发者密钥（<code>key</code>）：申请密钥</p></li><li><p>开通<code>webserviceAPI</code>服务：控制台 -&gt; <code>key</code>管理 -&gt; 设置（使用该功能的<code>key</code>）-&gt; 勾选<code>webserviceAPI</code> -&gt; 保存</p></li><li><p>(小程序<code>SDK</code>需要用到<code>webserviceAPI</code>的部分服务，所以使用该功能的<code>KEY</code>需要具备相应的权限)</p></li><li><p>下载微信小程序<code>JavaScriptSDK</code>，微信小程序<a href="http://3gimg.qq.com/lightmap/xcx/jssdk/qqmap-wx-jssdk1.2.zip">JavaScriptSDK v1.2</a></p></li><li><p>安全域名设置，在“设置” -&gt; “开发设置”中设置<code>request</code>合法域名，添加<code>https://apis.map.qq.com</code></p></li></ol><ul><li>腾讯地图获取地理位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//// 引入SDK核心类</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">QQMapWX</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@/libs/qqmap-wx-jssdk.min.js&#x27;</span>);<br><span class="hljs-keyword">var</span> qqmapsdk<br><span class="hljs-keyword">var</span> self;<br><br><span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>)&#123;<br> self = <span class="hljs-variable language_">this</span><br> self.<span class="hljs-property">mapCtx</span> = uni.<span class="hljs-title function_">createMapContext</span>(<span class="hljs-string">&#x27;map&#x27;</span>)<br> <span class="hljs-comment">// 实例化API核心类</span><br> qqmapsdk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QQMapWX</span>(&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;your key&#x27;</span><br> &#125;);<br><br> <span class="hljs-comment">//获取地址</span><br> qqmapsdk.<span class="hljs-title function_">reverseGeocoder</span>(&#123;<br>  <span class="hljs-attr">location</span>: &#123;<br>   <span class="hljs-attr">latitude</span>: uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;latitude&#x27;</span>) ,<br>   <span class="hljs-attr">longitude</span>: uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;longitude&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res, data</span>) =&gt;</span> &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, data)<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">location</span> = data.<span class="hljs-property">reverseGeocoderResult</span>.<span class="hljs-property">address_component</span>.<span class="hljs-property">province</span> + data.<span class="hljs-property">reverseGeocoderResult</span>.<span class="hljs-property">address_component</span>.<span class="hljs-property">city</span> +<br>   data.<span class="hljs-property">reverseGeocoderResult</span>.<span class="hljs-property">address_component</span>.<span class="hljs-property">district</span><br>  &#125;<br> &#125;)<br><br><br> <span class="hljs-comment">//获取经纬度</span><br> qqmapsdk.<span class="hljs-title function_">geocoder</span>(&#123;<br>  <span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;北京市海淀区彩和坊路海淀西大街74号&#x27;</span><br>   <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res, data</span>) =&gt;</span> &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, data)<br>  &#125;<br> &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="百度地图"><a href="#百度地图" class="headerlink" title="百度地图"></a>百度地图</h3><ol><li><p>注册百度账号，成为百度地图开发者</p></li><li><p>进入百度开放平台官网，点击右上角“API 控制台”，注册成为百度地图开发者。如果未登录百度账号，会引导登录百度账号。如果账号未注册，请根据提示填写正确的邮箱及手机号完成开发者注册流程</p></li><li><p>创建应用 再次点击进入控制台，创建一个新应用。</p></li><li><p>获取密钥（AK）</p></li></ol><blockquote><p>在创建应用页面，录入应用名称、选择应用类型为”微信小程序”、勾选启用服务、填写<code>AppID</code>(小程序 ID)。点击提交后，即可在查看应用页面看到申请成功的密钥（<code>AK</code>）。</p></blockquote><ol start="5"><li>引入 JS 模块</li></ol><ul><li>在项目根目录下新建一个路径，下载百度地图微信小程序<a href="https://mapopen-website-wiki.cdn.bcebos.com/wechat-api/wxapp-jsapi-master.zip">JavaScript API</a>，</li><li>解压后的文件中有 <code>bmap-wx.js</code> 文件(压缩版 <code>bmap-wx.min.js</code> )，将其拷贝到新建的路径下，安装完成。</li><li>新建路径 “<code>libs</code>“ ,将 <code>bmap-wx.js</code> 文件拷贝至 “<code>libs</code>“ 路径下。</li></ul><ol start="6"><li>安全域名设置，在“设置” -&gt; “开发设置”中设置<code>request</code>合法域名，添加<code>api.map.baidu.com</code></li></ol><ul><li>百度地图获取地理位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入SDK核心类</span><br><span class="hljs-keyword">const</span> bmap = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@/libs/bmap-wx.min.js&#x27;</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">BMap</span>;<br><span class="hljs-keyword">var</span> self;<br><br><span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>)&#123;<br> self = <span class="hljs-variable language_">this</span><br> self.<span class="hljs-property">mapCtx</span> = uni.<span class="hljs-title function_">createMapContext</span>(<span class="hljs-string">&#x27;map&#x27;</span>)<br> <span class="hljs-comment">// 实例化API核心类</span><br> <span class="hljs-title class_">BMap</span> = <span class="hljs-keyword">new</span> bmap.<span class="hljs-title class_">BMapWX</span>(&#123;<br>   <span class="hljs-attr">ak</span>: <span class="hljs-string">&#x27;your key&#x27;</span><br>  &#125;);<br><br> <span class="hljs-comment">//获取地址</span><br>  <span class="hljs-title class_">BMap</span>.<span class="hljs-title function_">regeocoding</span>(&#123;<br>   <span class="hljs-attr">location</span>: uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;longitude&#x27;</span>) + <span class="hljs-string">&#x27;,&#x27;</span> + uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;latitude&#x27;</span>),<br>   <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>   &#125;,<br>   <span class="hljs-attr">fail</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>    uni.<span class="hljs-title function_">showToast</span>(&#123;<br>     <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;请检查位置服务是否开启&#x27;</span>,<br>    &#125;)<br>   &#125;,<br>  &#125;);<br><br><br> <span class="hljs-comment">//获取经纬度</span><br> <span class="hljs-title class_">BMap</span>.<span class="hljs-title function_">geocoding</span>(&#123;<br>  <span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;北京市海淀区彩和坊路海淀西大街74号&#x27;</span><br>   <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res, data</span>) =&gt;</span> &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, data)<br>  &#125;<br> &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>uniApp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>utils</tag>
      
      <tag>uniApp</tag>
      
      <tag>地图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uniapp中前端如何和原生混合开发开发app</title>
    <link href="/blog/2020/11/05/uniApp/hybrid/"/>
    <url>/blog/2020/11/05/uniApp/hybrid/</url>
    
    <content type="html"><![CDATA[<h2 id="uniapp-中前端如何和原生混合开发开发-app"><a href="#uniapp-中前端如何和原生混合开发开发-app" class="headerlink" title="uniapp 中前端如何和原生混合开发开发 app"></a>uniapp 中前端如何和原生混合开发开发 app</h2><div class="note note-success">            <p>项目中遇到了一些类似于直播需要与原生进行混合开发的时候，前端应该怎么做？</p>          </div><a id="more"></a><ol><li>先引入<code>js</code>文件 <code>unfile.js</code></li></ol><p><a href="http://www.cx521.cn/unfile.js">下载<code>unifile.js</code>的链接</a></p><p>或者可以复制以下<code>js</code>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> bridge = &#123;<br>  <span class="hljs-attr">default</span>: <span class="hljs-variable language_">this</span>,<br>  <span class="hljs-attr">call</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">b, a, c</span>) &#123;<br>    <span class="hljs-keyword">var</span> e = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-string">&#x27;function&#x27;</span> == <span class="hljs-keyword">typeof</span> a &amp;&amp; ((c = a), (a = &#123;&#125;))<br>    a = &#123;<br>      <span class="hljs-attr">data</span>: <span class="hljs-keyword">void</span> <span class="hljs-number">0</span> === a ? <span class="hljs-literal">null</span> : a,<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;function&#x27;</span> == <span class="hljs-keyword">typeof</span> c) &#123;<br>      <span class="hljs-keyword">var</span> g = <span class="hljs-string">&#x27;dscb&#x27;</span> + <span class="hljs-variable language_">window</span>.<span class="hljs-property">dscb</span>++<br>      <span class="hljs-variable language_">window</span>[g] = c<br>      a.<span class="hljs-property">_dscbstub</span> = g<br>    &#125;<br>    a = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(a)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">_dsbridge</span>) e = _dsbridge.<span class="hljs-title function_">call</span>(b, a)<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">_dswk</span> || -<span class="hljs-number">1</span> != navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;_dsbridge&#x27;</span>)) e = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;_dsbridge=&#x27;</span> + b, a)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(e || <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>).<span class="hljs-property">data</span><br>  &#125;,<br>  <span class="hljs-attr">register</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">b, a, c</span>) &#123;<br>    c = c ? <span class="hljs-variable language_">window</span>.<span class="hljs-property">_dsaf</span> : <span class="hljs-variable language_">window</span>.<span class="hljs-property">_dsf</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">_dsInit</span> ||<br>      ((<span class="hljs-variable language_">window</span>.<span class="hljs-property">_dsInit</span> = !<span class="hljs-number">0</span>),<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        bridge.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;_dsb.dsinit&#x27;</span>)<br>      &#125;, <span class="hljs-number">0</span>))<br>    <span class="hljs-string">&#x27;object&#x27;</span> == <span class="hljs-keyword">typeof</span> a ? (c.<span class="hljs-property">_obs</span>[b] = a) : (c[b] = a)<br>  &#125;,<br>  <span class="hljs-attr">registerAsyn</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">b, a</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">register</span>(b, a, !<span class="hljs-number">0</span>)<br>  &#125;,<br>  <span class="hljs-attr">hasNativeMethod</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">b, a</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;_dsb.hasNativeMethod&#x27;</span>, &#123;<br>      <span class="hljs-attr">name</span>: b,<br>      <span class="hljs-attr">type</span>: a || <span class="hljs-string">&#x27;all&#x27;</span>,<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-attr">disableJavascriptDialogBlock</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">b</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;_dsb.disableJavascriptDialogBlock&#x27;</span>, &#123;<br>      <span class="hljs-attr">disable</span>: !<span class="hljs-number">1</span> !== b,<br>    &#125;)<br>  &#125;,<br>&#125;<br>!(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">window</span>.<span class="hljs-property">_dsf</span>) &#123;<br>    <span class="hljs-keyword">var</span> b = &#123;<br>        <span class="hljs-attr">_dsf</span>: &#123;<br>          <span class="hljs-attr">_obs</span>: &#123;&#125;,<br>        &#125;,<br>        <span class="hljs-attr">_dsaf</span>: &#123;<br>          <span class="hljs-attr">_obs</span>: &#123;&#125;,<br>        &#125;,<br>        <span class="hljs-attr">dscb</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">dsBridge</span>: bridge,<br>        <span class="hljs-attr">close</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          bridge.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;_dsb.closePage&#x27;</span>)<br>        &#125;,<br>        <span class="hljs-attr">_handleMessageFromNative</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>          <span class="hljs-keyword">var</span> e = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(a.<span class="hljs-property">data</span>),<br>            b = &#123;<br>              <span class="hljs-attr">id</span>: a.<span class="hljs-property">callbackId</span>,<br>              <span class="hljs-attr">complete</span>: !<span class="hljs-number">0</span>,<br>            &#125;,<br>            c = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dsf</span>[a.<span class="hljs-property">method</span>],<br>            d = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dsaf</span>[a.<span class="hljs-property">method</span>],<br>            h = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, c</span>) &#123;<br>              b.<span class="hljs-property">data</span> = a.<span class="hljs-title function_">apply</span>(c, e)<br>              bridge.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;_dsb.returnValue&#x27;</span>, b)<br>            &#125;,<br>            k = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, c</span>) &#123;<br>              e.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a, c</span>) &#123;<br>                b.<span class="hljs-property">data</span> = a<br>                b.<span class="hljs-property">complete</span> = !<span class="hljs-number">1</span> !== c<br>                bridge.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;_dsb.returnValue&#x27;</span>, b)<br>              &#125;)<br>              a.<span class="hljs-title function_">apply</span>(c, e)<br>            &#125;<br>          <span class="hljs-keyword">if</span> (c) <span class="hljs-title function_">h</span>(c, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dsf</span>)<br>          <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d) <span class="hljs-title function_">k</span>(d, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dsaf</span>)<br>          <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((c = a.<span class="hljs-property">method</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)), !(<span class="hljs-number">2</span> &gt; c.<span class="hljs-property">length</span>))) &#123;<br>            a = c.<span class="hljs-title function_">pop</span>()<br>            <span class="hljs-keyword">var</span> c = c.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;.&#x27;</span>),<br>              d = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dsf</span>.<span class="hljs-property">_obs</span>,<br>              d = d[c] || &#123;&#125;,<br>              f = d[a]<br>            f &amp;&amp; <span class="hljs-string">&#x27;function&#x27;</span> == <span class="hljs-keyword">typeof</span> f<br>              ? <span class="hljs-title function_">h</span>(f, d)<br>              : ((d = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dsaf</span>.<span class="hljs-property">_obs</span>), (d = d[c] || &#123;&#125;), (f = d[a]) &amp;&amp; <span class="hljs-string">&#x27;function&#x27;</span> == <span class="hljs-keyword">typeof</span> f &amp;&amp; <span class="hljs-title function_">k</span>(f, d))<br>          &#125;<br>        &#125;,<br>      &#125;,<br>      a<br>    <span class="hljs-keyword">for</span> (a <span class="hljs-keyword">in</span> b) <span class="hljs-variable language_">window</span>[a] = b[a]<br>    bridge.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;_hasJavascriptMethod&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>      b = a.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)<br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> &gt; b.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> !(!_dsf[b] &amp;&amp; !_dsaf[b])<br>      a = b.<span class="hljs-title function_">pop</span>()<br>      b = b.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;.&#x27;</span>)<br>      <span class="hljs-keyword">return</span> (b = _dsf.<span class="hljs-property">_obs</span>[b] || _dsaf.<span class="hljs-property">_obs</span>[b]) &amp;&amp; !!b[a]<br>    &#125;)<br>  &#125;<br>&#125;)()<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = bridge<br></code></pre></td></tr></table></figure><ol start="2"><li><p>放在 common/unfile.js’</p></li><li><p>调用方法，在要使用原生技术的页面进行引入</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> bridge <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/common/unfile.js&#x27;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">//调用的方法名字和回调的方法名字需要与原生相同</span><br>bridge.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;调用的方法名字&#x27;</span>,<span class="hljs-string">&quot;传给原生的参数&quot;</span>)<br><br>bridge.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;回调的方法名字&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span> &#123;<br> <span class="hljs-comment">//原生给返回的数据</span><br>&#125;）<br><br></code></pre></td></tr></table></figure><div class="note note-danger">            <p>注意</p><ol><li>原来是前端打包为<code>apk</code>或者<code>ipa</code>，现在打包为<code>h5</code>手机版让后端上传服务器给<code>ios</code>或者安卓链接，让安卓和<code>ios</code>进行打包</li></ol><p>在 <code>manifest.json</code> 中 <code>h5配置</code>中设置 <strong>路由模式</strong> 和 <strong>运行的基础路径</strong> 例如: <code>hash</code> <code>/h5/</code></p><ol start="2"><li><p>如果使用原生会有一些很多方法不能使用例如：前端写的微信登录，拉起相机，扫描二维码等都需要原生来做</p></li><li><p>所以说尽量前端能做，不要与原生混合开发</p></li></ol>          </div>]]></content>
    
    
    <categories>
      
      <category>uniApp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uniApp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uniApp上传图片阿里云工具类</title>
    <link href="/blog/2020/11/05/uniApp/uni-oss-util/"/>
    <url>/blog/2020/11/05/uniApp/uni-oss-util/</url>
    
    <content type="html"><![CDATA[<h2 id="uniApp-上传图片阿里云工具类"><a href="#uniApp-上传图片阿里云工具类" class="headerlink" title="uniApp 上传图片阿里云工具类"></a>uniApp 上传图片阿里云工具类</h2><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 开始上传，图片版</span><br>  <span class="hljs-attr">uploadImage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">success</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">select_img</span>(<span class="hljs-number">1</span>, success)<br>  &#125;,<br>  <span class="hljs-comment">// 选择文件 （参数：上传类型、上传成功的回调）</span><br>  <span class="hljs-attr">select_img</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">way, success</span>) &#123;<br>    uni.<span class="hljs-title function_">chooseImage</span>(&#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 只能选择一个</span><br>      <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-comment">// 选择成功的回调</span><br>        <span class="hljs-comment">// console.log(res);</span><br>        <span class="hljs-keyword">if</span> (res.<span class="hljs-property">tempFilePaths</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-keyword">let</span> filePath = res.<span class="hljs-property">tempFilePaths</span>[<span class="hljs-number">0</span>] <span class="hljs-comment">// 文件地址</span><br>          <span class="hljs-keyword">let</span> ext = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">// 文件后缀</span><br>          <span class="hljs-comment">// #ifdef H5</span><br>          ext = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get_suffix</span>(res.<span class="hljs-property">tempFiles</span>[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>) <span class="hljs-comment">// h5端这样获取</span><br>          <span class="hljs-comment">// #endif</span><br>          <span class="hljs-comment">// #ifndef H5</span><br>          ext = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get_suffix</span>(res.<span class="hljs-property">tempFiles</span>[<span class="hljs-number">0</span>].<span class="hljs-property">path</span>) <span class="hljs-comment">// 非h5端这样获取</span><br>          <span class="hljs-comment">// #endif</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get_sign</span>(way, filePath, ext, success)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;选择文件失败&#x27;</span>)<br>        &#125;<br>      &#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>),<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-comment">// 获取临时授权签名  （参数：上传类型、文件地址、文件后缀、上传成功的回调）</span><br>  <span class="hljs-attr">get_sign</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">way, filePath, ext, success</span>) &#123;<br>    <span class="hljs-comment">// 1、请求地址</span><br>    <span class="hljs-keyword">var</span> url = <span class="hljs-title function_">getApp</span>().<span class="hljs-property">globalData</span>.<span class="hljs-property">baseUrl</span> + <span class="hljs-string">&#x27;/sp-home/alioss/getSign&#x27;</span> <span class="hljs-comment">// 修改地方一：请求地址</span><br>    <span class="hljs-comment">// 2、从服务器获取oss临时授权签名信息</span><br>    uni.<span class="hljs-title function_">request</span>(&#123;<br>      <span class="hljs-attr">url</span>: url,<br>      <span class="hljs-attr">header</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get_header</span>(),<br>      <span class="hljs-attr">data</span>: &#123; <span class="hljs-attr">way</span>: way, <span class="hljs-attr">ext</span>: ext &#125;,<br>      <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> == <span class="hljs-number">200</span>) &#123;<br>          <span class="hljs-keyword">var</span> sign_obj = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">upload_to_oss</span>(sign_obj, filePath, success)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;错误：&#x27;</span> + res.<span class="hljs-property">data</span>.<span class="hljs-property">msg</span>)<br>        &#125;<br>      &#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>),<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-comment">// 根据签名将文件上传到阿里云 （参数：签名信息、文件地址、上传成功的回调）</span><br>  <span class="hljs-attr">upload_to_oss</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">sign_obj, filePath, success</span>) &#123;<br>    <span class="hljs-comment">// 1、声明FormData对象</span><br>    <span class="hljs-keyword">var</span> formData = &#123;<br>      <span class="hljs-title class_">OSSAccessKeyId</span>: sign_obj.<span class="hljs-property">OSSAccessKeyId</span>, <span class="hljs-comment">//Bucket 拥有者的Access Key Id。</span><br>      <span class="hljs-attr">policy</span>: sign_obj.<span class="hljs-property">policy</span>, <span class="hljs-comment">//policy规定了请求的表单域的合法性</span><br>      <span class="hljs-title class_">Signature</span>: sign_obj.<span class="hljs-property">Signature</span>, <span class="hljs-comment">//根据Access Key Secret和policy计算的签名信息，OSS验证该签名信息从而验证该Post请求的合法性</span><br>      <span class="hljs-attr">key</span>: sign_obj.<span class="hljs-property">key</span>, <span class="hljs-comment">//文件名字，可设置路径</span><br>      <span class="hljs-attr">success_action_status</span>: sign_obj.<span class="hljs-property">success_action_status</span>, <span class="hljs-comment">// 让服务端返回200,不然，默认会返回204</span><br>      <span class="hljs-string">&#x27;x-oss-object-acl&#x27;</span>: sign_obj[<span class="hljs-string">&#x27;x-oss-object-acl&#x27;</span>],<br>    &#125;<br>    uni.<span class="hljs-title function_">showLoading</span>(&#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;上传中&#x27;</span>,<br>      <span class="hljs-attr">mask</span>: <span class="hljs-literal">false</span>,<br>    &#125;)<br>    <span class="hljs-comment">// 2、开始上传</span><br>    uni.<span class="hljs-title function_">uploadFile</span>(&#123;<br>      <span class="hljs-attr">url</span>: sign_obj.<span class="hljs-property">host</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;file&#x27;</span>,<br>      <span class="hljs-attr">filePath</span>: filePath,<br>      <span class="hljs-attr">formData</span>: formData,<br>      <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;上传成功&#x27;</span>)<br>        uni.<span class="hljs-title function_">hideLoading</span>()<br>        <span class="hljs-title function_">success</span>(sign_obj.<span class="hljs-property">file_url</span>)<br>      &#125;,<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-comment">// 根据文件名，返回后缀名</span><br>  <span class="hljs-attr">get_suffix</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">filename</span>) &#123;<br>    <span class="hljs-keyword">var</span> pos = filename.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    <span class="hljs-keyword">let</span> suffix = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> (pos != -<span class="hljs-number">1</span>) &#123;<br>      suffix = filename.<span class="hljs-title function_">substring</span>(pos + <span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> suffix<br>  &#125;,<br>  <span class="hljs-comment">// 获取header信息</span><br>  <span class="hljs-attr">get_header</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 修改地方一：获取token的方式</span><br>    <span class="hljs-keyword">var</span> tokenName = <span class="hljs-string">&#x27;satoken&#x27;</span> <span class="hljs-comment">// 从本地缓存读取tokenName值</span><br>    <span class="hljs-keyword">var</span> tokenValue = uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;satoken&#x27;</span>) <span class="hljs-comment">// 从本地缓存读取tokenValue值</span><br>    <span class="hljs-keyword">var</span> header = &#123;<br>      <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>, <span class="hljs-comment">// 防止后台拿不到参数</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (tokenName != <span class="hljs-literal">undefined</span> &amp;&amp; tokenName != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>      header[tokenName] = tokenValue<br>    &#125;<br>    <span class="hljs-comment">// header[&quot;satoken&quot;] = &quot;0cb3e831-bb77-4b5d-a02f-637fdf5bbdf3&quot;;  // 弄一个假的，方便测试 ，正式环境删掉</span><br>    <span class="hljs-keyword">return</span> header<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>uniApp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>utils</tag>
      
      <tag>uniApp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uniApp全局公共样式</title>
    <link href="/blog/2020/11/05/uniApp/uniapp_scss/"/>
    <url>/blog/2020/11/05/uniApp/uniapp_scss/</url>
    
    <content type="html"><![CDATA[<h2 id="内置的一些类名，方便全局使用"><a href="#内置的一些类名，方便全局使用" class="headerlink" title="内置的一些类名，方便全局使用"></a>内置的一些类名，方便全局使用</h2><a id="more"></a><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  全局公共样式</span><br><span class="hljs-comment">  by fk 2020年11月5日11:27</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-comment">/* background-color: #f6f6f6; */</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;<br>  <span class="hljs-attribute">font-family</span>: Helvetica Neue, Helvetica, sans-serif;<br>&#125;<br><br><span class="hljs-selector-class">.yuan</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>&#125;<br><br>view,<br>scroll-view,<br>swiper,<br><span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-tag">input</span>,<br><span class="hljs-selector-tag">textarea</span>,<br><span class="hljs-selector-tag">label</span>,<br>navigator,<br>image &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-class">.btnhover</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.7</span>;<br>&#125;<br><br><span class="hljs-selector-class">.c-white</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.bg-white</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.c-black</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ty_content-tab</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100vh</span> - <span class="hljs-built_in">var</span>(--status-bar-height));<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-comment">/* background-color: #f6f6f6; */</span><br>&#125;<br><br><span class="hljs-selector-class">.ty_content</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ty_contenthui</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f6f6f6</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ty-hengxiang</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: row;<br>&#125;<br><br><span class="hljs-selector-class">.ty_hengxiangjuzhong</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: row;<br>  -webkit-<span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.ty_hengxiangliangduan</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: row;<br>  -webkit-<span class="hljs-attribute">justify-content</span>: space-between;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><br><span class="hljs-selector-class">.ty_hengxiangjuyou</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: row;<br>  -webkit-<span class="hljs-attribute">justify-content</span>: flex-end;<br>  <span class="hljs-attribute">justify-content</span>: flex-end;<br>&#125;<br><br><span class="hljs-selector-class">.ty-zidongzhanman</span> &#123;<br>  -webkit-<span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ty-hengxianghuanhang</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap;<br>&#125;<br><br><span class="hljs-selector-class">.ty_zidongzhanman</span> &#123;<br>  -webkit-<span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ty_chuizhijuzhong</span> &#123;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.ty_shang</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">750</span>rpx;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">40</span>rpx;<br>&#125;<br><br><span class="hljs-selector-class">.ty_daohanglan</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">750</span>rpx;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">128</span>rpx;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffffff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ty_anniuzi</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">750</span>rpx;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">88</span>rpx;<br><br>  <span class="hljs-attribute">align-items</span>: center;<br>  -webkit-<span class="hljs-attribute">justify-content</span>: space-between;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><br><span class="hljs-selector-class">.ty_biaoti</span> &#123;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">64</span>rpx;<br>  -webkit-<span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">36</span>rpx;<br>  <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">0</span>rpx;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#464646</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ty_yuan</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">150</span>rpx;<br>&#125;<br><br><span class="hljs-selector-class">.ty_mc</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.4</span>);<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">10241</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ty_mc10</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">102411</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ty_back</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">45</span>rpx;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">45</span>rpx;<br>&#125;<br><br><span class="hljs-selector-class">.ty_guding</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1024</span>;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1</span>upx <span class="hljs-number">6</span>upx <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);<br>&#125;<br><br><span class="hljs-selector-class">.ty_beijinghuise</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f1f1f1</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ty_congxiapailie</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column-reverse;<br>&#125;<br><br><span class="hljs-selector-class">.ty_mengceng</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">0.6</span>);<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1111</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">750</span>rpx;<br>&#125;<br><br><span class="hljs-selector-class">.t-s</span> &#123;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">#999</span> <span class="hljs-number">2</span>rpx <span class="hljs-number">2</span>rpx <span class="hljs-number">5</span>rpx;<br>&#125;<br><br><span class="hljs-comment">/* 特殊处理 */</span><br><span class="hljs-selector-class">.ty_shanchuxian</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: line-through;<br>  <span class="hljs-comment">/* 加删除线 */</span><br>&#125;<br><br><span class="hljs-comment">/*========== flex布局相关 ==========*/</span><br><span class="hljs-selector-class">.dp-f</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">display</span>: -webkit-flex;<br>  <span class="hljs-comment">/*在webkit内核的浏览器上使用要加前缀*/</span><br>&#125;<br><br><span class="hljs-comment">/*快捷水平垂直居中*/</span><br><span class="hljs-selector-class">.dp-fc</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">display</span>: -webkit-flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><br><span class="hljs-comment">/*行内块元素*/</span><br><span class="hljs-selector-class">.dp-ib</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-comment">/* 主轴方向 */</span><br><span class="hljs-selector-class">.fd-rr</span> &#123;<br>  <span class="hljs-attribute">flex-direction</span>: row-reverse <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 主轴方向从右到左,默认从左到右 */</span><br>&#125;<br><br><span class="hljs-selector-class">.fd-c</span> &#123;<br>  <span class="hljs-attribute">flex-direction</span>: column <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 主轴方向从上到下,默认从左到右 */</span><br>&#125;<br><br><span class="hljs-selector-class">.fd-cr</span> &#123;<br>  <span class="hljs-attribute">flex-direction</span>: column-reverse <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 主轴方向从下到上,默认从左到右 */</span><br>&#125;<br><br><span class="hljs-comment">/* flex-wrap属性 */</span><br><span class="hljs-selector-class">.fw-w</span> &#123;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 换行，第一行在上方。 */</span><br>&#125;<br><br><span class="hljs-selector-class">.fw-wr</span> &#123;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap-reverse <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 换行，第一行在下方。 */</span><br>&#125;<br><br><span class="hljs-comment">/* justify-content属性 */</span><br><span class="hljs-selector-class">.jc-fs</span> &#123;<br>  <span class="hljs-attribute">justify-content</span>: flex-start <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 在主轴左对齐-默认 */</span><br>&#125;<br><br><span class="hljs-selector-class">.jc-fe</span> &#123;<br>  <span class="hljs-attribute">justify-content</span>: flex-end <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 在主轴右对齐 */</span><br>&#125;<br><br><span class="hljs-selector-class">.jc-c</span> &#123;<br>  <span class="hljs-attribute">justify-content</span>: center <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 在主轴居中对齐 */</span><br>&#125;<br><br><span class="hljs-selector-class">.jc-sb</span> &#123;<br>  <span class="hljs-attribute">justify-content</span>: space-between <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 两端对齐（两边不留空） */</span><br>&#125;<br><br><span class="hljs-selector-class">.jc-sa</span> &#123;<br>  <span class="hljs-attribute">justify-content</span>: space-around <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 等距对齐*/</span><br>&#125;<br><br><span class="hljs-comment">/* align-items属性 */</span><br><span class="hljs-selector-class">.ai-fs</span> &#123;<br>  <span class="hljs-attribute">align-items</span>: flex-start <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ai-fe</span> &#123;<br>  <span class="hljs-attribute">align-items</span>: flex-end <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 底对齐 */</span><br>&#125;<br><br><span class="hljs-selector-class">.ai-c</span> &#123;<br>  <span class="hljs-attribute">align-items</span>: center <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 水平居中 */</span><br>&#125;<br><br><span class="hljs-selector-class">.ai-bl</span> &#123;<br>  <span class="hljs-attribute">align-items</span>: baseline <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 水平居中 */</span><br>&#125;<br><br><span class="hljs-comment">/* align-content属性(多列对齐) */</span><br><br><span class="hljs-selector-class">.ac-fs</span> &#123;<br>  <span class="hljs-attribute">align-content</span>: flex-start <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 与交叉轴的起点对齐 */</span><br>&#125;<br><br><span class="hljs-selector-class">.ac-fe</span> &#123;<br>  <span class="hljs-attribute">align-content</span>: flex-end <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 与交叉轴的终点对齐 */</span><br>&#125;<br><br><span class="hljs-selector-class">.ac-c</span> &#123;<br>  <span class="hljs-attribute">align-content</span>: center <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 与交叉轴的中点对齐。 */</span><br>&#125;<br><br><span class="hljs-selector-class">.ac-sb</span> &#123;<br>  <span class="hljs-attribute">align-content</span>: space-between <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 与交叉轴两端对齐，轴线之间的间隔平均分布。 */</span><br>&#125;<br><br><span class="hljs-selector-class">.ac-sa</span> &#123;<br>  <span class="hljs-attribute">align-content</span>: space-around <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。 */</span><br>&#125;<br><br><span class="hljs-comment">/* align-self属性(默认auto),该属性用于子元素特殊处理 */</span><br><span class="hljs-selector-class">.as-fs</span> &#123;<br>  <span class="hljs-attribute">align-self</span>: flex-start <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 自身在交叉左对齐 */</span><br>&#125;<br><br><span class="hljs-selector-class">.as-fe</span> &#123;<br>  <span class="hljs-attribute">align-self</span>: flex-end <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 自身在交叉右对齐 */</span><br>&#125;<br><br><span class="hljs-selector-class">.as-c</span> &#123;<br>  <span class="hljs-attribute">align-self</span>: center <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 自身在交叉居中对齐 */</span><br>&#125;<br><br><span class="hljs-selector-class">.as-bl</span> &#123;<br>  <span class="hljs-attribute">align-self</span>: baseline <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 自身根据文字对齐 */</span><br>&#125;<br><br><span class="hljs-comment">/* 定位相关 */</span><br><span class="hljs-selector-class">.pt-f</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>&#125;<br><br><span class="hljs-selector-class">.pt-r</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-class">.pt-a</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>&#125;<br><br><span class="hljs-selector-class">.top-0</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.lef-0</span> &#123;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.rig-0</span> &#123;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.bot-0</span> &#123;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.all-0</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 百分比 */</span><br><span class="hljs-selector-class">.w100</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-class">.h100</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-comment">/* 对齐方式 */</span><br><span class="hljs-selector-class">.te-l</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.te-r</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: right;<br>&#125;<br><br><span class="hljs-selector-class">.te-c</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-comment">/* 粗体 */</span><br><span class="hljs-selector-class">.fw-b</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br><br><span class="hljs-selector-class">.fw-l</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: lighter;<br>&#125;<br><br><span class="hljs-selector-class">.fw-n</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: normal;<br>&#125;<br><br><span class="hljs-comment">// 定义flex等分</span><br><span class="hljs-keyword">@for</span> <span class="hljs-variable">$i</span> from <span class="hljs-number">0</span> through <span class="hljs-number">12</span> &#123;<br>  <span class="hljs-selector-class">.f-</span>#&#123;<span class="hljs-variable">$i</span>&#125; &#123;<br>    <span class="hljs-attribute">flex</span>: <span class="hljs-variable">$i</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义字体(rpx)单位，10~100rpx  fs-10 ~ fs-100</span><br><span class="hljs-keyword">@for</span> <span class="hljs-variable">$i</span> from <span class="hljs-number">10</span> through <span class="hljs-number">100</span> &#123;<br>  <span class="hljs-selector-class">.fs-</span>#&#123;<span class="hljs-variable">$i</span>&#125; &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-variable">$i</span> + rpx;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义内外边距，历遍1-100</span><br><span class="hljs-keyword">@for</span> <span class="hljs-variable">$i</span> from <span class="hljs-number">0</span> through <span class="hljs-number">100</span> &#123;<br>  <span class="hljs-comment">// 得出：m-all-30</span><br>  <span class="hljs-selector-class">.m-all-</span>#&#123;<span class="hljs-variable">$i</span>&#125; &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-variable">$i</span> + rpx;<br>  &#125;<br><br>  <span class="hljs-comment">// 得出：p-all-30</span><br>  <span class="hljs-selector-class">.p-all-</span>#&#123;<span class="hljs-variable">$i</span>&#125; &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-variable">$i</span> + rpx;<br>  &#125;<br><br>  <span class="hljs-keyword">@each</span> <span class="hljs-variable">$short</span>, <span class="hljs-variable">$long</span> in l left, t top, r right, b bottom &#123;<br>    <span class="hljs-comment">// 缩写版，结果如： ml-30</span><br>    <span class="hljs-comment">// 定义外边距</span><br>    <span class="hljs-selector-class">.m</span>#&#123;<span class="hljs-variable">$short</span>&#125;-#&#123;<span class="hljs-variable">$i</span>&#125; &#123;<br>      <span class="hljs-attribute">margin</span>-#&#123;<span class="hljs-variable">$long</span>&#125;: <span class="hljs-variable">$i</span> + rpx;<br>    &#125;<br><br>    <span class="hljs-comment">// 定义内边距</span><br>    <span class="hljs-selector-class">.p</span>#&#123;<span class="hljs-variable">$short</span>&#125;-#&#123;<span class="hljs-variable">$i</span>&#125; &#123;<br>      <span class="hljs-attribute">padding</span>-#&#123;<span class="hljs-variable">$long</span>&#125;: <span class="hljs-variable">$i</span> + rpx;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//全局宽高</span><br><span class="hljs-keyword">@for</span> <span class="hljs-variable">$i</span> from <span class="hljs-number">0</span> through <span class="hljs-number">750</span> &#123;<br>  <span class="hljs-comment">// w-0 ~ w-750</span><br>  <span class="hljs-selector-class">.w-</span>#&#123;<span class="hljs-variable">$i</span>&#125; &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-variable">$i</span> + rpx;<br>  &#125;<br>  <span class="hljs-comment">// h-0 ~ h-750</span><br>  <span class="hljs-selector-class">.h-</span>#&#123;<span class="hljs-variable">$i</span>&#125; &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-variable">$i</span> + rpx;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//全局圆角 行高 br-0 ~ br-50  lh0 ~ lh-50</span><br><span class="hljs-keyword">@for</span> <span class="hljs-variable">$i</span> from <span class="hljs-number">0</span> through <span class="hljs-number">50</span> &#123;<br>  <span class="hljs-comment">// w-0 ~ w-750</span><br>  <span class="hljs-selector-class">.br-</span>#&#123;<span class="hljs-variable">$i</span>&#125; &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-variable">$i</span> + rpx;<br>  &#125;<br>  <span class="hljs-comment">// h-0 ~ h-750</span><br>  <span class="hljs-selector-class">.lh-</span>#&#123;<span class="hljs-variable">$i</span>&#125; &#123;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-variable">$i</span> + rpx;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* start--文本行数限制--start */</span><br><span class="hljs-selector-class">.line-1</span> &#123;<br>  <span class="hljs-attribute">white-space</span>: nowrap;<br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">word-break</span>: break-all;<br>&#125;<br><br><span class="hljs-selector-class">.line-2</span> &#123;<br>  -webkit-line-clamp: <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-selector-class">.line-3</span> &#123;<br>  -webkit-line-clamp: <span class="hljs-number">3</span>;<br>&#125;<br><br><span class="hljs-selector-class">.line-4</span> &#123;<br>  -webkit-line-clamp: <span class="hljs-number">4</span>;<br>&#125;<br><br><span class="hljs-selector-class">.line-5</span> &#123;<br>  -webkit-line-clamp: <span class="hljs-number">5</span>;<br>&#125;<br><br><span class="hljs-selector-class">.line-2</span>,<br><span class="hljs-selector-class">.line-3</span>,<br><span class="hljs-selector-class">.line-4</span>,<br><span class="hljs-selector-class">.line-5</span> &#123;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">word-break</span>: break-all;<br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>  <span class="hljs-attribute">display</span>: -webkit-box; <span class="hljs-comment">// 弹性伸缩盒</span><br>  -webkit-box-orient: vertical; <span class="hljs-comment">// 设置伸缩盒子元素排列方式</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>uniApp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>utils</tag>
      
      <tag>uniApp</tag>
      
      <tag>scss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS中数组的常用方法</title>
    <link href="/blog/2020/11/04/JS/array/"/>
    <url>/blog/2020/11/04/JS/array/</url>
    
    <content type="html"><![CDATA[<h1 id="JS-中数组的常用方法"><a href="#JS-中数组的常用方法" class="headerlink" title="JS 中数组的常用方法"></a>JS 中数组的常用方法</h1><h2 id="常规方法"><a href="#常规方法" class="headerlink" title="常规方法"></a>常规方法</h2><h3 id="一、push"><a href="#一、push" class="headerlink" title="一、push()"></a>一、push()</h3><div class="note note-success">            <p><code>push()</code>方法可向数组的末尾添加一个或多个元素，并返回新的数组长度。<strong>会改变原数组</strong>。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">let</span> b = a.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;d&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">//[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b) <span class="hljs-comment">//d</span><br>push方法可以一次添加多个元素 <span class="hljs-comment">//push(&#x27;e&#x27;,&#x27;f&#x27;,...)</span><br></code></pre></td></tr></table></figure><a id="more"></a><h3 id="二、pop"><a href="#二、pop" class="headerlink" title="二、pop()"></a>二、pop()</h3><div class="note note-success">            <p><code>pop()</code>方法用于删除并返回数组的最后一个元素。<strong>会改变原数组</strong>。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">let</span> b = a.<span class="hljs-title function_">pop</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">//[&#x27;a&#x27;,&#x27;b&#x27;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b) <span class="hljs-comment">//c</span><br></code></pre></td></tr></table></figure><h3 id="三、unshift"><a href="#三、unshift" class="headerlink" title="三、unshift()"></a>三、unshift()</h3><div class="note note-success">            <p><code>unshift()</code>方法可向数组的开头添加一个或更多元素，并返回新的数组长度。<strong>改变原数组</strong>。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)) <span class="hljs-comment">//6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[3, 1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h3 id="四、shift"><a href="#四、shift" class="headerlink" title="四、shift()"></a>四、shift()</h3><div class="note note-success">            <p><code>shift()</code>方法用于删除并返回数组的第一个元素。<strong>会改变原数组</strong>。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">shift</span>()) <span class="hljs-comment">//2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[3,4]</span><br></code></pre></td></tr></table></figure><h3 id="五、concat"><a href="#五、concat" class="headerlink" title="五、concat()"></a>五、concat()</h3><div class="note note-success">            <p><code>concat()</code>方法用于连接两个或多个数组。<strong>该方法不会改变现有的数组</strong>，仅会返回一个连接在一起的数组。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">var</span> arr3 = arr1.<span class="hljs-title function_">concat</span>(arr2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1) <span class="hljs-comment">//[1, 2, 3]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr3) <span class="hljs-comment">//[1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><p><strong>ES6 中也可以这么写</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> arr3 = [...arr1, ...arr2]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1) <span class="hljs-comment">//[1, 2, 3]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr3) <span class="hljs-comment">//[1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h3 id="六、join"><a href="#六、join" class="headerlink" title="六、join()"></a>六、join()</h3><div class="note note-success">            <p><code>join()</code>方法用于把数组中的所有元素放入一个字符串。元素通过指定的分隔符进行分隔，默认使用”,”号分割，<strong>不改变原数组</strong>。</p>          </div><p><strong>数组转字符串</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">join</span>()) <span class="hljs-comment">//2,3,4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>)) <span class="hljs-comment">//2-3-4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[2, 3, 4]</span><br></code></pre></td></tr></table></figure><h3 id="七、slice"><a href="#七、slice" class="headerlink" title="七、slice()"></a>七、slice()</h3><div class="note note-success">            <p>截取从<code>start</code> 到 <code>end</code> 下标区间中数组的元素。返回一个新的数组，<strong>该方法不会修改原数组。</strong></p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">//[3,4]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[2,3,4,5]</span><br></code></pre></td></tr></table></figure><h3 id="八、splice"><a href="#八、splice" class="headerlink" title="八、splice()"></a>八、splice()</h3><div class="note note-success">            <p><code>splice()</code>方法可删除从 <code>index</code>(数组下标) 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。如果从数组中删除了元素，则返回的是含有被删除的元素的数组。<strong>此方法会直接对数组进行修改</strong>。</p>          </div><p><strong>删除数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>)) <span class="hljs-comment">//[]    --&gt; 表示从下标为1开始，删除0位</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// [5, 9, 6, 7, 8]</span><br><span class="hljs-keyword">var</span> b = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">//[6, 7] --&gt; 表示从下标为1开始，到下标为2结束，并将删除的内容替换为 3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b) <span class="hljs-comment">//[5, 3, 8]</span><br></code></pre></td></tr></table></figure><h3 id="九、sort-排序"><a href="#九、sort-排序" class="headerlink" title="九、sort 排序"></a>九、sort 排序</h3><div class="note note-success">            <p>按照 <code>Unicode code</code> 位置排序，默认升序</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fruit = [<span class="hljs-string">&#x27;cherries&#x27;</span>, <span class="hljs-string">&#x27;apples&#x27;</span>, <span class="hljs-string">&#x27;bananas&#x27;</span>]<br>fruit.<span class="hljs-title function_">sort</span>() <span class="hljs-comment">// [&#x27;apples&#x27;, &#x27;bananas&#x27;, &#x27;cherries&#x27;]</span><br><br><span class="hljs-keyword">var</span> scores = [<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>]<br>scores.<span class="hljs-title function_">sort</span>() <span class="hljs-comment">// [1, 10, 2, 21]</span><br></code></pre></td></tr></table></figure><p>当不带参数调用 <code>sort()</code>时，数组元素是以<code>ACSII</code>码顺序进行排序（如有必要将临时转化为字符串进行比较）。</p><p>可以传入一个 <code>function</code> ，用来自定义排序方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> nums = [<span class="hljs-number">12</span>, <span class="hljs-number">645</span>, <span class="hljs-number">6</span>, <span class="hljs-number">85</span>, <span class="hljs-number">81</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">365</span>, <span class="hljs-number">4</span>, <span class="hljs-number">752</span>]<br><span class="hljs-keyword">var</span> arr = nums.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a - b<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[0, 4, 6, 9, 12, 81, 85, 365, 645, 752]</span><br></code></pre></td></tr></table></figure><h3 id="十、reverse"><a href="#十、reverse" class="headerlink" title="十、reverse()"></a>十、reverse()</h3><div class="note note-success">            <p><code>reverse</code>() 方法用于颠倒数组中元素的顺序。返回的是颠倒后的数组，<strong>会改变原数组</strong>。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">reverse</span>()) <span class="hljs-comment">//[4, 3, 2]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">//[4, 3, 2]</span><br></code></pre></td></tr></table></figure><h3 id="十一、indexOf-和-lastIndexOf"><a href="#十一、indexOf-和-lastIndexOf" class="headerlink" title="十一、indexOf() 和 lastIndexOf()"></a>十一、indexOf() 和 lastIndexOf()</h3><div class="note note-success">            <p>都接受两个参数：查找的值 、查找起始位置 。 不存在，返回 <code>-1</code> ；存在，返回当前数组下标。<code>indexOf</code> 是从前往后查找， <code>lastIndexOf</code> 是从后往前查找。</p>          </div><p><strong>indexOf()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>]<br>a.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 0</span><br>a.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">7</span>) <span class="hljs-comment">// -1</span><br><br><span class="hljs-keyword">if</span> (a.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">7</span>) === -<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// [2, 9, 9]</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>lastIndexOf()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>]<br>numbers.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 3</span><br>numbers.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">7</span>) <span class="hljs-comment">// -1</span><br>numbers.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// 3</span><br>numbers.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 0</span><br>numbers.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">2</span>, -<span class="hljs-number">2</span>) <span class="hljs-comment">// 0</span><br>numbers.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>) <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h3 id="十二、every"><a href="#十二、every" class="headerlink" title="十二、every()"></a>十二、every()</h3><div class="note note-success">            <p>对数组的每一项都运行指定的函数，如果<strong>每一项</strong>都返回 <code>ture</code>,则返回 <code>true</code>。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isAdult</span>(<span class="hljs-params">element, index, array</span>) &#123;<br>  <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">18</span><br>&#125;<br>;[<span class="hljs-number">22</span>, <span class="hljs-number">25</span>, <span class="hljs-number">28</span>, <span class="hljs-number">34</span>, <span class="hljs-number">46</span>].<span class="hljs-title function_">every</span>(isAdult) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="十三、some"><a href="#十三、some" class="headerlink" title="十三、some()"></a>十三、some()</h3><div class="note note-success">            <p>对数组的每一项都运行指定的函数，如果<strong>任意一项</strong>都返回 <code>ture</code>,则返回 <code>true</code>。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">compare</span>(<span class="hljs-params">element, index, array</span>) &#123;<br>  <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">10</span><br>&#125;<br>;[<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>].<span class="hljs-title function_">some</span>(compare) <span class="hljs-comment">// false</span><br>;[<span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>].<span class="hljs-title function_">some</span>(compare) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="十四、filter"><a href="#十四、filter" class="headerlink" title="十四、filter()"></a>十四、filter()</h3><div class="note note-success">            <p>对数组的每一项都运行给定的函数，返回结果为 <code>ture</code> 的项组成的数组。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ages = [<span class="hljs-number">15</span>, <span class="hljs-number">25</span>, <span class="hljs-number">34</span>, <span class="hljs-number">56</span>, <span class="hljs-number">77</span>, <span class="hljs-number">8</span>, <span class="hljs-number">17</span>]<br><br><span class="hljs-keyword">let</span> adultAge = ages.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">age</span> =&gt;</span> age &gt; <span class="hljs-number">18</span>)<br><br><span class="hljs-comment">// Filtered array adult age is [25, 34, 56, 77]</span><br></code></pre></td></tr></table></figure><h3 id="十五、map"><a href="#十五、map" class="headerlink" title="十五、map()"></a>十五、map()</h3><div class="note note-success">            <p>对数组的每一项都运行指定的函数，返回每次函数调用的结果组成一个新数组。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">let</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>];<br><br><span class="hljs-keyword">let</span> doubles = numbers.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * <span class="hljs-number">2</span>)<br>&#125;)<br><br><span class="hljs-comment">// doubles is now [2, 10, 20, 30]</span><br><span class="hljs-comment">// numbers is still [1, 5, 10, 15]</span><br><br></code></pre></td></tr></table></figure><h3 id="十六、forEach"><a href="#十六、forEach" class="headerlink" title="十六、forEach()"></a>十六、forEach()</h3><div class="note note-success">            <p>循环遍历数组。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> items = [<span class="hljs-string">&#x27;item1&#x27;</span>, <span class="hljs-string">&#x27;item2&#x27;</span>, <span class="hljs-string">&#x27;item3&#x27;</span>]<br><span class="hljs-keyword">const</span> copy = []<br>items.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>  copy.<span class="hljs-title function_">push</span>(item)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(copy) <span class="hljs-comment">// [&#x27;item1&#x27;, &#x27;item2&#x27;, &#x27;item3&#x27;]</span><br></code></pre></td></tr></table></figure><h2 id="ES6-新增方法"><a href="#ES6-新增方法" class="headerlink" title="ES6 新增方法"></a>ES6 新增方法</h2><h3 id="一、find"><a href="#一、find" class="headerlink" title="一、find()"></a>一、find()</h3><div class="note note-success">            <p>传入一个回调函数，找到数组中符合当前搜索规则的第一个元素，返回它，并且终止搜索。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;2&#x27;</span>]<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> <span class="hljs-keyword">typeof</span> n === <span class="hljs-string">&#x27;number&#x27;</span>)) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="二、findIndex"><a href="#二、findIndex" class="headerlink" title="二、findIndex()"></a>二、findIndex()</h3><div class="note note-success">            <p>传入一个回调函数，找到数组中符合当前搜索规则的第一个元素，返回它的下标，并终止搜索。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;2&#x27;</span>]<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> <span class="hljs-keyword">typeof</span> n === <span class="hljs-string">&#x27;number&#x27;</span>)) <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h3 id="三、fill"><a href="#三、fill" class="headerlink" title="三、fill()"></a>三、fill()</h3><div class="note note-success">            <p>用新元素替换掉数组内的元素，可以指定替换下标范围。<code>fill(value, start, end)</code></p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br>arr.<span class="hljs-title function_">fill</span>(<span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// [1, 6, 6, 4, 5] --&gt; 依次替换从下标1到3之间的内容为6</span><br></code></pre></td></tr></table></figure><h3 id="四、copyWithin"><a href="#四、copyWithin" class="headerlink" title="四、copyWithin()"></a>四、copyWithin()</h3><div class="note note-success">            <p>选择数组的某个下标，从该位置开始复制数组元素，默认从<code>0</code>开始复制。也可以指定要复制的元素范围。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">copyWithin</span>(target, start, end)<br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">copyWithin</span>(<span class="hljs-number">3</span>))<br><br><span class="hljs-comment">// [1,2,3,1,2] --&gt; 从下标为3的元素开始，复制数组，所以4, 5被替换成1, 2</span><br><br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1.<span class="hljs-title function_">copyWithin</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>))<br><br><span class="hljs-comment">// [1,2,3,2,3] --&gt; 从下标为3的元素开始，复制数组，指定复制的第一个元素下标为1，所以4, 5被替换成2, 3</span><br><br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2.<span class="hljs-title function_">copyWithin</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><br><span class="hljs-comment">// [1,2,3,2,5] --&gt; 从下标为3的元素开始，复制数组，指定复制的第一个元素下标为1，结束位置为2，所以4被替换成2</span><br></code></pre></td></tr></table></figure><h3 id="五、from"><a href="#五、from" class="headerlink" title="五、from()"></a>五、from()</h3><div class="note note-success">            <p>将类似数组的对象<code>（array-like object）</code>和可遍历（<code>iterable</code>）的对象转为真正的数组</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> bar = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(bar) <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;foo&#x27;</span>) <span class="hljs-comment">// [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="六、of"><a href="#六、of" class="headerlink" title="六、of()"></a>六、of()</h3><div class="note note-success">            <p>用于将一组值，转换为数组。这个方法的主要目的，是弥补数组构造函数 <code>Array()</code> 的不足。因为参数个数的不同，会导致 <code>Array()</code> 的行为有差异。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>() <span class="hljs-comment">// []</span><br><span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">// [, , ,]</span><br><span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>) <span class="hljs-comment">// [3, 11, 8]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">7</span>) <span class="hljs-comment">// [7]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// [1, 2, 3]</span><br><br><span class="hljs-title class_">Array</span>(<span class="hljs-number">7</span>) <span class="hljs-comment">// [ , , , , , , ]</span><br><span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><h3 id="七、entries"><a href="#七、entries" class="headerlink" title="七、entries()"></a>七、entries()</h3><div class="note note-success">            <p>返回迭代器：返回键值对</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//数组</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> arr.<span class="hljs-title function_">entries</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)<br>&#125;<br><span class="hljs-comment">// [0, &#x27;a&#x27;] [1, &#x27;b&#x27;] [2, &#x27;c&#x27;]</span><br><br><span class="hljs-comment">//Set</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>])<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> arr.<span class="hljs-title function_">entries</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)<br>&#125;<br><span class="hljs-comment">// [&#x27;a&#x27;, &#x27;a&#x27;] [&#x27;b&#x27;, &#x27;b&#x27;] [&#x27;c&#x27;, &#x27;c&#x27;]</span><br><br><span class="hljs-comment">//Map</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>arr.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br>arr.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> arr.<span class="hljs-title function_">entries</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)<br>&#125;<br><span class="hljs-comment">// [&#x27;a&#x27;, &#x27;a&#x27;] [&#x27;b&#x27;, &#x27;b&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="八、values"><a href="#八、values" class="headerlink" title="八、values()"></a>八、values()</h3><div class="note note-success">            <p>返回迭代器：返回键值对的<code>value</code></p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//数组</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> arr.<span class="hljs-title function_">values</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)<br>&#125;<br><span class="hljs-comment">//&#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span><br><br><span class="hljs-comment">//Set</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>])<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> arr.<span class="hljs-title function_">values</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)<br>&#125;<br><span class="hljs-comment">// &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span><br><br><span class="hljs-comment">//Map</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>arr.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br>arr.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> arr.<span class="hljs-title function_">values</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)<br>&#125;<br><span class="hljs-comment">// &#x27;a&#x27; &#x27;b&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="九、keys"><a href="#九、keys" class="headerlink" title="九、keys()"></a>九、keys()</h3><div class="note note-success">            <p>返回迭代器：返回键值对的<code>key</code></p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//数组</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> arr.<span class="hljs-title function_">keys</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)<br>&#125;<br><span class="hljs-comment">// 0 1 2</span><br><br><span class="hljs-comment">//Set</span><br><span class="hljs-keyword">const</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>])<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> arr.<span class="hljs-title function_">keys</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)<br>&#125;<br><span class="hljs-comment">// &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span><br><br><span class="hljs-comment">//Map</span><br><span class="hljs-keyword">const</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>arr.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br>arr.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> arr.<span class="hljs-title function_">keys</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)<br>&#125;<br><span class="hljs-comment">// &#x27;a&#x27; &#x27;b&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="十、includes"><a href="#十、includes" class="headerlink" title="十、includes()"></a>十、includes()</h3><div class="note note-success">            <p>判断数组中是否存在该元素，参数：查找的值、起始位置，可以替换 <code>ES5</code> 时代的 <code>indexOf</code> 判断方式。<code>indexOf</code> 判断元素是否为 <code>NaN</code>，会判断错误。</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-title class_">NaN</span>]<br>a.<span class="hljs-title function_">includes</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// true</span><br>a.<span class="hljs-title function_">includes</span>(<span class="hljs-number">4</span>) <span class="hljs-comment">// false</span><br>a.<span class="hljs-title function_">includes</span>(<span class="hljs-title class_">NaN</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS判断字符串中是否存在某个字符</title>
    <link href="/blog/2020/11/04/JS/indexOf/"/>
    <url>/blog/2020/11/04/JS/indexOf/</url>
    
    <content type="html"><![CDATA[<h1 id="JS-判断字符串中是否存在某个字符"><a href="#JS-判断字符串中是否存在某个字符" class="headerlink" title="JS 判断字符串中是否存在某个字符"></a>JS 判断字符串中是否存在某个字符</h1><h2 id="可以用-String-中的-indexOf"><a href="#可以用-String-中的-indexOf" class="headerlink" title="可以用 String 中的 indexOf()"></a>可以用 String 中的 indexOf()</h2><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;abcd&#x27;</span><br><br><span class="hljs-keyword">if</span> (str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;a&#x27;</span>) == -<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-comment">//等于-1表示这个字符串中没有a这个字符</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;不含这个字符&#x27;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;含有这个字符&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>keep-alive基本使用</title>
    <link href="/blog/2020/11/03/vue/keepalive/"/>
    <url>/blog/2020/11/03/vue/keepalive/</url>
    
    <content type="html"><![CDATA[<h2 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h2><p><code>&lt;keep-alive&gt;</code>是 Vue 的内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染 DOM。</p><div class="note note-success">            <p><code>&lt;keep-alive&gt;</code>包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <code>&lt;transition&gt;</code> 相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。</p>          </div><a id="more"></a><p><strong>prop:</strong></p><ul><li>include: 字符串或正则表达式。只有匹配的组件会被缓存。</li><li>exclude: 字符串或正则表达式。任何匹配的组件都不会被缓存。</li></ul><p>常见用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test-keep-alive&#x27;</span>,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">includedComponents</span>: <span class="hljs-string">&#x27;test-keep-alive&#x27;</span>,<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">include</span>=<span class="hljs-string">&quot;test-keep-alive&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 将缓存name为test-keep-alive的组件 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">component</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">include</span>=<span class="hljs-string">&quot;a,b&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 将缓存name为a或者b的组件，结合动态组件使用 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;view&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 使用正则表达式，需使用v-bind --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">:include</span>=<span class="hljs-string">&quot;/a|b/&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;view&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 动态判断 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">:include</span>=<span class="hljs-string">&quot;includedComponents&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">exclude</span>=<span class="hljs-string">&quot;test-keep-alive&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 将不缓存name为test-keep-alive的组件 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">component</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>结合 router，缓存部分页面</strong></p><p>​ 使用$route.meta 的 keepAlive 属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;$route.meta.keepAlive&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!$route.meta.keepAlive&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要在<code>router</code>中设置 router 的元信息 meta：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//...router.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Hello</span>,<br>      <span class="hljs-attr">meta</span>: &#123;<br>        <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 不需要缓存</span><br>      &#125;,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/page1&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Page1&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Page1</span>,<br>      <span class="hljs-attr">meta</span>: &#123;<br>        <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 需要被缓存</span><br>      &#125;,<br>    &#125;,<br>  ],<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h2><p>keep-alive 生命周期钩子函数：activated、deactivated</p><p>使用<code>&lt;keep-alive&gt;</code>会将数据保留在内存中，如果要在每次进入页面的时候获取最新的数据，需要在<code>activated</code>阶段获取数据，承担原来 created 钩子中获取数据的任务。</p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>filter（过滤器）</title>
    <link href="/blog/2020/10/21/vue/filter/"/>
    <url>/blog/2020/10/21/vue/filter/</url>
    
    <content type="html"><![CDATA[<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><blockquote><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：<strong>双花括号插值</strong>和 <strong><code>v-bind</code> 表达式</strong> (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p></blockquote><p>注：过滤器也可以定义多个过滤器，如：<code>&#123;&#123; msg | 过滤器1 | 过滤器2&#125;&#125;</code> 可以多次调用过滤器:步骤是按顺序进行，先把<code>msg</code> 交给第一个过滤器 执行，得到结果，然后交给下一个过滤器执行，返回的最终结果渲染到页面相应的位置</p><h3 id="过滤器定义语法"><a href="#过滤器定义语法" class="headerlink" title="过滤器定义语法"></a>过滤器定义语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(‘过滤器的名称’,<span class="hljs-title function_">fucntion</span>(<span class="hljs-params"></span>)&#123;&#125;)<br>过滤器中的 <span class="hljs-keyword">function</span> ，第一个参数已经规定死了，永远都是 过滤器 管道符前面 传过来的数据<br>例如：<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(‘过滤器名称’,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br><span class="hljs-keyword">return</span> data + “<span class="hljs-number">123</span>”;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="过滤器调用时候的格式"><a href="#过滤器调用时候的格式" class="headerlink" title="过滤器调用时候的格式"></a>过滤器调用时候的格式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 花括号中 --&gt;</span><br>&#123;&#123; message | dataFormat&#125;&#125;<br><br><span class="hljs-comment">&lt;!-- 在v-bind 中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;dataId | formatId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">全局过滤器 <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(‘过滤器名称’,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;)<br><span class="hljs-keyword">function</span> 中第一个参数，必须是过滤器管道符前边的数据，这是 <span class="hljs-title class_">Vue</span> 规定死的，后边也可以跟多参数<br>接下来通过一个例子来了解一下过滤器<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;ctime | dataFilter&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">//在这给 形参 par1=&quot;&quot; 赋空值，也就是在调用过滤器的时候，除了实参赋 &quot;yyyy-mm-dd&quot;以外，其他的都是详细日期输出</span></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&#x27;dataFilter&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">dataStr,par1=<span class="hljs-string">&quot;&quot;</span></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 根据给定的时间字符串，得到特定的时间</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> dt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(dataStr);</span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> y = dt.<span class="hljs-title function_">getFullYear</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 得到的是0月，所以+1</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> m = (dt.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;0&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">//.toString.padStart(最大字符串长度值，&quot;要替补的符号或值&quot;)</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> d = dt.<span class="hljs-title function_">getDate</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;0&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">//如果给的实参字符串是yyyy-mm-dd ，输出年月日，否则输出全日期</span></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span>(par1.<span class="hljs-title function_">toLowerCase</span>() === <span class="hljs-string">&quot;yyyy-mm-dd&quot;</span>)&#123;</span><br><span class="language-javascript">       <span class="hljs-comment">//模板字符串</span></span><br><span class="language-javascript">       <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;y&#125;</span>-<span class="hljs-subst">$&#123;m&#125;</span>-<span class="hljs-subst">$&#123;d&#125;</span>`</span>;</span><br><span class="language-javascript">      &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> hh = dt.<span class="hljs-title function_">getHours</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;0&#x27;</span>);</span><br><span class="language-javascript">           <span class="hljs-keyword">var</span> mm = dt.<span class="hljs-title function_">getMinutes</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;0&#x27;</span>);</span><br><span class="language-javascript">           <span class="hljs-keyword">var</span> ss = dt.<span class="hljs-title function_">getSeconds</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;0&#x27;</span>);</span><br><span class="language-javascript">     <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;y&#125;</span>-<span class="hljs-subst">$&#123;m&#125;</span>-<span class="hljs-subst">$&#123;d&#125;</span> <span class="hljs-subst">$&#123;hh&#125;</span>:<span class="hljs-subst">$&#123;mm&#125;</span>:<span class="hljs-subst">$&#123;ss&#125;</span>`</span>;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">   <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">   <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">   <span class="hljs-attr">ctime</span>:<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">   &#125;,</span><br><span class="language-javascript">   <span class="hljs-attr">methods</span>:&#123;&#125;,</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">定义私有过滤器：过滤器有两个条件【过滤器名称 和 处理函数】<br><span class="hljs-attr">filters</span>:&#123;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>注：过滤器调用的时候，采用的就是就近原则，如果私有过滤器和全局过滤器名称一致了，这时候 优先调用私有过滤器</p>          </div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  //<span class="hljs-comment">&lt;!-- 如果不给实参，形参pattern 永远是undefined代码报错，这里是给空值；第二种方法是给形参:pattern=&#x27;&#x27; --&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;ctime | dataFilter(&quot;&quot;)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">   <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">   <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">ctime</span>:<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">   &#125;,</span><br><span class="language-javascript">   <span class="hljs-attr">methods</span>:&#123;&#125;,</span><br><span class="language-javascript">   <span class="hljs-attr">filters</span>:&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">dataFilter</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">dtime,par</span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> dt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(dtime);</span><br><span class="language-javascript">                  <span class="hljs-keyword">var</span> y = dt.<span class="hljs-title function_">getFullYear</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);</span><br><span class="language-javascript">                  <span class="hljs-keyword">var</span> m = (dt.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);</span><br><span class="language-javascript">                  <span class="hljs-keyword">var</span> d = dt.<span class="hljs-title function_">getDate</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);</span><br><span class="language-javascript">                   <span class="hljs-keyword">if</span> (par.<span class="hljs-title function_">toLowerCase</span>() === <span class="hljs-string">&quot;yyyy-mm--dd&quot;</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;y&#125;</span>-<span class="hljs-subst">$&#123;m&#125;</span>-<span class="hljs-subst">$&#123;d&#125;</span>`</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                     &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                         <span class="hljs-keyword">var</span> hh = dt.<span class="hljs-title function_">getHours</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);</span><br><span class="language-javascript">                         <span class="hljs-keyword">var</span> mm = dt.<span class="hljs-title function_">getMinutes</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);</span><br><span class="language-javascript">                         <span class="hljs-keyword">var</span> ss = dt.<span class="hljs-title function_">getSeconds</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                         <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;y&#125;</span>-<span class="hljs-subst">$&#123;m&#125;</span>-<span class="hljs-subst">$&#123;d&#125;</span> <span class="hljs-subst">$&#123;hh&#125;</span>:<span class="hljs-subst">$&#123;mm&#125;</span>:<span class="hljs-subst">$&#123;ss&#125;</span> ***`</span>;</span><br><span class="language-javascript">                     &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">   &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 里的 computed 和 watch 的区别</title>
    <link href="/blog/2020/10/10/vue/watch/"/>
    <url>/blog/2020/10/10/vue/watch/</url>
    
    <content type="html"><![CDATA[<h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><blockquote><p>computed 是计算属性，它会根据你所依赖的数据动态显示新的计算结果</p></blockquote><p>计算属性将被加入到 Vue 实例中。所有 getter 和 setter 的 this 上下文<strong>自动地绑定为 Vue 实例</strong></p><p>通过计算出来的属性<strong>不需要调用</strong>直接可以在 DOM 里使用</p><h3 id="基础例子"><a href="#基础例子" class="headerlink" title="基础例子"></a>基础例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;div&gt;</span><br><span class="hljs-string">  &lt;p&gt;我是原始值: &quot;&#123;&#123; message &#125;&#125;&quot;&lt;/p&gt;</span><br><span class="hljs-string">  &lt;p&gt;我是计算属性的值: &quot;&#123;&#123; computedMessage&#125;&#125;&quot;&lt;/p&gt; // computed 在 DOM 里直接使用不需要调用</span><br><span class="hljs-string">  &lt;/div&gt;</span><br><span class="hljs-string">  `</span>,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// 计算属性的 getter</span><br>    <span class="hljs-attr">computedMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// `this` 指向 vm 实例</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;,<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>结果：</p><p>我是原始值: “Hello”<br>我是计算属性的值: “olleH”</p><p>如果不使用计算属性，那么 message.split(‘’).reverse().join(‘’) 就会直接写到 template 里，那么在模版中放入太多声明式的逻辑会让模板本身过重，尤其当在页面中使用大量复杂的逻辑表达式处理数据时，<strong>会对页面的可维护性造成很大的影响</strong></p><p><strong>而且计算属性如果依赖不变的话，它就会变成缓存，computed 的值就不会重新计算</strong></p><p>所以，如果数据要通过复杂逻辑来得出结果，那么就推荐使用计算属性</p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><blockquote><p>一个对象，键是 data 对应的数据，值是对应的回调函数。值也可以是方法名，或者包含选项的对象，当 data 的数据发生变化时，就会发生一个回调，他有两个参数，一个 val （修改后的 data 数据），一个 oldVal（原来的 data 数据）<br>Vue 实例将会在实例化时调用<code>$watch()</code>，遍历 watch 对象的每一个属性</p></blockquote><h3 id="基础例子-1"><a href="#基础例子-1" class="headerlink" title="基础例子"></a>基础例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">n</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">obj</span>: &#123;<br>      <span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;div&gt;</span><br><span class="hljs-string">      &lt;button @click=&quot;n += 1&quot;&gt;n+1&lt;/button&gt;</span><br><span class="hljs-string">      &lt;button @click=&quot;obj.a += &#x27;hi&#x27;&quot;&gt;obj.a + &#x27;hi&#x27;&lt;/button&gt;</span><br><span class="hljs-string">      &lt;button @click=&quot;obj = &#123;a:&#x27;a&#x27;&#125;&quot;&gt;obj = 新对象&lt;/button&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  `</span>,<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-title function_">n</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;n 变了&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">obj</span>: &#123;<br>      <span class="hljs-attr">handler</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val, oldVal</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;obj 变了&#x27;</span>)<br>      &#125;,<br>      <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 该属性设定在任何被侦听的对象的 property 改变时都要执行 handler 的回调，不论其被嵌套多深</span><br>    &#125;,<br>    <span class="hljs-string">&#x27;obj.a&#x27;</span>: &#123;<br>      <span class="hljs-attr">handler</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val, oldVal</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;obj.a 变了&#x27;</span>)<br>      &#125;,<br>      <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 该属性设定该回调将会在侦听开始之后被立即调用</span><br>    &#125;,<br>  &#125;,<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>注意：<strong>不应该使用箭头函数来定义 watcher 函数</strong>，因为箭头函数没有 this，它的 this 会继承它的父级函数，但是它的父级函数是 window，导致箭头函数的 this 指向 window，而不是 Vue 实例</p><ul><li><strong>deep 控制是否要看这个对象里面的属性变化</strong></li><li><strong>immediate 控制是否在第一次渲染是执行这个函数</strong></li></ul><p><strong>vm.$watch()</strong> 的用法和 watch 回调类似</p><ul><li>vm.$watch(‘data 属性名’, fn, {deep: .., immediate: ..})</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">vm.$watch(<br>  <span class="hljs-string">&#x27;n&#x27;</span>,<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">val, newVal</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;n 变了&#x27;</span>)<br>  &#125;,<br>  &#123; <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> &#125;<br>)<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>如果一个数据需要经过复杂计算就用 computed</li><li>如果一个数据需要被监听并且对数据做一些操作就用 watch</li></ul>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack 基础知识整理</title>
    <link href="/blog/2020/07/24/webpack/webpack/"/>
    <url>/blog/2020/07/24/webpack/webpack/</url>
    
    <content type="html"><![CDATA[<h2 id="webpack-简介"><a href="#webpack-简介" class="headerlink" title="webpack 简介"></a>webpack 简介</h2><p>webpack 是一个 <strong>模块打包工具</strong>，支持所有的打包语法，比如 <code>ES Module</code>、<code>CommonJS</code>、<code>CMD</code>、<code>AMD</code>。初期的 webpack 是用来模块打包 js 的，发展到现在，已经可以打包很多种文件类型，比如 <code>css</code>、<code>img</code> 。</p><p>优化打包速度最有效的方法就是保持 <code>nodejs</code> 和 <code>webpack</code> 为最新版本。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 <code>webpack</code> 建议根据项目安装而不是全局安装，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install webpack webpack-cli --save-dev<br><br><span class="hljs-comment"># 或</span><br><br>yarn add webpack webpack-cli --dev<br></code></pre></td></tr></table></figure><p>这个时候执行 <code>webpack -v</code> 是查不到版本号的，因为 <code>nodejs</code> 默认是去全局找 <code>webpack</code>，这个时候是找不到的，nodejs 还提供了 <code>npx webpack -v</code> 这个方法。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>如果不生成配置文件，webpack 会按照默认配置去打包，如果我们想自定义配置文件可以在项目根目录添加 <code>webpack.config.js</code> 来自定义配置信息，配置文件的名字也可以自定义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 默认配置或者默认配置文件</span><br>npx webpack<br><br><span class="hljs-comment"># 自定义配置并且修改默认配置名字</span><br>npx webpack --config my-webpack-config.js<br><br><span class="hljs-comment"># npm scripts 中配置 &quot;build&quot;: &quot;webpack&quot;</span><br>npm run build<br></code></pre></td></tr></table></figure><p>一个简单的配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>, <span class="hljs-comment">// production：默认，生产环境，代码被压缩；development：开发环境，代码不压缩</span><br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>entry</code> 可以写成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">entry</span>: &#123;<br>  <span class="hljs-attr">main</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其实，开始安装的 <code>webpack-cli</code> 就是为了在命令行工具中可以正确地执行命令行工具。</p><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p><code>webpack</code> 可以使用 <code>loader</code> 来预处理文件。这允许你打包除 <code>JavaScript</code> 之外的任何静态资源，js 的打包是 webpack 内置的。你可以使用 <code>Node.js</code> 来很简单地编写自己的 <code>loader</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;main.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.jpg$/</span>,<br>        <span class="hljs-attr">use</span>: &#123;<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h3><p>处理文件模块的 webpack loader。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;main.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.jpg$/</span>,<br>        <span class="hljs-attr">use</span>: &#123;<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-comment">// 设置输出文件名</span><br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[name]_[hash].[ext]&#x27;</span>,<br>            <span class="hljs-comment">// 设置输出文件夹</span><br>            <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;images/&#x27;</span>,<br>            <span class="hljs-comment">// 指定目标文件的自定义公共路径</span><br>            <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;assets/&#x27;</span>,<br>          &#125;,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><p><code>file-loader</code> 的增强版，除了上述功能，还可以将文件转换为 <code>base64 URI</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;main.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.jpg$/</span>,<br>        <span class="hljs-attr">use</span>: &#123;<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-comment">// 设置输出文件名</span><br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[name]_[hash].[ext]&#x27;</span>,<br>            <span class="hljs-comment">// 设置需要转换base64的文件大小（太大的文件转换后需要更大的请求压力）</span><br>            <span class="hljs-attr">limit</span>: <span class="hljs-number">2048</span>,<br>          &#125;,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="css-相关"><a href="#css-相关" class="headerlink" title="css 相关"></a>css 相关</h3><h4 id="style-loader-和-css-loader"><a href="#style-loader-和-css-loader" class="headerlink" title="style-loader 和 css-loader"></a>style-loader 和 css-loader</h4><ul><li>css-loader：加入 a.css 中引入了 b.css 和 c.css，css-loader 会将其合并成一个 css 文件</li><li>style-loader：将合并后的 css 文件挂载到 head 标签内</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;main.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/i</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="sass-loader"><a href="#sass-loader" class="headerlink" title="sass-loader"></a>sass-loader</h4><p>如果使用 scss、less、stylus 等 css 预处理器。例如，我们要使用 sass 预处理器，首先要安装 sass-loader 和 node-sass。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;main.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/i</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;sass-loader&#x27;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>::: warning<br>loader 的加载顺序是从右到左、从下到上，所以处理 scss 文件时，将 sass-loader 放在最后。<br>:::</p><h4 id="postcss-loader"><a href="#postcss-loader" class="headerlink" title="postcss-loader"></a>postcss-loader</h4><p>通过 postcss-loader 来给新属性添加厂商前缀。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;main.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.scss$/i</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;sass-loader&#x27;</span>, <span class="hljs-string">&#x27;postcss-loader&#x27;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// postcss.config.js</span><br><span class="hljs-comment">// 首先安装 autoprefixer</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;autoprefixer&#x27;</span>)],<br>&#125;<br></code></pre></td></tr></table></figure><p>如果 a.css 中引入了 b.css 和 c.css，当读到 <code>@import(&#39;./b.css&#39;)</code> 时就会略过 postcss-loader 和 sass-loader，直接从 css-loader 直接运行，可以通过 <code>importLoaders</code> 配置来改善。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;main.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.scss$/i</span>,<br>        <span class="hljs-attr">use</span>: [<br>          <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>          &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>            <span class="hljs-attr">options</span>: &#123;<br>              <span class="hljs-attr">importLoaders</span>: <span class="hljs-number">2</span>,<br>            &#125;,<br>          &#125;,<br>          <span class="hljs-string">&#x27;sass-loader&#x27;</span>,<br>          <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="css-模块化"><a href="#css-模块化" class="headerlink" title="css 模块化"></a>css 模块化</h4><p>在 <code>index.js</code> 通过 import <code>&#39;./index.css&#39;</code> 引入样式会全局有效，如果想在某个模块有效，如何去做呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 模块A</span><br><br><span class="hljs-keyword">import</span> style <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;index.css&#x27;</span><br><br><span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>()<br>img.<span class="hljs-property">src</span> = headImg<br>img.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(style.<span class="hljs-property">avator</span>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;main.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.scss$/i</span>,<br>        <span class="hljs-attr">use</span>: [<br>          <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>          &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>            <span class="hljs-attr">options</span>: &#123;<br>              <span class="hljs-attr">importLoaders</span>: <span class="hljs-number">2</span>,<br>              <span class="hljs-attr">modules</span>: <span class="hljs-literal">true</span>,<br>            &#125;,<br>          &#125;,<br>          <span class="hljs-string">&#x27;sass-loader&#x27;</span>,<br>          <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>字体文件只需要通过 file-loader 将字体文件转移到打包文件夹内即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;main.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(eot|ttf|svg|woff)$/i</span>,<br>        <span class="hljs-attr">use</span>: &#123;<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;fonts/&#x27;</span>,<br>          &#125;,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h2><p>可以在 webpack 运行到某个时刻的时候，做一些事情。</p><h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><p>会在打包之后，自动生成一个 html 文件，并把打包生成的 js 自动引入到这个 html 文件中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;main.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>()],<br>&#125;<br></code></pre></td></tr></table></figure><p>但是我们可能需要在 index.html 中写一些默认代码，比如 meta，这时就可以按照某个模板来生成这个 index.html。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;main.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h3><p>会在打包前先清空打包目标文件夹的文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CleanWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;main.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;src/index.html&#x27;</span>,<br>    &#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>(),<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多个输出文件"><a href="#多个输出文件" class="headerlink" title="多个输出文件"></a>多个输出文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CleanWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">main</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">sub</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们的打包后的文件中，index.html 需要给后台做配置文件，assets 文件夹需要放在 cdn 上，这样的话我们的就需要在 output 中设置 publicPath：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CleanWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">main</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">sub</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;http://cdn.com.cn&#x27;</span>,<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sourceMap"><a href="#sourceMap" class="headerlink" title="sourceMap"></a>sourceMap</h2><p>如果运行打包后的文件，某个地方有错误，控制台会显示打包后的文件的某个位置有错误，如果我们想知道错误来自于源文件的所在位置，那么就需要借助 sourceMap 了。所以 sourceMap 其实就是一种映射，它知道 dist 目录 main.js 文件的某个错误，实际对应的是 src 目录下 index.js 文件的第一行。</p><p>sourceMap 通过配置中的 devtool 去配置，参数的含义大概有以下几种情况：</p><table><thead><tr><th>devtool</th><th>作用</th></tr></thead><tbody><tr><td>source-map</td><td>生成 map 文件，错误精确到行和列</td></tr><tr><td>inline-source-map</td><td>inline，不生成 map 文件，以 base64 形式嵌入 js 中，错误精确到行和列</td></tr><tr><td>cheap-source-map</td><td>cheap，错误只精确到行，且只针对业务代码，不包括第三方模块</td></tr><tr><td>cheap-module-source-map</td><td>cheap-module，错误只精确到行，且只针对业务代码，包括第三方模块</td></tr><tr><td>eval-source-map</td><td>eval，不生成 map 文件，在 js 中以 eval 方法的形式出现，但是复杂项目的提示是不全的</td></tr></tbody></table><p><strong>最佳实践</strong></p><ol><li>develop：cheap-module-eval-source-map，提示比较全，打包速度快</li><li>production：cheap-module-source-map，提示更全面，打包稍微慢</li></ol><h2 id="监听变动"><a href="#监听变动" class="headerlink" title="监听变动"></a>监听变动</h2><h3 id="webpack-–watch"><a href="#webpack-–watch" class="headerlink" title="webpack –watch"></a>webpack –watch</h3><p>监听文件的变动，自动进行打包。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;watch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack --watch&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><p>上面的 html 的打开的方式还是需要通过 <code>file</code> 协议打开一个本地文件，在浏览器地址是这样的：<code>file:///Users/reco/workSpace/git/personal/work/test.html</code>。这样的话发送 <code>AJAX</code> 请求就有问题了，因为发送请求需要 <code>http</code> 或者 <code>https</code> 协议，这时需要的是在本地启动一个服务，我们可以借助 <code>webpack-dev-server</code> （打包时将打包的文件放在内存中，提高打包速度）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add webpack-dev-server --dev<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;watch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack --watch&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack-dev-server&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">main</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">sub</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;http://cdn.com.cn&#x27;</span>,<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-comment">// 默认端口 8080</span><br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-comment">// 本地服务的根目录</span><br>    <span class="hljs-attr">contentBase</span>: <span class="hljs-string">&#x27;./dist&#x27;</span>,<br>    <span class="hljs-comment">// 服务启动后自动打开浏览器</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 端口</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,<br>    <span class="hljs-comment">// 跨域代理</span><br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自己写一个简单的 webpack-dev-server</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node server.js&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// server.js</span><br><br><span class="hljs-keyword">const</span> espress = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> webapck = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>)<br><span class="hljs-keyword">const</span> webpackDevMiddleware = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-dev-middleware&#x27;</span>)<br><span class="hljs-keyword">const</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.config.js&#x27;</span>)<br><span class="hljs-keyword">const</span> complier = <span class="hljs-title function_">webpack</span>(config)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">// publicPath 不设置的话默认 &#x27;/&#x27;</span><br>app.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-title function_">webpackDevMiddleware</span>(complier, &#123;<br>    <span class="hljs-attr">publicPath</span>: config.<span class="hljs-property">output</span>.<span class="hljs-property">publicPath</span>,<br>  &#125;)<br>)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server is running!&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p><strong>缺点：</strong>需要自己手动刷新</p></blockquote><p>上面这种方式就是在 node 中使用 webpack，这是除了在命令行中的使用 <code>webpack</code> 的另一种方式。</p><p><strong>开启 Hot Module Replacement</strong></p><p>解决下面的问题：</p><ol><li> 修改页面某个颜色，页面会刷新，导致动态添加的 dom 会消失；</li><li> 一个页面同时引入两个模块的 js，修改某个模块的 js，页面会刷新，导致灵感一个模块的 js 也会初始化。</li></ol><p>存在的问题：</p><ol><li> 在多页面应用里，html 更改时并不会刷新，需手动，所以这种情况下，可以去掉更更新功能。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-comment">// 1. 开启 HMR</span><br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 只有在开启 HMR 的时候才会监听变动并刷新</span><br>    <span class="hljs-attr">hotOnly</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 2. 插件</span><br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">HotModuleReplacementPlugin</span>()],<br>&#125;<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> counter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./counter&#x27;</span><br><span class="hljs-keyword">import</span> number <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./number&#x27;</span><br><br><span class="hljs-title function_">counter</span>()<br><span class="hljs-title function_">number</span>()<br><br><span class="hljs-comment">// 如果 HMR 生效的话</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>.<span class="hljs-property">hot</span>) &#123;<br>  <span class="hljs-comment">// 监听文件的变动</span><br>  <span class="hljs-variable language_">module</span>.<span class="hljs-property">hot</span>.<span class="hljs-title function_">accept</span>(<span class="hljs-string">&#x27;./number&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 做一些清空操作</span><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-title function_">number</span>()<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>当引用 css 的时候只需要引用，并不需要上面这一坨代码，就是因为 <code>css-loader</code> 已经内置了上面的方法，就像在写 vue、react 代码不需要写上面这坨代码一样，他们的 loader 中也内置了这些方法。只有在使用一些特殊的文件类型才需要。（react 是借助 babel-preset 实现的）</p><blockquote><p>业务开发时，一般不是设置 hotOnly 这样才能试试显示最新代码和更改效果</p></blockquote><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># babel-loader将 webpack 与 babel 建立关联</span><br><span class="hljs-comment"># @babel/core 语法转换</span><br><br>npm install --save-dev babel-loader @babel/core<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [<br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>      <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>    &#125;,<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="语法转换"><a href="#语法转换" class="headerlink" title="语法转换"></a>语法转换</h3><p>这个时候还是不可以转换，还需要这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install @babel/preset-env --save-dev<br></code></pre></td></tr></table></figure><p>然后配置 options</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [<br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>      <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>      <span class="hljs-attr">options</span>: &#123;<br>        <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>],<br>      &#125;,<br>    &#125;,<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="变量、对象转换"><a href="#变量、对象转换" class="headerlink" title="变量、对象转换"></a>变量、对象转换</h3><p>这个时候也只能对一些语法进行转换，比如 “箭头函数”，如果想要对 <code>Promise</code> 这些新的对象进行转换（准确来说，浏览器可能不支持新规范的的一些对象，所以需要单独封装这些方法，然后在全局注入），还需要这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save @babel/polyfill<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在入口文件</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@babel/polyfill&#x27;</span>)<br><br><span class="hljs-comment">// or</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@babel/polyfill&#x27;</span><br></code></pre></td></tr></table></figure><p>这个时候会默认全部转换，这样会增加很多兼容性代码，如果我们想按需引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [<br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>      <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>      <span class="hljs-attr">options</span>: &#123;<br>        <span class="hljs-attr">presets</span>: [<br>          [<br>            <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>,<br>            &#123;<br>              <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&#x27;usage&#x27;</span>,<br>            &#125;,<br>          ],<br>        ],<br>      &#125;,<br>    &#125;,<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>有的同学问：<code>babel-polyfill</code> 这样引用可不可以？答案是可以，但是在使用 <code>useBuiltIns: &#39;usage&#39;</code> 时就不可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在入口配置</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: [<span class="hljs-string">&#x27;@babel-polyfill&#x27;</span>, <span class="hljs-string">&#x27;./app/js&#x27;</span>],<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@babel/preset-env</code> 还可以拥有其他配置参数，比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;presets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;@babel/preset-env&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    targets<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      chrome<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;67&quot;</span><br>    <span class="hljs-punctuation">&#125;</span>，<br>    useBuiltIns<span class="hljs-punctuation">:</span> &#x27;usage&#x27;<br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上面配置的意思是，只需要兼容 chrome 浏览器 67 版本以上就可以了，这样转译时会根据浏览器的兼容性来合理处理转译结果。</p><h3 id="组件库的封装"><a href="#组件库的封装" class="headerlink" title="组件库的封装"></a>组件库的封装</h3><p>如果只是开发业务代码，使用上面 <code>presets</code> + <code>babel-polyfill</code> 的方式就可以了，但是 <code>babel-polyfill</code> 有一个确定就是会将变量全局注入，这里可以使用 <code>transform-runtime</code> 来以闭包（或其他）的形式来进行引入，避免全局环境的污染。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev @babel/plugin-transform-runtime<br><br>npm install --save @babel/runtime<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [<br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>      <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>      <span class="hljs-attr">options</span>: &#123;<br>        <span class="hljs-attr">plugins</span>: [<br>          [<br>            <span class="hljs-string">&#x27;@babel/plugin-transform-runtime&#x27;</span>,<br>            &#123;<br>              <span class="hljs-attr">absoluteRuntime</span>: <span class="hljs-literal">false</span>,<br>              <span class="hljs-attr">corejs</span>: <span class="hljs-number">2</span>,<br>              <span class="hljs-attr">helpers</span>: <span class="hljs-literal">true</span>,<br>              <span class="hljs-attr">regenerator</span>: <span class="hljs-literal">true</span>,<br>              <span class="hljs-attr">useESModules</span>: <span class="hljs-literal">false</span>,<br>            &#125;,<br>          ],<br>        ],<br>      &#125;,<br>    &#125;,<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>将 <code>corejs</code> 的值设置为 2，才会将 <code>map</code> 、<code>promise</code>等方法打包到 <code>main.js</code>，当然还需要引入另一个依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save @babel/runtime-corejs2<br></code></pre></td></tr></table></figure><h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a><code>.babelrc</code></h3><p>如果 babel 的配置过于复杂，内容较多，可以将其单独放在 <code>.babelrc</code> 文件内：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;presets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;@babel/preset-env&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;useBuiltIns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;usage&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="React-打包"><a href="#React-打包" class="headerlink" title="React 打包"></a>React 打包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev @babel/preset-react<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;presets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;@babel/preset-env&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;useBuiltIns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;usage&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;@babel/preset-react&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;pragma&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dom&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// default pragma is React.createElement</span><br>        <span class="hljs-attr">&quot;pragmaFrag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;DomFrag&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// default is React.Fragment</span><br>        <span class="hljs-attr">&quot;throwIfNamespace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span> <span class="hljs-comment">// defaults to true</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h2><blockquote><p>只支持 ES Module，因为 ES Module 是静态引入</p></blockquote><p>作用：模块按需引入，不会将全部代码引用过来</p><h3 id="development"><a href="#development" class="headerlink" title="development"></a>development</h3><p><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>  <span class="hljs-attr">optimization</span>: : &#123;<br>    <span class="hljs-attr">usedExports</span>: ture<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>usedExports</code> 意思就是检查一下哪些模块被使用了再做打包。</p><p><strong>package.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;sideEffects&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>如果引入的一些 <code>css</code> 或依赖不需要 <code>Tree Shaking</code>，那将 <code>sideEffects</code> 设置为 <code>[&quot;./a.css&quot;, &quot;@babel/polyfill&quot;]</code>，如果没有需要配置的，直接设置为 <code>false</code> 即可。</p><h3 id="production"><a href="#production" class="headerlink" title="production"></a>production</h3><p>线上环境是不需要配置 <code>usedExports</code> 的，但是还是需要配置 <code>package.json</code>。</p><h2 id="配置文件整理"><a href="#配置文件整理" class="headerlink" title="配置文件整理"></a>配置文件整理</h2><p>比如在 <code>Vue</code> 官方的脚手架中 <code>webpack</code> 的配置文件都放在 <code>build</code> 文件夹中，如果我们希望对配置文件进行整理的话，需要做一下处理：</p><ol><li><p>将开发环境和线上环境的公共配置提取到 <code>/build/webpack.base.js</code> 中</p></li><li><p>分别在开发环境和线上环境的配置中合并公共配置，配置合并需要使用 <code>webpack-merge</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// /build/webpack.dev.js</span><br><span class="hljs-keyword">const</span> merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>)<br><span class="hljs-keyword">const</span> baseConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.base.js&#x27;</span>)<br><br><span class="hljs-keyword">const</span> devConfig = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">merge</span>(baseConfig, devConfig)<br></code></pre></td></tr></table></figure></li><li><p>修改 <code>package.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;script&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack-dev-server --config ./build/webpack.dev.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack --config ./build/webpack.prod.js&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>这个时候较之前打包输出和清空的目录就应该修改一下了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../dist&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;src/index.html&#x27;</span>,<br>    &#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>([<span class="hljs-string">&#x27;dist&#x27;</span>], &#123;<br>      <span class="hljs-attr">root</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../&#x27;</span>),<br>    &#125;),<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>更新</strong>：上面 <code>CleanWebpackPlugin</code> 的语法是 <code>1.0</code> 版本的。<code>2.0</code> 它所清空的文件夹默认就是打包输出目录，无需再单独指定。</p></li></ol><h2 id="Code-Splitting"><a href="#Code-Splitting" class="headerlink" title="Code Splitting"></a>Code Splitting</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>代码拆分——通过对公用代码的拆分来提升性能。</p><p>本来代码拆分和 <code>webpack</code> 是没关系的，只不过是一种优化手段，比如将公共代码单独打包到一个文件内，业务代码打包到另一个文件内，从而提升加载体验。这里可以运用多入口文件的方式分开打包。</p><h3 id="webpack-实现"><a href="#webpack-实现" class="headerlink" title="webpack 实现"></a>webpack 实现</h3><p><code>webpack4.0</code> 实现代码分割，分两种情况：</p><ol><li>同步代码需要配置 <code>splitChunks</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">optimization</span>: : &#123;<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;all&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>异步代码不需要做任何操作，异步代码比如下面这种情况：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; <span class="hljs-keyword">default</span>: _ &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>    div.<span class="hljs-property">innerHTML</span> = _.<span class="hljs-title function_">join</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>], <span class="hljs-string">&#x27;-&#x27;</span>)<br>    <span class="hljs-keyword">return</span> element<br>  &#125;)<br>&#125;<br><br><span class="hljs-title function_">createElement</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br>  documnet.<span class="hljs-property">body</span>.<span class="hljs-title function_">append</span>(element)<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>这个写法会报错，因为动态来获取依赖的这种方式是试验性语法，目前还不支持，需要借助插件：<code>babel-plugin-dynamic-import-webpack</code></p></blockquote><hr><h3 id="SplitChunksPlugin"><a href="#SplitChunksPlugin" class="headerlink" title="SplitChunksPlugin"></a>SplitChunksPlugin</h3><p><strong>魔法注释</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span> () &#123;<br>  <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;loadsh&#x27; */</span>, <span class="hljs-string">&#x27;lodash&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; <span class="hljs-keyword">default</span>: _ &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>    div.<span class="hljs-property">innerHTML</span> = _.<span class="hljs-title function_">join</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>], <span class="hljs-string">&#x27;-&#x27;</span>)<br>    <span class="hljs-keyword">return</span> element<br>  &#125;)<br>&#125;<br><br><span class="hljs-title function_">createElement</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br>  documnet.<span class="hljs-property">body</span>.<span class="hljs-title function_">append</span>(element)<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>babel-plugin-dynamic-import-webpack</code> 不支持魔法注释，所以要换成 <code>@babel/plugin-syntax-dynamic-import</code>，这个时候会打包生成 <code>vendors~lodash.js</code>，如果需要修改打包后的名字，可以设置 <code>optimization</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;async&quot;</span>, <span class="hljs-comment">// async 异步，initial 同步， all 全部，但是同步还需要配置 cacheGroups，这是重点</span><br>      <span class="hljs-attr">minSize</span>: <span class="hljs-number">30000</span>, <span class="hljs-comment">// 可以处理依赖的最小值</span><br>      <span class="hljs-attr">maxSize</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 可以处理依赖的最大值</span><br>      <span class="hljs-attr">minChunks</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 被引用2次及以上，才会被拆分</span><br>      <span class="hljs-attr">maxAsyncRequests</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">// 最大请求次数，也就是拆分时最多拆分5个包</span><br>      <span class="hljs-attr">maxInitialRequests</span>: <span class="hljs-number">3</span>, <span class="hljs-comment">// 入口最大请求次数，也就是拆分时最多拆分3个包</span><br>      <span class="hljs-attr">automaticNameDelimiter</span>: <span class="hljs-string">&#x27;~&#x27;</span>, <span class="hljs-comment">// 文件生成时名字的连接符</span><br>      <span class="hljs-attr">name</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 拆分块的名称，提供true将根据块和缓存组密钥自动生成名称。</span><br>      <span class="hljs-attr">cacheGroups</span>: &#123;<br>        <span class="hljs-attr">vendors</span>: &#123;<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/]/</span>,<br>          <span class="hljs-attr">priority</span>: -<span class="hljs-number">10</span>, <span class="hljs-comment">// 优先级，数值越大优先级越高，符合多个规则时优先权重高的规则</span><br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;venders.js&quot;</span> <span class="hljs-comment">// 打包时的名字</span><br>        &#125;,<br>        <span class="hljs-comment">// 不在 verdors 内的打包</span><br>        <span class="hljs-attr">default</span>: &#123;<br>          <span class="hljs-attr">minChunks</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-attr">priority</span>: -<span class="hljs-number">20</span>,<br>            <span class="hljs-attr">reuseExistingChunk</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 如果一个模块被打包过了，再次遇到，就不会再打包了，而是会去找之前打包过的那个模块</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Lazy-Loading-amp-Chunk"><a href="#Lazy-Loading-amp-Chunk" class="headerlink" title="Lazy Loading &amp; Chunk"></a>Lazy Loading &amp; Chunk</h2><h3 id="Lazy-Loading"><a href="#Lazy-Loading" class="headerlink" title="Lazy Loading"></a>Lazy Loading</h3><p><code>webpack</code> 可以识别 <code>ECMAScript</code> 的 import 返回的 promise，并进行分割，实现懒加载，但是必须依赖 <code>babel-polyfill</code> 或者 <code>promise-polyfill</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span> () &#123;<br>  <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;loadsh&#x27; */</span>, <span class="hljs-string">&#x27;lodash&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; <span class="hljs-keyword">default</span>: _ &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>    div.<span class="hljs-property">innerHTML</span> = _.<span class="hljs-title function_">join</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>], <span class="hljs-string">&#x27;-&#x27;</span>)<br>    <span class="hljs-keyword">return</span> element<br>  &#125;)<br>&#125;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">createElement</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br>    documnet.<span class="hljs-property">body</span>.<span class="hljs-title function_">append</span>(element)<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>用 <code>ES7</code> 的 <code>async</code> 和 <code>await</code> 函数重构一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span> () &#123;<br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">default</span>: _ &#125; = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;loadsh&#x27; */</span>, <span class="hljs-string">&#x27;lodash&#x27;</span>)<br>  <span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>  div.<span class="hljs-property">innerHTML</span> = _.<span class="hljs-title function_">join</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>], <span class="hljs-string">&#x27;-&#x27;</span>)<br>  <span class="hljs-keyword">return</span> element<br>&#125;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">createElement</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br>    documnet.<span class="hljs-property">body</span>.<span class="hljs-title function_">append</span>(element)<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="Chunk"><a href="#Chunk" class="headerlink" title="Chunk"></a>Chunk</h3><p>像上面的 <code>Lazy Loading</code> 所拆分打包的每一个文件都是一个 <code>Chunk</code>，而前面的配置参数<code>minChunks: 2</code> 的意思就是：当有 2 个以上的 · 使用到某个依赖时，才会对其进行拆分成一个 <code>Chunk</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;http://cdn.com.cn&#x27;</span>,<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].js&#x27;</span>,<br>    <span class="hljs-attr">chunkFilename</span>: <span class="hljs-string">&#x27;[name].chunk.js&#x27;</span>, <span class="hljs-comment">// 打包之后的入口文件之外的js的会在这里过滤一下名字</span><br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="打包分析"><a href="#打包分析" class="headerlink" title="打包分析"></a>打包分析</h2><p><code>http://webpack.js.org/guides/code-splitting/#bundle-analysis</code>，这是官网对打包分析的几个总结，其中最好用的是 <code>webpack-bundle-analyzer</code>。</p><p><strong>webpack 希望我们怎么样写代码呢？</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 原来我们是这么写代码的</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>  element.<span class="hljs-property">innerHTML</span> = <span class="hljs-number">123</span><br>  documnet.<span class="hljs-property">body</span>.<span class="hljs-title function_">append</span>(element)<br>&#125;)<br></code></pre></td></tr></table></figure><p>上面的代码的加载利用率是较低的，因为创建元素实在点击事件触发后才触发的，所以可以分离出去：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 现在我们可以这么写</span><br><br><span class="hljs-comment">// 将生成代码的代码放到另一个文件中去，比如叫 click.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>  element.<span class="hljs-property">innerHTML</span> = <span class="hljs-number">123</span><br>  documnet.<span class="hljs-property">body</span>.<span class="hljs-title function_">append</span>(element)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> createElement<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./click.js&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; <span class="hljs-keyword">default</span>: func &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">func</span>()<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>所以我们现在写代码应该考虑的不是缓存的问题，而是代码的利用率。所以在 <code>chunks</code> 默认设置为 <code>async</code> 而不是 <code>all</code>，是因为，同步的代码只能增加缓存，而对性能提升非常有限。</p><blockquote><p>谷歌浏览器查看网页的利用率：控制台 –&gt; ctrl+shift+p –&gt; coverage</p></blockquote><hr><p>比如点击登录的时候会出现一个模态框，首页的加载并不需要加载模态框的，但是点击登录按钮再加载，模态框的加载是会变慢的，这就需要下面的两个方法了：<code>Preloading</code> 和 <code>Prefetching</code>。</p><h3 id="Prefetching"><a href="#Prefetching" class="headerlink" title="Prefetching"></a>Prefetching</h3><p><strong>非主要业务模块会在主要业务模块加载完之后，空闲时间再去加载。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 现在我们可以这么写</span><br><br><span class="hljs-comment">// 将生成代码的代码放到另一个文件中去，比如叫 click.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>  element.<span class="hljs-property">innerHTML</span> = <span class="hljs-number">123</span><br>  documnet.<span class="hljs-property">body</span>.<span class="hljs-title function_">append</span>(element)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> createElement<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 通过魔法注释来开启 webpackPrefetch</span><br>  <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackPrefetch: true */</span> <span class="hljs-string">&#x27;./click.js&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; <span class="hljs-keyword">default</span>: func &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">func</span>()<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="Preloading"><a href="#Preloading" class="headerlink" title="Preloading"></a>Preloading</h3><p><strong>而这个模式下，非主要业务模块会和主要业务模块一起加载</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 现在我们可以这么写</span><br><br><span class="hljs-comment">// 将生成代码的代码放到另一个文件中去，比如叫 click.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>  element.<span class="hljs-property">innerHTML</span> = <span class="hljs-number">123</span><br>  documnet.<span class="hljs-property">body</span>.<span class="hljs-title function_">append</span>(element)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> createElement<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 通过魔法注释来开启 webpackPreload</span><br>  <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackPreload: true */</span> <span class="hljs-string">&#x27;./click.js&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; <span class="hljs-keyword">default</span>: func &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">func</span>()<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>目前考虑前端的性能优化，不能总是考虑缓存，而是主要考虑代码的使用率。</p><h2 id="CSS-代码分割"><a href="#CSS-代码分割" class="headerlink" title="CSS 代码分割"></a>CSS 代码分割</h2><h3 id="CSS-分割"><a href="#CSS-分割" class="headerlink" title="CSS 分割"></a>CSS 分割</h3><p>不做处理的情况下，<code>webpack</code> 会将 <code>css</code> 打包到 <code>js</code> 中去，如果需要生成单独的 <code>css</code> 文件，可以使用 <code>MiniCssExtractPlugin</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span><br>npm install --save-dev mini-css-extract-plugin<br></code></pre></td></tr></table></figure><p>配置步骤：</p><ol><li>配置 <code>plugins</code>；</li><li>将 <code>style-loader</code> 改为 <code>MiniCssExtractPlugin.loader</code>；</li><li>如果设置了 <code>Tree Shaking</code>，需要将 <code>&quot;sideEffects&quot;: false</code> 改为 <code>&quot;sideEffects&quot;: [&quot;*.css&quot;]</code>。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123;<br>      <span class="hljs-comment">// 设置输出文件的命名规则</span><br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].css&#x27;</span>,<br>      <span class="hljs-attr">chunkFilename</span>: <span class="hljs-string">&#x27;[id].css&#x27;</span>,<br>    &#125;),<br>  ],<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-attr">use</span>: [<br>          &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>,<br>            <span class="hljs-attr">options</span>: &#123;<br>              <span class="hljs-comment">// you can specify a publicPath here</span><br>              <span class="hljs-comment">// by default it uses publicPath in webpackOptions.output</span><br>              <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;../&#x27;</span>,<br>              <span class="hljs-attr">hmr</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;development&#x27;</span>,<br>            &#125;,<br>          &#125;,<br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">usedExports</span>: ture,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;sideEffects&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;*.css&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="CSS-压缩"><a href="#CSS-压缩" class="headerlink" title="CSS 压缩"></a>CSS 压缩</h3><p><code>optimize-css-assets-webpack-plugin</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">OptimizeCSSAssetsPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">minimizer</span>: [<span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimizeCSSAssetsPlugin</span>(&#123;&#125;)],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="合并-CSS"><a href="#合并-CSS" class="headerlink" title="合并 CSS"></a>合并 CSS</h3><p>将多个入口文件的 <code>css</code> 单独放到每个文件中，需要设置 <code>optimization.splitChunks.cacheGroups</code> 为对应的多个分组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">recursiveIssuer</span>(<span class="hljs-params">m</span>) &#123;<br>  <span class="hljs-keyword">if</span> (m.<span class="hljs-property">issuer</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">recursiveIssuer</span>(m.<span class="hljs-property">issuer</span>)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m.<span class="hljs-property">name</span>) &#123;<br>    <span class="hljs-keyword">return</span> m.<span class="hljs-property">name</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">foo</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;src/foo&#x27;</span>),<br>    <span class="hljs-attr">bar</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;src/bar&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-attr">cacheGroups</span>: &#123;<br>        <span class="hljs-attr">fooStyles</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;foo&#x27;</span>,<br>          <span class="hljs-attr">test</span>: <span class="hljs-function">(<span class="hljs-params">m, c, entry = <span class="hljs-string">&#x27;foo&#x27;</span></span>) =&gt;</span> m.<span class="hljs-property">constructor</span>.<span class="hljs-property">name</span> === <span class="hljs-string">&#x27;CssModule&#x27;</span> &amp;&amp; <span class="hljs-title function_">recursiveIssuer</span>(m) === entry,<br>          <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span>,<br>          <span class="hljs-attr">enforce</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>        <span class="hljs-attr">barStyles</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>          <span class="hljs-attr">test</span>: <span class="hljs-function">(<span class="hljs-params">m, c, entry = <span class="hljs-string">&#x27;bar&#x27;</span></span>) =&gt;</span> m.<span class="hljs-property">constructor</span>.<span class="hljs-property">name</span> === <span class="hljs-string">&#x27;CssModule&#x27;</span> &amp;&amp; <span class="hljs-title function_">recursiveIssuer</span>(m) === entry,<br>          <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span>,<br>          <span class="hljs-attr">enforce</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123;<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].css&#x27;</span>,<br>    &#125;),<br>  ],<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><p><code>contenthash</code> 如果内容没有变化，hash 值不会变；如果内容变化，hash 就会变。这样项目重新打包上线后，项目就不会全部重新加载了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;http://cdn.com.cn&#x27;</span>,<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].[contenthash].js&#x27;</span>,<br>    <span class="hljs-attr">chunkFilename</span>: <span class="hljs-string">&#x27;[name].[contenthash].chunk.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>如果 <code>webpack</code> 是老版本，还需要配置一下 <code>runtimeChunk</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">runtimeChunk</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;runtime&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>这是因为：代码有没有变化的逻辑关系被打包到一个叫 <code>manifest</code> 的东西来里，旧版本的 <code>webpack</code> 是会将这个东西直接打包到每个 <code>chunk</code> 文件中，而所以导致每次打包都不一致，这样的话配置好 <code>runtimeChunk</code>之后，所有的<code>manifest</code> 都会提取到名为 <code>runtime</code> 的文件内，所以就不会影响打包了。</p><h2 id="Shimming-垫片"><a href="#Shimming-垫片" class="headerlink" title="Shimming (垫片)"></a>Shimming (垫片)</h2><p><code>babel-polyfill</code> 就是一个全局垫片，<code>babel-plugin-transform-runtime</code> 是一个局部垫片。下面介绍几种垫片：</p><ol><li><p>如果我们在 <code>a.js</code> 引用了一个 <code>utils.js</code> 的里面的方法，而这个方法需要借助 <code>jquery</code>， <code>a.js</code> 引用了<code>jquery</code>，而 <code>utils.js</code> 没有，这时候是会报错的，所以可以借助 <code>webpack.ProvidePlugin</code> 全局 在使用 <code>$</code> 的地方引用 <code>jquery</code>。</p></li><li><p><code>webpack.ProvidePlugin</code> 还有另外一个功能：如果我们想要将 <code>$.each</code> 功能直接这样使用 <code>$each</code>，我们在下面这么来配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> webpack <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;webpack&#x27;</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">ProvidePlugin</span>(&#123;<br>      <span class="hljs-attr">$</span>: <span class="hljs-string">&#x27;jquery&#x27;</span>,<br>      <span class="hljs-attr">$each</span>: [<span class="hljs-string">&#x27;jquery&#x27;</span>, <span class="hljs-string">&#x27;each&#x27;</span>],<br>    &#125;),<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>每个模块的 <code>this</code> 都是指向当前模块的，如果想让每个模块都指向 <code>window</code>，我们需要借助 <code>imports-loader</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-attr">use</span>: [<br>          &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;imports-loader?this=?window&#x27;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.common.js</span><br><br><span class="hljs-keyword">const</span> merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>)<br><span class="hljs-keyword">const</span> devConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.dev.js&#x27;</span>)<br><span class="hljs-keyword">const</span> prodConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.prod.js&#x27;</span>)<br><br><span class="hljs-keyword">const</span> commonConfig = &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function"><span class="hljs-params">env</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (env &amp;&amp; env.<span class="hljs-property">production</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(commonConfig, prodConfig)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(commonConfig, devConfig)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dev-build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack --config ./build/webpack.common.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack-dev-server --config ./build/webpack.common.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack --env.production --config ./build/webpack.common.js&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="区分模式打包"><a href="#区分模式打包" class="headerlink" title="区分模式打包"></a>区分模式打包</h2><p>区别：</p><ol><li>develop 模式下的 sourceMap 是非常全的；</li><li>develop 模式下的代码不需要压缩；</li></ol><h2 id="函数库打包"><a href="#函数库打包" class="headerlink" title="函数库打包"></a>函数库打包</h2><h3 id="指定代码运行范围"><a href="#指定代码运行范围" class="headerlink" title="指定代码运行范围"></a>指定代码运行范围</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;library.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>    <span class="hljs-attr">library</span>: <span class="hljs-string">&#x27;library&#x27;</span>, <span class="hljs-comment">// 通过 script 标签引入，全局注入 library 这个变量</span><br>    <span class="hljs-attr">libraryTarget</span>: <span class="hljs-string">&#x27;umd&#x27;</span>, <span class="hljs-comment">// 模块引入方式 ES Module 和 CommonJS</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p><code>library</code> 和 <code>libraryTarget</code> 两个是配合使用的，<code>library</code> 的意思就是指定暴露的全局变量的名字，但是这个全局变量挂在到哪里呢？这就由 <code>libraryTarget</code> 来指定了。<code>umd</code> 的意思是允许它与 CommonJS，AMD 和全局变量一起使用，除了它还有 <code>this/window/global/amd</code> 等值可以设置。</p><h3 id="略过不需要的依赖"><a href="#略过不需要的依赖" class="headerlink" title="略过不需要的依赖"></a>略过不需要的依赖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;library.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>    <span class="hljs-attr">externals</span>: [<span class="hljs-string">&#x27;lodash&#x27;</span>], <span class="hljs-comment">// 打包时当遇到 lodash 这个依赖就自动忽略</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>比如我的这个函数库依赖 <code>jquery</code>，但是用户也可能引用了 <code>jquery</code>，这样就会多打包一份，所以为了减少代码量，这时就可以通过 <code>externals</code> 来忽略 <code>jquery</code>（<code>externals</code> 支持 <code>Arrary/Object</code>）。</p><h2 id="Progressive-Web-Application"><a href="#Progressive-Web-Application" class="headerlink" title="Progressive Web Application"></a>Progressive Web Application</h2><p>第一次访问成功，第二次访问时如果服务挂掉了，这个时候让项目走缓存，而不是显示服务错误页面。</p><p><code>PWA</code> 的技术原理是 <code>server work</code>，这里可以借助 <code>workbox-webpack-plugin</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">WorkboxPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;workbox-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkboxPlugin</span>.<span class="hljs-title class_">GenerateSW</span>(&#123;<br>      <span class="hljs-attr">clientsClaim</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">skipWaiting</span>: <span class="hljs-literal">true</span>,<br>    &#125;),<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><p>打包之后就产生两个文件：<code>service-work.js</code> 和 <code>precache-manifest.js</code>，下面还需要在入口文件写一下相关配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator) &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    navigator.<span class="hljs-property">serviceWorker</span><br>      .<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;/service-work.js&#x27;</span>)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">registeration</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`service-work registered`</span>)<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`service-work register error`</span>)<br>      &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TypeScript-的打包配置"><a href="#TypeScript-的打包配置" class="headerlink" title="TypeScript 的打包配置"></a>TypeScript 的打包配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install ts-loader -D<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.tsx&#x27;</span>,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.tsx?$/</span>,<br>        <span class="hljs-attr">use</span>: <span class="hljs-string">&#x27;ts-loader&#x27;</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;index.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>还需要创建 <code>tsconfig.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;outDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 打包到那个文件夹内</span><br>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es6&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 使用es6的模块化方式</span><br>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es5&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 打包成 es5 语法</span><br>    <span class="hljs-attr">&quot;allowJs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-comment">// 允许在ts文件里在引入一些js模块</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>如果我们引入了 <code>jquery</code> 这个模块，要想在使用 <code>jquery</code> 语法时让 typescript 有效，还需要引入 <code>@types/jquery</code> 这个依赖（这是 2.0 的做法，1.0 稍有区别），不然会报错：<code>TS2688: Cannot find type definition file for &#39;unist&#39;.</code>。</p><h2 id="WebpackDevServer-请求转发"><a href="#WebpackDevServer-请求转发" class="headerlink" title="WebpackDevServer 请求转发"></a>WebpackDevServer 请求转发</h2><h3 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h3><p><code>WebpackDevServer</code> 的 <code>proxy</code> 是可以直接配置代理的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/react/api&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;https://www.xxx.com&#x27;</span>,<br>        <span class="hljs-attr">secure</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 可以对 https 生效</span><br>        <span class="hljs-attr">pathRewrite</span>: &#123;<br>          <span class="hljs-comment">// 改变接口路由</span><br>          <span class="hljs-string">&#x27;header.json&#x27;</span>: <span class="hljs-string">&#x27;demo.json&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 有些接口为了防止爬虫是不允许改变 origin 的，这里设置为 true 就可以了</span><br>        <span class="hljs-attr">headers</span>: &#123;<br>          <span class="hljs-comment">// 改变请求头</span><br>          <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;www.xxx.com&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="historyApiFallback"><a href="#historyApiFallback" class="headerlink" title="historyApiFallback"></a>historyApiFallback</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">historyApiFallback</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>如果一个项目里在写单页面应用时，某个路由我们没有配置某个路由 A，访问时会显示 <code>can&#39;t get A</code>，这是我们可以配置 <code>historyApiFallback: true</code> 来将没有配置的页面直接转向 <code>index.html</code>，详细用法见 webpack 官网。</p><h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span><br><span class="hljs-comment"># eslint 是命令工具 eslint-loader 是在编译er或启动项目时实时报错</span><br>npm install eslint eslint-loader --save-dev<br><br><span class="hljs-comment"># 初始化 eslint 规范，生成 .eslintrc.js 文件</span><br><span class="hljs-comment"># Aribnb 是一种很变态的规范</span><br>npx eslint init<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node-modules/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;babel-loader&#x27;</span>, <span class="hljs-string">&#x27;eslint-loader&#x27;</span>], <span class="hljs-comment">// 先进行代码检验，再编译</span><br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">overlay</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 如果过程出现错误，会通过蒙层来提示错误</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p><code>eslint-loader</code> 还有许多配置参数可以设置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node-modules/</span>,<br>        <span class="hljs-attr">use</span>: [<br>          &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,<br>            <span class="hljs-attr">options</span>: &#123;<br>              <span class="hljs-attr">fix</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 如果有小的错误，可以直接修复</span><br>              <span class="hljs-attr">cache</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 优化打包速度</span><br>            &#125;,<br>            <span class="hljs-attr">enforce</span>: <span class="hljs-string">&#x27;pre&#x27;</span>, <span class="hljs-comment">// 虽然在 babel-loader 前面，但是可以提前执行(实际测试这个参数放在这里有问题，这里的loader就按照它本该有的循序去排列它，不要使用这个参数去控制了)</span><br>          &#125;,<br>          <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>        ], <span class="hljs-comment">// 先进行代码检验，再编译</span><br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">overlay</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 如果过程出现错误，会通过蒙层来提示错误</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// .eslintrc.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">extends</span>: <span class="hljs-string">&#x27;airbnb&#x27;</span>,<br>  <span class="hljs-attr">parser</span>: <span class="hljs-string">&#x27;babel-eslint&#x27;</span>,<br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-string">&#x27;react/prefer-stateless-function&#x27;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&#x27;react/jsx-filename-extension&#x27;</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-attr">globals</span>: &#123;<br>    <span class="hljs-attr">document</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 解决全局变量出错</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>VSCode 安装 ESLint 插件，实时显示错误。</p></blockquote><p>如果报错 <code>Eslint parsing error: Unexpected token &lt;</code>，可以借助 <a href="https://github.com/BenoitZugmeyer/eslint-plugin-html">eslint-plugin-html</a>来解决。</p><p>:::tip<br>实际项目中为了不影响打包速度，可以不配置 <code>eslint-loader</code>，而是直接通过 git 钩子，在提交命令代码时进行检测，当然这个时候就放弃了实时报错的特性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git 钩子 eslint src<br></code></pre></td></tr></table></figure><p>:::</p><h2 id="提升打包速度"><a href="#提升打包速度" class="headerlink" title="提升打包速度"></a>提升打包速度</h2><ol><li><p>跟上技术的迭代，保持最新（Node/Npm/Yarn）</p></li><li><p>在尽快少的模块上使用 <code>loader</code>，比如通过 <code>include</code> 和 <code>exclude</code> 来指定打包监听范围</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">include</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../src&#x27;</span>),<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-attr">use</span>: [<br>          &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>尽量精简 <code>plugin</code>，并且确保其可靠性</p></li><li><p>合理配置 extensions</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-comment">// 配置太多多引发多次查找，注意精简</span><br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;.jsx&#x27;</span>, <span class="hljs-string">&#x27;.css&#x27;</span>],<br>    <span class="hljs-comment">// 引用如果引用文件时只写到上级目录，会默认引用 index 文件，这样如果没有 index 回去找 child 文件，也不要配置特别多，尽量不使用</span><br>    <span class="hljs-attr">mainFiles</span>: [<span class="hljs-string">&#x27;index&#x27;</span>, <span class="hljs-string">&#x27;child&#x27;</span>]<br>    <span class="hljs-comment">// 配置别名，缩短引用名称</span><br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&quot;@component&quot;</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../src/component&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="Loader-原理"><a href="#Loader-原理" class="headerlink" title="Loader 原理"></a>Loader 原理</h2><h3 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h3><p>创建一个可以将 字符串 <code>reco</code> 替换为 <code>luan</code> 的简单 <code>loader</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 新建一个loader /loaders/replaceLoader.js</span><br><br><span class="hljs-comment">// 这里不可以使用箭头函数</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-keyword">return</span> source.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;reco&#x27;</span>, <span class="hljs-string">&#x27;luan&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">use</span>: [<br>          &#123;<br>            <span class="hljs-attr">loader</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;/loaders/replaceLoader.js&#x27;</span>),<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> loaderUtils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;loader-utils&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-comment">// 参数会被放在 this.query 里面</span><br>  <span class="hljs-keyword">const</span> &#123; name &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span><br><br>  <span class="hljs-comment">// 有的时候 options 可能不是对象而是字符串，我们可以借助 loader-utils</span><br>  <span class="hljs-keyword">const</span> loaderUtils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;loader-utils&#x27;</span>)<br>  <span class="hljs-keyword">const</span> &#123; name &#125; = loaderUtils.<span class="hljs-title function_">getOptions</span>(<span class="hljs-variable language_">this</span>)<br><br>  <span class="hljs-keyword">return</span> source.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;reco&#x27;</span>, name)<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">use</span>: [<br>          &#123;<br>            <span class="hljs-attr">loader</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;/loaders/replaceLoader.js&#x27;</span>),<br>            <span class="hljs-attr">options</span>: &#123;<br>              <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;luan&#x27;</span>,<br>            &#125;,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="丰富反馈内容"><a href="#丰富反馈内容" class="headerlink" title="丰富反馈内容"></a>丰富反馈内容</h3><p>借助 <code>this.callback</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">callback</span>(<br>  <span class="hljs-attr">err</span>: <span class="hljs-title class_">Error</span> | <span class="hljs-literal">null</span>,<br>  <span class="hljs-attr">content</span>: string | <span class="hljs-title class_">Buffer</span>,<br>  sourceMap?: sourceMap,<br>  meta?: any<br>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> loaderUtils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;loader-utils&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; name &#125; = loaderUtils.<span class="hljs-title function_">getOptions</span>(<span class="hljs-variable language_">this</span>)<br>  <span class="hljs-keyword">const</span> result = source.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;reco&#x27;</span>, name)<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, result, sourceMap, meta)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="resolveLoader"><a href="#resolveLoader" class="headerlink" title="resolveLoader"></a>resolveLoader</h3><p>作用是寻找 loader 时可以直接去我们自定义的文件夹内去寻找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">resolveLoader</span>: &#123;<br>    <span class="hljs-attr">modules</span>: [<span class="hljs-string">&#x27;node_modules&#x27;</span>, <span class="hljs-string">&#x27;./loaders&#x27;</span>],<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">use</span>: [<br>          &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;replaceLoader2&#x27;</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">loader</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;/loaders/replaceLoader.js&#x27;</span>),<br>            <span class="hljs-attr">options</span>: &#123;<br>              <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;luan&#x27;</span>,<br>            &#125;,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> loaderUtils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;loader-utils&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; name &#125; = loaderUtils.<span class="hljs-title function_">getOptions</span>(<span class="hljs-variable language_">this</span>)<br>  <span class="hljs-keyword">const</span> callback = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">asunc</span>()<br><br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> result = source.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;reco&#x27;</span>, name)<br>    <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, result)<br>  &#125;, <span class="hljs-number">1000</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> loaderUtils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;loader-utils&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; name &#125; = loaderUtils.<span class="hljs-title function_">getOptions</span>(<span class="hljs-variable language_">this</span>)<br>  <span class="hljs-keyword">const</span> result = source.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;reco&#x27;</span>, name)<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, result, sourceMap, meta)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>loader 还可以做哪些工作呢？比如 给代码添加 try catch，本地化，替换中英文</p></blockquote><h2 id="Plugin-原理"><a href="#Plugin-原理" class="headerlink" title="Plugin 原理"></a>Plugin 原理</h2><h3 id="简单-Plugin"><a href="#简单-Plugin" class="headerlink" title="简单 Plugin"></a>简单 Plugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// /plugins/copyright-webpack-plugin.js</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyrightWebpackPlugin</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(options) <span class="hljs-comment">// &#123; name: &#x27;reco&#x27; &#125;</span><br>  &#125;<br><br>  <span class="hljs-comment">// compiler 是 webapck 的一个实例，存放着配置等所有的东西</span><br>  <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * hooks       是钩子</span><br><span class="hljs-comment">     * emit        将打包好的文件放到输出目录之前（异步钩子）</span><br><span class="hljs-comment">     * compilation 和本次打包相关的东西</span><br><span class="hljs-comment">     */</span><br>    compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">emit</span>.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&#x27;CopyrightWebpackPlugin&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">compilation, cb</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 增加一个 txt 文件</span><br>      compilation.<span class="hljs-property">assets</span>[<span class="hljs-string">&#x27;copyright.txt&#x27;</span>] = &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * source 文本内容</span><br><span class="hljs-comment">         * size   文本字节大小</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-attr">source</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;copyright by reco_luan&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">size</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">22</span><br>        &#125;,<br>      &#125;<br><br>      <span class="hljs-comment">// 必须回调</span><br>      <span class="hljs-title function_">cb</span>()<br>    &#125;)<br><br>    <span class="hljs-comment">// compile 同步钩子，不需要callback</span><br>    compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">compile</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&#x27;CopyrightWebpackPlugin&#x27;</span>, <span class="hljs-function"><span class="hljs-params">compilation</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;同步钩子&#x27;</span>)<br>    &#125;)<br>  &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">CopyrightWebpackPlugin</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// /webpack.config.js</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CopyrightWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;/plugins/copyright-webpack-plugin.js&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyrightWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;reco&#x27;</span>,<br>    &#125;),<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Node-调试"><a href="#Node-调试" class="headerlink" title="Node 调试"></a>Node 调试</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// package.json</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;script&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node --inspect --inspect-brk node_modules/webpack/bin/webpack.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>--inspect</code> 开启 Node 调试</li><li><code>--inspect-brk</code> 在代码第一行添加一个 debug 命令</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyrightWebpackPlugin</span> &#123;<br>  <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>    compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">compile</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&#x27;CopyrightWebpackPlugin&#x27;</span>, <span class="hljs-function"><span class="hljs-params">compilation</span> =&gt;</span> &#123;<br>      <span class="hljs-comment">// 打断点</span><br>      <span class="hljs-keyword">debugger</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;同步钩子&#x27;</span>)<br>    &#125;)<br>  &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">CopyrightWebpackPlugin</span><br></code></pre></td></tr></table></figure><p>打开控制台的 Node 图标，就进入了 Node 调试</p><h2 id="Bundler-源码编写"><a href="#Bundler-源码编写" class="headerlink" title="Bundler 源码编写"></a>Bundler 源码编写</h2><h3 id="入口文件分析"><a href="#入口文件分析" class="headerlink" title="入口文件分析"></a>入口文件分析</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@babel/core&#x27;</span>)<br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@babel/parser&#x27;</span>) <span class="hljs-comment">// 分析抽象语法树</span><br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@babel/traverse&#x27;</span>).<span class="hljs-property">default</span><br><br><span class="hljs-comment">// ************ 入口文件分析 **************</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">moduleAnalyser</span> = filename =&gt; &#123;<br>  <span class="hljs-comment">// 读取文件</span><br>  <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(filename, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>  <span class="hljs-comment">//分析抽象语法树</span><br>  <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(content, &#123;<br>    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&#x27;module&#x27;</span>,<br>  &#125;)<br><br>  <span class="hljs-comment">// 分析依赖</span><br>  <span class="hljs-keyword">let</span> dependencies = &#123;&#125;<br>  <span class="hljs-title function_">traverse</span>(ast, &#123;<br>    <span class="hljs-comment">// 第一个语法是抽象语法树</span><br>    <span class="hljs-title class_">ImportDeclaration</span>(&#123; node &#125;) &#123;<br>      <span class="hljs-comment">// 获取依赖的相对路径</span><br>      <span class="hljs-keyword">const</span> value = node.<span class="hljs-property">source</span>.<span class="hljs-property">value</span><br>      <span class="hljs-keyword">const</span> dirname = path.<span class="hljs-title function_">dirname</span>(filename)<br>      <span class="hljs-keyword">const</span> newFile = <span class="hljs-string">`./<span class="hljs-subst">$&#123;path.join(dirname, value)&#125;</span>`</span><br><br>      <span class="hljs-comment">// key: 将相对路径 value: 绝对路径</span><br>      dependencies[value] = newFile<br>    &#125;,<br>  &#125;)<br><br>  <span class="hljs-comment">// 将 ES6 语法转译为 浏览器可以执行的语法</span><br>  <span class="hljs-keyword">const</span> &#123; code &#125; = babel.<span class="hljs-title function_">transformFromAst</span>(ast, <span class="hljs-literal">null</span>, &#123;<br>    <span class="hljs-comment">// 需要安装 @babel/preset-env</span><br>    <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>],<br>  &#125;)<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * filename     // 入口文件</span><br><span class="hljs-comment">   * dependencies // 依赖关系</span><br><span class="hljs-comment">   * code         // 打包后的代码</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    filename,<br>    dependencies,<br>    code,<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> moduleInfo = <span class="hljs-title function_">moduleAnalyser</span>(<span class="hljs-string">&#x27;./src/index.js&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(moduleInfo)<br></code></pre></td></tr></table></figure><h3 id="依赖图谱"><a href="#依赖图谱" class="headerlink" title="依赖图谱"></a>依赖图谱</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@babel/core&#x27;</span>)<br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@babel/parser&#x27;</span>) <span class="hljs-comment">// 分析抽象语法树</span><br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@babel/traverse&#x27;</span>).<span class="hljs-property">default</span><br><br><span class="hljs-comment">// ************ 入口文件分析 **************</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">moduleAnalyser</span> = filename =&gt; &#123;<br>  <span class="hljs-comment">// 读取文件</span><br>  <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(filename, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>  <span class="hljs-comment">//分析抽象语法树</span><br>  <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(content, &#123;<br>    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&#x27;module&#x27;</span>,<br>  &#125;)<br><br>  <span class="hljs-comment">// 分析依赖</span><br>  <span class="hljs-keyword">let</span> dependencies = &#123;&#125;<br>  <span class="hljs-title function_">traverse</span>(ast, &#123;<br>    <span class="hljs-comment">// 第一个语法是抽象语法树</span><br>    <span class="hljs-title class_">ImportDeclaration</span>(&#123; node &#125;) &#123;<br>      <span class="hljs-comment">// 获取依赖的相对路径</span><br>      <span class="hljs-keyword">const</span> value = node.<span class="hljs-property">source</span>.<span class="hljs-property">value</span><br>      <span class="hljs-keyword">const</span> dirname = path.<span class="hljs-title function_">dirname</span>(filename)<br>      <span class="hljs-keyword">const</span> newFile = <span class="hljs-string">`./<span class="hljs-subst">$&#123;path.join(dirname, value)&#125;</span>`</span><br><br>      <span class="hljs-comment">// key: 将相对路径 value: 绝对路径</span><br>      dependencies[value] = newFile<br>    &#125;,<br>  &#125;)<br><br>  <span class="hljs-comment">// 将 ES6 语法转译为 浏览器可以执行的语法</span><br>  <span class="hljs-keyword">const</span> &#123; code &#125; = babel.<span class="hljs-title function_">transformFromAst</span>(ast, <span class="hljs-literal">null</span>, &#123;<br>    <span class="hljs-comment">// 需要安装 @babel/preset-env</span><br>    <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>],<br>  &#125;)<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * filename     // 入口文件</span><br><span class="hljs-comment">   * dependencies // 依赖关系</span><br><span class="hljs-comment">   * code         // 打包后的代码</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    filename,<br>    dependencies,<br>    code,<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// const moduleInfo = moduleAnalyser(&#x27;./src/index.js&#x27;)</span><br><span class="hljs-comment">// console.log(moduleInfo)</span><br><br><span class="hljs-comment">// ************ 依赖图谱 **************</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">makeDependenciesGraph</span> = entry =&gt; &#123;<br>  <span class="hljs-comment">// 首先在依赖图谱中插入入口文件的分析</span><br>  <span class="hljs-keyword">const</span> entryModule = <span class="hljs-title function_">moduleAnalyser</span>(entry)<br>  <span class="hljs-keyword">const</span> graphArray = [entryModule]<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 循环入口文件的依赖并将其添加到 graphArray 中，因为 graphArray 是动态的，</span><br><span class="hljs-comment">   * graphArray.length 也是动态的，所以可以进入下一轮循环</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; graphArray.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> item = graphArray[i]<br>    <span class="hljs-keyword">const</span> &#123; dependencies &#125; = item<br>    <span class="hljs-keyword">if</span> (dependencies) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j <span class="hljs-keyword">in</span> dependencies) &#123;<br>        graphArray.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">moduleAnalyser</span>(dependencies[j]))<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 依键值对的形式重新组合数据</span><br>  <span class="hljs-keyword">const</span> graph = &#123;&#125;<br>  graphArray.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    graph[item.<span class="hljs-property">filename</span>] = &#123;<br>      <span class="hljs-attr">dependencies</span>: item.<span class="hljs-property">dependencies</span>,<br>      <span class="hljs-attr">code</span>: item.<span class="hljs-property">code</span>,<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> graph<br>&#125;<br><br><span class="hljs-keyword">const</span> graphInfo = <span class="hljs-title function_">makeDependenciesGraph</span>(<span class="hljs-string">&#x27;./src/index.js&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(graphInfo)<br></code></pre></td></tr></table></figure><h3 id="生成可用代码"><a href="#生成可用代码" class="headerlink" title="生成可用代码"></a>生成可用代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@babel/core&#x27;</span>)<br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@babel/parser&#x27;</span>) <span class="hljs-comment">// 分析抽象语法树</span><br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@babel/traverse&#x27;</span>).<span class="hljs-property">default</span><br><br><span class="hljs-comment">// ************ 入口文件分析 **************</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">moduleAnalyser</span> = filename =&gt; &#123;<br>  <span class="hljs-comment">// 读取文件</span><br>  <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(filename, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>  <span class="hljs-comment">//分析抽象语法树</span><br>  <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(content, &#123;<br>    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&#x27;module&#x27;</span>,<br>  &#125;)<br><br>  <span class="hljs-comment">// 分析依赖</span><br>  <span class="hljs-keyword">let</span> dependencies = &#123;&#125;<br>  <span class="hljs-title function_">traverse</span>(ast, &#123;<br>    <span class="hljs-comment">// 第一个语法是抽象语法树</span><br>    <span class="hljs-title class_">ImportDeclaration</span>(&#123; node &#125;) &#123;<br>      <span class="hljs-comment">// 获取依赖的相对路径</span><br>      <span class="hljs-keyword">const</span> value = node.<span class="hljs-property">source</span>.<span class="hljs-property">value</span><br>      <span class="hljs-keyword">const</span> dirname = path.<span class="hljs-title function_">dirname</span>(filename)<br>      <span class="hljs-keyword">const</span> newFile = <span class="hljs-string">`./<span class="hljs-subst">$&#123;path.join(dirname, value)&#125;</span>`</span><br><br>      <span class="hljs-comment">// key: 将相对路径 value: 绝对路径</span><br>      dependencies[value] = newFile<br>    &#125;,<br>  &#125;)<br><br>  <span class="hljs-comment">// 将 ES6 语法转译为 浏览器可以执行的语法</span><br>  <span class="hljs-keyword">const</span> &#123; code &#125; = babel.<span class="hljs-title function_">transformFromAst</span>(ast, <span class="hljs-literal">null</span>, &#123;<br>    <span class="hljs-comment">// 需要安装 @babel/preset-env</span><br>    <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>],<br>  &#125;)<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * filename     // 入口文件</span><br><span class="hljs-comment">   * dependencies // 依赖关系</span><br><span class="hljs-comment">   * code         // 打包后的代码</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    filename,<br>    dependencies,<br>    code,<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// const moduleInfo = moduleAnalyser(&#x27;./src/index.js&#x27;)</span><br><span class="hljs-comment">// console.log(moduleInfo)</span><br><br><span class="hljs-comment">// ************ 依赖图谱 *****************</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">makeDependenciesGraph</span> = entry =&gt; &#123;<br>  <span class="hljs-comment">// 首先在依赖图谱中插入入口文件的分析</span><br>  <span class="hljs-keyword">const</span> entryModule = <span class="hljs-title function_">moduleAnalyser</span>(entry)<br>  <span class="hljs-keyword">const</span> graphArray = [entryModule]<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 循环入口文件的依赖并将其添加到 graphArray 中，因为 graphArray 是动态的，</span><br><span class="hljs-comment">   * graphArray.length 也是动态的，所以可以进入下一轮循环</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; graphArray.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> item = graphArray[i]<br>    <span class="hljs-keyword">const</span> &#123; dependencies &#125; = item<br>    <span class="hljs-keyword">if</span> (dependencies) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j <span class="hljs-keyword">in</span> dependencies) &#123;<br>        graphArray.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">moduleAnalyser</span>(dependencies[j]))<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 依键值对的形式重新组合数据</span><br>  <span class="hljs-keyword">const</span> graph = &#123;&#125;<br>  graphArray.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    graph[item.<span class="hljs-property">filename</span>] = &#123;<br>      <span class="hljs-attr">dependencies</span>: item.<span class="hljs-property">dependencies</span>,<br>      <span class="hljs-attr">code</span>: item.<span class="hljs-property">code</span>,<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> graph<br>&#125;<br><br><span class="hljs-comment">// const graphInfo = makeDependenciesGraph(&#x27;./src/index.js&#x27;)</span><br><span class="hljs-comment">// console.log(graphInfo)</span><br><br><span class="hljs-comment">// ************ 生成代码 *****************</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">generateCode</span> = entry =&gt; &#123;<br>  <span class="hljs-comment">// 依赖树是一个对象，需要解析成字符串</span><br>  <span class="hljs-keyword">const</span> graph = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-title function_">makeDependenciesGraph</span>(entry))<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 依赖树每个模块对应的代码都需要 require/modules 对象，所以需要自己来构建</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">    (function (graph) &#123;</span><br><span class="hljs-string">      function require (module) &#123;</span><br><span class="hljs-string">        // require 需要引用相对路径，所以创建 localRequire</span><br><span class="hljs-string">        function localRequire (relativePath) &#123;</span><br><span class="hljs-string">          return require(graph[module].dependencies[relativePath])</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        // 没有 exports 对象，需要手动创建</span><br><span class="hljs-string">        // 切记，这里的 分号 是必须有的</span><br><span class="hljs-string">        var exports = &#123;&#125;;</span><br><span class="hljs-string">        (function (require, exports, code) &#123;</span><br><span class="hljs-string">          // 执行代码</span><br><span class="hljs-string">          eval(code)</span><br><span class="hljs-string">        &#125;)(localRequire, exports, graph[module].code)</span><br><span class="hljs-string"></span><br><span class="hljs-string">        // 导出后别的依赖，才能进行引用</span><br><span class="hljs-string">        return exports</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">      require(&#x27;<span class="hljs-subst">$&#123;entry&#125;</span>&#x27;)</span><br><span class="hljs-string">    &#125;)(<span class="hljs-subst">$&#123;graph&#125;</span>)</span><br><span class="hljs-string">  `</span><br>&#125;<br><br><span class="hljs-keyword">const</span> code = <span class="hljs-title function_">generateCode</span>(<span class="hljs-string">&#x27;./src/index.js&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(code)<br></code></pre></td></tr></table></figure><h2 id="深入学习"><a href="#深入学习" class="headerlink" title="深入学习"></a>深入学习</h2><h3 id="CreateReactApp"><a href="#CreateReactApp" class="headerlink" title="CreateReactApp"></a>CreateReactApp</h3><h3 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h3><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="清除性能报错"><a href="#清除性能报错" class="headerlink" title="清除性能报错"></a>清除性能报错</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">performance</span>: <span class="hljs-literal">false</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="启动一个服务"><a href="#启动一个服务" class="headerlink" title="启动一个服务"></a>启动一个服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install http-server -D<br></code></pre></td></tr></table></figure><p>将 dist 目录 作为根目录启动服务：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http-server dist&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
